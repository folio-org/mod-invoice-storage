Building Maven artifact: mod-invoice-storage Version: 5.9.0-SNAPSHOT.11
+ mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report
----- withMaven Wrapper script -----
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8 -Dsun.net.inetaddr.ttl=10 -Dsun.net.inetaddr.negative.ttl=10 -Dmaven.ext.class.path="/home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08/pipeline-maven-spy.jar" -Dorg.jenkinsci.plugins.pipeline.maven.reportsFolder="/home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08" 
Apache Maven 3.8.8 (4c87b05d9aedce574290d1acc98575ed5eb6cd39)
Maven home: /usr/share/maven
Java version: 17.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-17-openjdk-amd64
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-1128-aws", arch: "amd64", family: "unix"
[INFO] [jenkins-event-spy] Generate /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08/maven-spy-20241022-134143-97418093783145999185719.log.tmp ...
[INFO] Scanning for projects...
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.2/junit-bom-5.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.2/junit-bom-5.11.2.pom (5.6 kB at 30 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.24.1/log4j-bom-2.24.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.24.1/log4j-bom-2.24.1.pom (12 kB at 613 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/11.3.0/logging-parent-11.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/11.3.0/logging-parent-11.3.0.pom (53 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/33/apache-33.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/33/apache-33.pom (24 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack-depchain/4.5.10/vertx-stack-depchain-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack-depchain/4.5.10/vertx-stack-depchain-4.5.10.pom (14 kB at 958 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack/4.5.10/vertx-stack-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack/4.5.10/vertx-stack-4.5.10.pom (3.2 kB at 244 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-parent/19/vertx-parent-19.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-parent/19/vertx-parent-19.pom (15 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/7/oss-parent-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/7/oss-parent-7.pom (4.8 kB at 345 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-dependencies/4.5.10/vertx-dependencies-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-dependencies/4.5.10/vertx-dependencies-4.5.10.pom (35 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-bom/4.1.111.Final/netty-bom-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-bom/4.1.111.Final/netty-bom-4.1.111.Final.pom (14 kB at 982 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.16.1/jackson-bom-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.16.1/jackson-bom-2.16.1.pom (18 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-parent/2.16/jackson-parent-2.16.pom (6.5 kB at 502 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/56/oss-parent-56.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/56/oss-parent-56.pom (24 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/maven-metadata.xml
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/maven-metadata.xml (1.9 kB at 2.3 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/0.8.12/jacoco-maven-plugin-0.8.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/0.8.12/jacoco-maven-plugin-0.8.12.pom (4.2 kB at 302 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.build/0.8.12/org.jacoco.build-0.8.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.build/0.8.12/org.jacoco.build-0.8.12.pom (43 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-bom/9.7/asm-bom-9.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-bom/9.7/asm-bom-9.7.pom (3.3 kB at 271 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/ow2/1.5.1/ow2-1.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/ow2/1.5.1/ow2-1.5.1.pom (11 kB at 941 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/0.8.12/jacoco-maven-plugin-0.8.12.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/jacoco-maven-plugin/0.8.12/jacoco-maven-plugin-0.8.12.jar (57 kB at 4.1 MB/s)
[INFO] 
[INFO] -------------------< org.folio:mod-invoice-storage >--------------------
[INFO] Building mod-invoice-storage 5.9.0-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/properties-maven-plugin/1.2.1/properties-maven-plugin-1.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/properties-maven-plugin/1.2.1/properties-maven-plugin-1.2.1.pom (7.0 kB at 541 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/77/mojo-parent-77.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/77/mojo-parent-77.pom (36 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.0/junit-bom-5.10.0.pom (5.6 kB at 404 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/properties-maven-plugin/1.2.1/properties-maven-plugin-1.2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/properties-maven-plugin/1.2.1/properties-maven-plugin-1.2.1.jar (41 kB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-maven-plugin/1.2.2/jsonschema2pojo-maven-plugin-1.2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-maven-plugin/1.2.2/jsonschema2pojo-maven-plugin-1.2.2.pom (2.6 kB at 214 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo/1.2.2/jsonschema2pojo-1.2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo/1.2.2/jsonschema2pojo-1.2.2.pom (21 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/9/oss-parent-9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/9/oss-parent-9.pom (6.6 kB at 547 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-maven-plugin/1.2.2/jsonschema2pojo-maven-plugin-1.2.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-maven-plugin/1.2.2/jsonschema2pojo-maven-plugin-1.2.2.jar (31 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-maven-plugin/35.3.0/domain-models-maven-plugin-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-maven-plugin/35.3.0/domain-models-maven-plugin-35.3.0.pom (6.4 kB at 580 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/raml-module-builder/35.3.0/raml-module-builder-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/raml-module-builder/35.3.0/raml-module-builder-35.3.0.pom (16 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.12.4/micrometer-bom-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.12.4/micrometer-bom-1.12.4.pom (7.9 kB at 527 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.14.1/mockito-bom-5.14.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.14.1/mockito-bom-5.14.1.pom (3.0 kB at 228 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.20.2/testcontainers-bom-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.20.2/testcontainers-bom-1.20.2.pom (11 kB at 574 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-maven-plugin/35.3.0/domain-models-maven-plugin-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-maven-plugin/35.3.0/domain-models-maven-plugin-35.3.0.jar (73 kB at 4.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-module-descriptor-validator/1.0.0/folio-module-descriptor-validator-1.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-module-descriptor-validator/1.0.0/folio-module-descriptor-validator-1.0.0.pom (7.5 kB at 228 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-module-descriptor-validator/1.0.0/folio-module-descriptor-validator-1.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-module-descriptor-validator/1.0.0/folio-module-descriptor-validator-1.0.0.jar (26 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/dev/aspectj/aspectj-maven-plugin/1.14/aspectj-maven-plugin-1.14.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/dev/aspectj/aspectj-maven-plugin/1.14/aspectj-maven-plugin-1.14.pom (27 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/dev/aspectj/aspectj-maven-plugin/1.14/aspectj-maven-plugin-1.14.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/dev/aspectj/aspectj-maven-plugin/1.14/aspectj-maven-plugin-1.14.jar (66 kB at 5.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom (3.9 kB at 327 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/22/maven-plugins-22.pom (13 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/21/maven-parent-21.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/21/maven-parent-21.pom (26 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/10/apache-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/10/apache-10.pom (15 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.jar (25 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/build-helper-maven-plugin/3.6.0/build-helper-maven-plugin-3.6.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/build-helper-maven-plugin/3.6.0/build-helper-maven-plugin-3.6.0.pom (8.1 kB at 677 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/82/mojo-parent-82.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/82/mojo-parent-82.pom (36 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.2/junit-bom-5.10.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.2/junit-bom-5.10.2.pom (5.6 kB at 514 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/build-helper-maven-plugin/3.6.0/build-helper-maven-plugin-3.6.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/build-helper-maven-plugin/3.6.0/build-helper-maven-plugin-3.6.0.jar (72 kB at 4.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/exec-maven-plugin/3.4.1/exec-maven-plugin-3.4.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/exec-maven-plugin/3.4.1/exec-maven-plugin-3.4.1.pom (14 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/85/mojo-parent-85.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/mojo-parent/85/mojo-parent-85.pom (37 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.3/junit-bom-5.10.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.3/junit-bom-5.10.3.pom (5.6 kB at 514 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/exec-maven-plugin/3.4.1/exec-maven-plugin-3.4.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/mojo/exec-maven-plugin/3.4.1/exec-maven-plugin-3.4.1.jar (86 kB at 5.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.pom (8.2 kB at 680 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/39/maven-plugins-39.pom (8.1 kB at 736 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/39/maven-parent-39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/39/maven-parent-39.pom (48 kB at 3.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/29/apache-29.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/29/apache-29.pom (21 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-resources-plugin/3.3.1/maven-resources-plugin-3.3.1.jar (31 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/coderplus/maven/plugins/copy-rename-maven-plugin/1.0.1/copy-rename-maven-plugin-1.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/coderplus/maven/plugins/copy-rename-maven-plugin/1.0.1/copy-rename-maven-plugin-1.0.1.pom (4.3 kB at 357 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/coderplus/maven/plugins/copy-rename-maven-plugin/1.0.1/copy-rename-maven-plugin-1.0.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/coderplus/maven/plugins/copy-rename-maven-plugin/1.0.1/copy-rename-maven-plugin-1.0.1.jar (11 kB at 915 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-compiler-plugin/3.13.0/maven-compiler-plugin-3.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-compiler-plugin/3.13.0/maven-compiler-plugin-3.13.0.pom (10 kB at 949 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/41/maven-plugins-41.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/41/maven-plugins-41.pom (7.4 kB at 668 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/41/maven-parent-41.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/41/maven-parent-41.pom (50 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/31/apache-31.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/31/apache-31.pom (24 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-compiler-plugin/3.13.0/maven-compiler-plugin-3.13.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-compiler-plugin/3.13.0/maven-compiler-plugin-3.13.0.jar (83 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-surefire-plugin/3.5.1/maven-surefire-plugin-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-surefire-plugin/3.5.1/maven-surefire-plugin-3.5.1.pom (5.7 kB at 518 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire/3.5.1/surefire-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire/3.5.1/surefire-3.5.1.pom (20 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/43/maven-parent-43.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/43/maven-parent-43.pom (50 kB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-surefire-plugin/3.5.1/maven-surefire-plugin-3.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-surefire-plugin/3.5.1/maven-surefire-plugin-3.5.1.jar (46 kB at 3.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-antrun-plugin/3.1.0/maven-antrun-plugin-3.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-antrun-plugin/3.1.0/maven-antrun-plugin-3.1.0.pom (9.1 kB at 414 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/34/maven-plugins-34.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/34/maven-plugins-34.pom (11 kB at 972 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/34/maven-parent-34.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/34/maven-parent-34.pom (43 kB at 3.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/23/apache-23.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/23/apache-23.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-antrun-plugin/3.1.0/maven-antrun-plugin-3.1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-antrun-plugin/3.1.0/maven-antrun-plugin-3.1.0.jar (41 kB at 3.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.pom (5.8 kB at 583 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-jar-plugin/2.4/maven-jar-plugin-2.4.jar (34 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-shade-plugin/3.6.0/maven-shade-plugin-3.6.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-shade-plugin/3.6.0/maven-shade-plugin-3.6.0.pom (12 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/42/maven-plugins-42.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/42/maven-plugins-42.pom (7.7 kB at 699 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/42/maven-parent-42.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/42/maven-parent-42.pom (50 kB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/32/apache-32.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/32/apache-32.pom (24 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-shade-plugin/3.6.0/maven-shade-plugin-3.6.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-shade-plugin/3.6.0/maven-shade-plugin-3.6.0.jar (150 kB at 10.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.pom (6.4 kB at 580 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-plugins/23/maven-plugins-23.pom (9.2 kB at 836 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/22/maven-parent-22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/22/maven-parent-22.pom (30 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/11/apache-11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/11/apache-11.pom (15 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugins/maven-install-plugin/2.4/maven-install-plugin-2.4.jar (27 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-runtime/35.3.0/domain-models-runtime-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-runtime/35.3.0/domain-models-runtime-35.3.0.pom (17 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.pom (21 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/5/jvnet-parent-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/5/jvnet-parent-5.pom (8.9 kB at 806 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/jersey-media-json-jackson/2.45/jersey-media-json-jackson-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/jersey-media-json-jackson/2.45/jersey-media-json-jackson-2.45.pom (6.4 kB at 398 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/project/2.45/project-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/project/2.45/project-2.45.pom (2.1 kB at 205 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/project/2.45/project-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/project/2.45/project-2.45.pom (107 kB at 7.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.9/project-1.0.9.pom (16 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/core/jersey-common/2.45/jersey-common-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/core/jersey-common/2.45/jersey-common-2.45.pom (44 kB at 3.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.pom (16 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/ca-parent/1.3.5/ca-parent-1.3.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/ca-parent/1.3.5/ca-parent-1.3.5.pom (2.8 kB at 280 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.5/project-1.0.5.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.pom (5.2 kB at 472 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/2.6.1/external-2.6.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/2.6.1/external-2.6.1.pom (1.5 kB at 134 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/hk2-parent/2.6.1/hk2-parent-2.6.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/hk2-parent/2.6.1/hk2-parent-2.6.1.pom (42 kB at 3.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.pom (7.4 kB at 736 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/jersey-entity-filtering/2.45/jersey-entity-filtering-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/jersey-entity-filtering/2.45/jersey-entity-filtering-2.45.pom (3.5 kB at 318 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/project/2.45/project-2.45.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/project/2.45/project-2.45.pom (2.9 kB at 263 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.16.1/jackson-annotations-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.16.1/jackson-annotations-2.16.1.pom (7.1 kB at 307 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.16.1/jackson-databind-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.16.1/jackson-databind-2.16.1.pom (21 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.16.1/jackson-base-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.16.1/jackson-base-2.16.1.pom (11 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.2/junit-bom-5.9.2.pom (5.6 kB at 563 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.16.1/jackson-core-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.16.1/jackson-core-2.16.1.pom (9.9 kB at 994 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.3/junit-bom-5.9.3.pom (5.6 kB at 375 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.16.1/jackson-module-jaxb-annotations-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.16.1/jackson-module-jaxb-annotations-2.16.1.pom (3.8 kB at 378 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-modules-base/2.16.1/jackson-modules-base-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-modules-base/2.16.1/jackson-modules-base-2.16.1.pom (4.1 kB at 409 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api-parent/2.3.3/jakarta.xml.bind-api-parent-2.3.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api-parent/2.3.3/jakarta.xml.bind-api-parent-2.3.3.pom (9.0 kB at 898 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.6/project-1.0.6.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.pom (31 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/73/commons-parent-73.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/73/commons-parent-73.pom (78 kB at 6.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.0/junit-bom-5.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.0/junit-bom-5.11.0.pom (5.6 kB at 565 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/32.1.2-jre/guava-parent-32.1.2-jre.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/32.1.2-jre/guava-parent-32.1.2-jre.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.pom (2.4 kB at 241 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/26.0-android/guava-parent-26.0-android.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/26.0-android/guava-parent-26.0-android.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.pom (2.3 kB at 142 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.pom (4.3 kB at 390 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.pom (2.1 kB at 210 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.pom (2.2 kB at 216 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.18.0/error_prone_parent-2.18.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.18.0/error_prone_parent-2.18.0.pom (11 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.pom (2.9 kB at 292 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web/4.5.10/vertx-web-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web/4.5.10/vertx-web-4.5.10.pom (5.1 kB at 465 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-parent/4.5.10/vertx-web-parent-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-parent/4.5.10/vertx-web-parent-4.5.10.pom (4.9 kB at 486 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-ext-parent/38/vertx-ext-parent-38.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-ext-parent/38/vertx-ext-parent-38.pom (8.5 kB at 772 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-ext/38/vertx-ext-38.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-ext/38/vertx-ext-38.pom (1.5 kB at 149 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-common/4.5.10/vertx-web-common-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-common/4.5.10/vertx-web-common-4.5.10.pom (489 B at 49 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-core/4.5.10/vertx-core-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-core/4.5.10/vertx-core-4.5.10.pom (76 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-common/4.1.111.Final/netty-common-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-common/4.1.111.Final/netty-common-4.1.111.Final.pom (12 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-parent/4.1.111.Final/netty-parent-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-parent/4.1.111.Final/netty-parent-4.1.111.Final.pom (90 kB at 6.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-buffer/4.1.111.Final/netty-buffer-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-buffer/4.1.111.Final/netty-buffer-4.1.111.Final.pom (1.6 kB at 176 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport/4.1.111.Final/netty-transport-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport/4.1.111.Final/netty-transport-4.1.111.Final.pom (2.2 kB at 103 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver/4.1.111.Final/netty-resolver-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver/4.1.111.Final/netty-resolver-4.1.111.Final.pom (1.6 kB at 176 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler/4.1.111.Final/netty-handler-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler/4.1.111.Final/netty-handler-4.1.111.Final.pom (4.6 kB at 289 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport-native-unix-common/4.1.111.Final/netty-transport-native-unix-common-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport-native-unix-common/4.1.111.Final/netty-transport-native-unix-common-4.1.111.Final.pom (33 kB at 3.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec/4.1.111.Final/netty-codec-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec/4.1.111.Final/netty-codec-4.1.111.Final.pom (5.5 kB at 498 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler-proxy/4.1.111.Final/netty-handler-proxy-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler-proxy/4.1.111.Final/netty-handler-proxy-4.1.111.Final.pom (3.6 kB at 355 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-socks/4.1.111.Final/netty-codec-socks-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-socks/4.1.111.Final/netty-codec-socks-4.1.111.Final.pom (2.5 kB at 254 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http/4.1.111.Final/netty-codec-http-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http/4.1.111.Final/netty-codec-http-4.1.111.Final.pom (4.4 kB at 436 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http2/4.1.111.Final/netty-codec-http2-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http2/4.1.111.Final/netty-codec-http2-4.1.111.Final.pom (5.2 kB at 516 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver-dns/4.1.111.Final/netty-resolver-dns-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver-dns/4.1.111.Final/netty-resolver-dns-4.1.111.Final.pom (3.7 kB at 372 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-dns/4.1.111.Final/netty-codec-dns-4.1.111.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-dns/4.1.111.Final/netty-codec-dns-4.1.111.Final.pom (2.7 kB at 270 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-common/4.5.10/vertx-auth-common-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-common/4.5.10/vertx-auth-common-4.5.10.pom (1.9 kB at 193 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-parent/4.5.10/vertx-auth-parent-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-parent/4.5.10/vertx-auth-parent-4.5.10.pom (3.8 kB at 384 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-bridge-common/4.5.10/vertx-bridge-common-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-bridge-common/4.5.10/vertx-bridge-common-4.5.10.pom (6.9 kB at 685 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-client/4.5.10/vertx-web-client-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-client/4.5.10/vertx-web-client-4.5.10.pom (2.9 kB at 289 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-uri-template/4.5.10/vertx-uri-template-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-uri-template/4.5.10/vertx-uri-template-4.5.10.pom (5.2 kB at 520 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-micrometer-metrics/4.5.10/vertx-micrometer-metrics-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-micrometer-metrics/4.5.10/vertx-micrometer-metrics-4.5.10.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-core/1.12.4/micrometer-core-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-core/1.12.4/micrometer-core-1.12.4.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-commons/1.12.4/micrometer-commons-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-commons/1.12.4/micrometer-commons-1.12.4.pom (3.4 kB at 341 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-observation/1.12.4/micrometer-observation-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-observation/1.12.4/micrometer-observation-1.12.4.pom (3.8 kB at 256 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.pom (7.2 kB at 724 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.pom (11 kB at 982 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-influx/1.12.4/micrometer-registry-influx-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-influx/1.12.4/micrometer-registry-influx-1.12.4.pom (3.4 kB at 340 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.pom (2.7 kB at 270 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/2.0.7/slf4j-parent-2.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/2.0.7/slf4j-parent-2.0.7.pom (17 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.pom (3.4 kB at 312 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.pom (1.6 kB at 158 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/parent/0.16.0/parent-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/parent/0.16.0/parent-0.16.0.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.pom (2.2 kB at 244 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.pom (1.5 kB at 151 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer/0.16.0/simpleclient_tracer-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer/0.16.0/simpleclient_tracer-0.16.0.pom (1.2 kB at 121 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.pom (839 B at 84 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.pom (2.4 kB at 264 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-jmx/1.12.4/micrometer-registry-jmx-1.12.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-jmx/1.12.4/micrometer-registry-jmx-1.12.4.pom (3.4 kB at 170 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-jmx/4.2.25/metrics-jmx-4.2.25.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-jmx/4.2.25/metrics-jmx-4.2.25.pom (2.6 kB at 260 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-parent/4.2.25/metrics-parent-4.2.25.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-parent/4.2.25/metrics-parent-4.2.25.pom (21 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-bom/4.2.25/metrics-bom-4.2.25.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-bom/4.2.25/metrics-bom-4.2.25.pom (8.2 kB at 821 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-core/4.2.25/metrics-core-4.2.25.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-core/4.2.25/metrics-core-4.2.25.pom (2.6 kB at 233 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final.pom (5.3 kB at 351 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-classes/2.0.65.Final/netty-tcnative-classes-2.0.65.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-classes/2.0.65.Final/netty-tcnative-classes-2.0.65.Final.pom (1.6 kB at 175 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-parent/2.0.65.Final/netty-tcnative-parent-2.0.65.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-parent/2.0.65.Final/netty-tcnative-parent-2.0.65.Final.pom (39 kB at 3.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/client/2.1/client-2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/client/2.1/client-2.1.pom (3.9 kB at 434 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/parent/2.1/parent-2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/parent/2.1/parent-2.1.pom (9.3 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/common/2.1/common-2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/common/2.1/common-2.1.pom (1.4 kB at 156 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/saslprep/1.1/saslprep-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/saslprep/1.1/saslprep-1.1.pom (880 B at 98 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/parent/1.1/parent-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/parent/1.1/parent-1.1.pom (7.2 kB at 718 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/stringprep/1.1/stringprep-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/stringprep/1.1/stringprep-1.1.pom (2.4 kB at 239 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-interfaces/35.3.0/domain-models-api-interfaces-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-interfaces/35.3.0/domain-models-api-interfaces-35.3.0.pom (6.1 kB at 613 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/mail/mailapi/1.4.3/mailapi-1.4.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/mail/mailapi/1.4.3/mailapi-1.4.3.pom (3.9 kB at 435 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/mail/all/1.4.3/all-1.4.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/mail/all/1.4.3/all-1.4.3.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-aspects/35.3.0/domain-models-api-aspects-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-aspects/35.3.0/domain-models-api-aspects-35.3.0.pom (4.1 kB at 408 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator-parent/8.0.1.Final/hibernate-validator-parent-8.0.1.Final.pom (81 kB at 7.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/arquillian/arquillian-bom/1.7.0.Alpha10/arquillian-bom-1.7.0.Alpha10.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/shrinkwrap-bom/1.2.6/shrinkwrap-bom-1.2.6.pom (4.0 kB at 398 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-bom/3.1.4/shrinkwrap-resolver-bom-3.1.4.pom (7.0 kB at 699 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.6.3/maven-3.6.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.6.3/maven-3.6.3.pom (26 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/33/maven-parent-33.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/33/maven-parent-33.pom (44 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/21/apache-21.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/21/apache-21.pom (17 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/shrinkwrap/descriptors/shrinkwrap-descriptors-bom/2.0.0/shrinkwrap-descriptors-bom-2.0.0.pom (5.2 kB at 523 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.pom (11 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/jboss-parent/39/jboss-parent-39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/jboss-parent/39/jboss-parent-39.pom (68 kB at 6.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.8.2/junit-bom-5.8.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.8.2/junit-bom-5.8.2.pom (5.6 kB at 563 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/classmate/1.5.1/classmate-1.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/classmate/1.5.1/classmate-1.5.1.pom (7.3 kB at 726 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/35/oss-parent-35.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/35/oss-parent-35.pom (23 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jakarta.el/4.0.2/jakarta.el-4.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jakarta.el/4.0.2/jakarta.el-4.0.2.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/el/jakarta.el-api/4.0.0/jakarta.el-api-4.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/el/jakarta.el-api/4.0.0/jakarta.el-api-4.0.0.pom (12 kB at 502 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.pom (24 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/48/commons-parent-48.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/48/commons-parent-48.pom (72 kB at 7.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-api/2.24.1/log4j-api-2.24.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-api/2.24.1/log4j-api-2.24.1.pom (4.4 kB at 441 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j/2.24.1/log4j-2.24.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j/2.24.1/log4j-2.24.1.pom (35 kB at 3.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-bom/4.0.22/groovy-bom-4.0.22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-bom/4.0.22/groovy-bom-4.0.22.pom (27 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.17.2/jackson-bom-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.17.2/jackson-bom-2.17.2.pom (19 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-parent/2.17/jackson-parent-2.17.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-parent/2.17/jackson-parent-2.17.pom (6.5 kB at 725 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/58/oss-parent-58.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/oss-parent/58/oss-parent-58.pom (24 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/platform/jakarta.jakartaee-bom/9.1.0/jakarta.jakartaee-bom-9.1.0.pom (9.6 kB at 868 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/platform/jakartaee-api-parent/9.1.0/jakartaee-api-parent-9.1.0.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/ee4j/project/1.0.7/project-1.0.7.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/4.11.0/mockito-bom-4.11.0.pom (3.2 kB at 350 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-framework-bom/5.3.39/spring-framework-bom-5.3.39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-framework-bom/5.3.39/spring-framework-bom-5.3.39.pom (5.7 kB at 566 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-core/2.24.1/log4j-core-2.24.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-core/2.24.1/log4j-core-2.24.1.pom (9.3 kB at 935 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjrt/1.9.22.1/aspectjrt-1.9.22.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjrt/1.9.22.1/aspectjrt-1.9.22.1.pom (2.2 kB at 221 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/javassist/javassist/3.30.2-GA/javassist-3.30.2-GA.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/javassist/javassist/3.30.2-GA/javassist-3.30.2-GA.pom (11 kB at 996 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/cql2pgjson/35.3.0/cql2pgjson-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/cql2pgjson/35.3.0/cql2pgjson-35.3.0.pom (6.0 kB at 542 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/dbschema/35.3.0/dbschema-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/dbschema/35.3.0/dbschema-35.3.0.pom (3.1 kB at 310 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/util/35.3.0/util-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/util/35.3.0/util-35.3.0.pom (2.9 kB at 323 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi-common/6.0.3/okapi-common-6.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi-common/6.0.3/okapi-common-6.0.3.pom (4.9 kB at 405 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi/6.0.3/okapi-6.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi/6.0.3/okapi-6.0.3.pom (13 kB at 876 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.22.1/log4j-bom-2.22.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.22.1/log4j-bom-2.22.1.pom (12 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/10.5.0/logging-parent-10.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/10.5.0/logging-parent-10.5.0.pom (52 kB at 4.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack-depchain/4.5.7/vertx-stack-depchain-4.5.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack-depchain/4.5.7/vertx-stack-depchain-4.5.7.pom (14 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack/4.5.7/vertx-stack-4.5.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-stack/4.5.7/vertx-stack-4.5.7.pom (3.2 kB at 318 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-dependencies/4.5.7/vertx-dependencies-4.5.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-dependencies/4.5.7/vertx-dependencies-4.5.7.pom (35 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-bom/4.1.108.Final/netty-bom-4.1.108.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-bom/4.1.108.Final/netty-bom-4.1.108.Final.pom (14 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.12.2/micrometer-bom-1.12.2.pom (8.0 kB at 805 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.20.1/testcontainers-bom-1.20.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.20.1/testcontainers-bom-1.20.1.pom (11 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.10.0/mockito-bom-5.10.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.10.0/mockito-bom-5.10.0.pom (3.1 kB at 311 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/z3950/zing/cql-java/1.13/cql-java-1.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/z3950/zing/cql-java/1.13/cql-java-1.13.pom (6.4 kB at 583 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-pg-client/4.5.10/vertx-pg-client-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-pg-client/4.5.10/vertx-pg-client-4.5.10.pom (6.7 kB at 669 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client-parent/4.5.10/vertx-sql-client-parent-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client-parent/4.5.10/vertx-sql-client-parent-4.5.10.pom (13 kB at 591 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client/4.5.10/vertx-sql-client-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client/4.5.10/vertx-sql-client-4.5.10.pom (3.6 kB at 361 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.17.0/commons-io-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.17.0/commons-io-2.17.0.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/74/commons-parent-74.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/74/commons-parent-74.pom (78 kB at 7.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/freemarker/freemarker/2.3.33/freemarker-2.3.33.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/freemarker/freemarker/2.3.33/freemarker-2.3.33.pom (3.5 kB at 351 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-di-support/2.1.0/folio-di-support-2.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-di-support/2.1.0/folio-di-support-2.1.0.pom (6.9 kB at 693 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-service-proxy/4.5.10/vertx-service-proxy-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-service-proxy/4.5.10/vertx-service-proxy-4.5.10.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-core/6.1.5/spring-core-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-core/6.1.5/spring-core-6.1.5.pom (2.0 kB at 202 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-jcl/6.1.5/spring-jcl-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-jcl/6.1.5/spring-jcl-6.1.5.pom (1.8 kB at 204 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-context/6.1.5/spring-context-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-context/6.1.5/spring-context-6.1.5.pom (2.8 kB at 213 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-aop/6.1.5/spring-aop-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-aop/6.1.5/spring-aop-6.1.5.pom (2.2 kB at 244 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-beans/6.1.5/spring-beans-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-beans/6.1.5/spring-beans-6.1.5.pom (2.0 kB at 184 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-expression/6.1.5/spring-expression-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-expression/6.1.5/spring-expression-6.1.5.pom (2.1 kB at 207 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/projectlombok/lombok/1.18.30/lombok-1.18.30.pom (1.5 kB at 148 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured/5.5.0/rest-assured-5.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured/5.5.0/rest-assured-5.5.0.pom (7.6 kB at 757 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-parent/5.5.0/rest-assured-parent-5.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-parent/5.5.0/rest-assured-parent-5.5.0.pom (22 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/5/oss-parent-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/oss/oss-parent/5/oss-parent-5.pom (4.1 kB at 408 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy/4.0.22/groovy-4.0.22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy/4.0.22/groovy-4.0.22.pom (24 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-xml/4.0.22/groovy-xml-4.0.22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-xml/4.0.22/groovy-xml-4.0.22.pom (23 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.pom (6.6 kB at 661 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-client/4.5.13/httpcomponents-client-4.5.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-client/4.5.13/httpcomponents-client-4.5.13.pom (16 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-parent/11/httpcomponents-parent-11.pom (35 kB at 3.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.pom (5.0 kB at 414 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-core/4.4.13/httpcomponents-core-4.4.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcomponents-core/4.4.13/httpcomponents-core-4.4.13.pom (13 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.2/commons-logging-1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.2/commons-logging-1.2.pom (19 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/34/commons-parent-34.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/34/commons-parent-34.pom (56 kB at 5.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/13/apache-13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/13/apache-13.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.11/commons-codec-1.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.11/commons-codec-1.11.pom (14 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/42/commons-parent-42.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/42/commons-parent-42.pom (68 kB at 6.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/18/apache-18.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/18/apache-18.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.pom (5.2 kB at 473 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest/2.2/hamcrest-2.2.pom (1.1 kB at 113 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.pom (1.2 kB at 122 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/json-path/5.5.0/json-path-5.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/json-path/5.5.0/json-path-5.5.0.pom (4.9 kB at 245 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-json/4.0.22/groovy-json-4.0.22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-json/4.0.22/groovy-json-4.0.22.pom (23 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-common/5.5.0/rest-assured-common-5.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-common/5.5.0/rest-assured-common-5.5.0.pom (3.2 kB at 320 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.pom (30 kB at 3.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/51/commons-parent-51.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/51/commons-parent-51.pom (78 kB at 7.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/xml-path/5.5.0/xml-path-5.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/xml-path/5.5.0/xml-path-5.5.0.pom (4.3 kB at 432 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter/5.11.2/junit-jupiter-5.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter/5.11.2/junit-jupiter-5.11.2.pom (3.2 kB at 320 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-api/5.11.2/junit-jupiter-api-5.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-api/5.11.2/junit-jupiter-api-5.11.2.pom (3.2 kB at 318 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.pom (2.0 kB at 204 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.11.2/junit-platform-commons-1.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.11.2/junit-platform-commons-1.11.2.pom (2.8 kB at 283 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.pom (1.5 kB at 170 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-params/5.11.2/junit-jupiter-params-5.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-params/5.11.2/junit-jupiter-params-5.11.2.pom (3.0 kB at 301 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-engine/5.11.2/junit-jupiter-engine-5.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-engine/5.11.2/junit-jupiter-engine-5.11.2.pom (3.2 kB at 229 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.11.2/junit-platform-engine-1.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.11.2/junit-platform-engine-1.11.2.pom (3.2 kB at 214 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jmockit/jmockit/1.49/jmockit-1.49.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jmockit/jmockit/1.49/jmockit-1.49.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/one/util/streamex/0.8.3/streamex-0.8.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/one/util/streamex/0.8.3/streamex-0.8.3.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-lang/commons-lang/2.6/commons-lang-2.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-lang/commons-lang/2.6/commons-lang-2.6.pom (17 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/17/commons-parent-17.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/17/commons-parent-17.pom (31 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/7/apache-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/7/apache-7.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-test/6.1.5/spring-test-6.1.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-test/6.1.5/spring-test-6.1.5.pom (2.0 kB at 114 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/postgresql/1.20.2/postgresql-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/postgresql/1.20.2/postgresql-1.20.2.pom (1.5 kB at 152 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/jdbc/1.20.2/jdbc-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/jdbc/1.20.2/jdbc-1.20.2.pom (1.5 kB at 151 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/database-commons/1.20.2/database-commons-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/database-commons/1.20.2/database-commons-1.20.2.pom (1.5 kB at 153 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers/1.20.2/testcontainers-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers/1.20.2/testcontainers-1.20.2.pom (2.6 kB at 262 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/4.13.2/junit-4.13.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/4.13.2/junit-4.13.2.pom (27 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.pom (766 B at 77 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-parent/1.3/hamcrest-parent-1.3.pom (2.0 kB at 179 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.pom (22 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/61/commons-parent-61.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/61/commons-parent-61.pom (81 kB at 7.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/30/apache-30.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/30/apache-30.pom (23 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.pom (6.2 kB at 622 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/annotations/17.0.0/annotations-17.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/annotations/17.0.0/annotations-17.0.0.pom (1.4 kB at 68 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-api/3.4.0/docker-java-api-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-api/3.4.0/docker-java-api-3.4.0.pom (2.4 kB at 241 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-parent/3.4.0/docker-java-parent-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-parent/3.4.0/docker-java-parent-3.4.0.pom (12 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport-zerodep/3.4.0/docker-java-transport-zerodep-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport-zerodep/3.4.0/docker-java-transport-zerodep-3.4.0.pom (4.1 kB at 215 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport/3.4.0/docker-java-transport-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport/3.4.0/docker-java-transport-3.4.0.pom (1.6 kB at 164 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/dev/jna/jna/5.13.0/jna-5.13.0.pom (2.0 kB at 185 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/junit-jupiter/1.20.2/junit-jupiter-1.20.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/junit-jupiter/1.20.2/junit-jupiter-1.20.2.pom (1.5 kB at 154 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-unit/4.5.10/vertx-unit-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-unit/4.5.10/vertx-unit-4.5.10.pom (8.4 kB at 839 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/postgres-testing/35.3.0/postgres-testing-35.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/postgres-testing/35.3.0/postgres-testing-35.3.0.pom (3.0 kB at 271 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.27.1/commons-compress-1.27.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.27.1/commons-compress-1.27.1.pom (23 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/72/commons-parent-72.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/72/commons-parent-72.pom (78 kB at 7.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.0-M2/junit-bom-5.11.0-M2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.11.0-M2/junit-bom-5.11.0-M2.pom (5.7 kB at 571 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.17.1/commons-codec-1.17.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.17.1/commons-codec-1.17.1.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/71/commons-parent-71.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/71/commons-parent-71.pom (78 kB at 7.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.16.1/commons-io-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.16.1/commons-io-2.16.1.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/69/commons-parent-69.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/69/commons-parent-69.pom (77 kB at 7.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.16.0/commons-lang3-3.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.16.0/commons-lang3-3.16.0.pom (31 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.pom (16 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/66/commons-parent-66.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/66/commons-parent-66.pom (77 kB at 7.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.10.1/junit-bom-5.10.1.pom (5.6 kB at 628 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.pom (2.3 kB at 228 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.pom (2.5 kB at 274 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.4/byte-buddy-1.15.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.4/byte-buddy-1.15.4.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.15.4/byte-buddy-parent-1.15.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.15.4/byte-buddy-parent-1.15.4.pom (63 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.4/byte-buddy-agent-1.15.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.4/byte-buddy-agent-1.15.4.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis/3.3/objenesis-3.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis/3.3/objenesis-3.3.pom (3.0 kB at 301 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis-parent/3.3/objenesis-parent-3.3.pom (19 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-junit5/4.5.10/vertx-junit5-4.5.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-junit5/4.5.10/vertx-junit5-4.5.10.pom (8.0 kB at 887 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-slf4j-impl/2.24.1/log4j-slf4j-impl-2.24.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-slf4j-impl/2.24.1/log4j-slf4j-impl-2.24.1.pom (5.3 kB at 530 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-runtime/35.3.0/domain-models-runtime-35.3.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/jersey-media-json-jackson/2.45/jersey-media-json-jackson-2.45.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/core/jersey-common/2.45/jersey-common-2.45.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar (25 kB at 895 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/media/jersey-media-json-jackson/2.45/jersey-media-json-jackson-2.45.jar (83 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/ws/rs/javax.ws.rs-api/2.0.1/javax.ws.rs-api-2.0.1.jar (116 kB at 3.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/jersey-entity-filtering/2.45/jersey-entity-filtering-2.45.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/external/jakarta.inject/2.6.1/jakarta.inject-2.6.1.jar (18 kB at 490 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.16.1/jackson-module-jaxb-annotations-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-runtime/35.3.0/domain-models-runtime-35.3.0.jar (1.9 MB at 43 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/hk2/osgi-resource-locator/1.0.3/osgi-resource-locator-1.0.3.jar (19 kB at 260 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.16.1/jackson-core-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/core/jersey-common/2.45/jersey-common-2.45.jar (1.3 MB at 16 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.16.1/jackson-databind-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.16.1/jackson-module-jaxb-annotations-2.16.1.jar (37 kB at 458 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.16.1/jackson-annotations-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar (116 kB at 1.4 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/ext/jersey-entity-filtering/2.45/jersey-entity-filtering-2.45.jar (85 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.16.1/jackson-core-2.16.1.jar (578 kB at 5.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar (674 kB at 6.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.16.1/jackson-annotations-2.16.1.jar (78 kB at 701 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.16.1/jackson-databind-2.16.1.jar (1.6 MB at 14 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar (4.6 kB at 39 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar (2.2 kB at 18 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web/4.5.10/vertx-web-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.33.0/checker-qual-3.33.0.jar (224 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-common/4.5.10/vertx-web-common-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/2.8/j2objc-annotations-2.8.jar (9.3 kB at 72 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-common/4.5.10/vertx-auth-common-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.18.0/error_prone_annotations-2.18.0.jar (16 kB at 120 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-bridge-common/4.5.10/vertx-bridge-common-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-common/4.5.10/vertx-web-common-4.5.10.jar (24 kB at 168 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-client/4.5.10/vertx-web-client-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-bridge-common/4.5.10/vertx-bridge-common-4.5.10.jar (11 kB at 78 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-uri-template/4.5.10/vertx-uri-template-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web/4.5.10/vertx-web-4.5.10.jar (360 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-micrometer-metrics/4.5.10/vertx-micrometer-metrics-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-auth-common/4.5.10/vertx-auth-common-4.5.10.jar (135 kB at 925 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-core/1.12.4/micrometer-core-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/32.1.2-jre/guava-32.1.2-jre.jar (3.0 MB at 20 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-uri-template/4.5.10/vertx-uri-template-4.5.10.jar (36 kB at 230 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-web-client/4.5.10/vertx-web-client-4.5.10.jar (117 kB at 747 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-influx/1.12.4/micrometer-registry-influx-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-micrometer-metrics/4.5.10/vertx-micrometer-metrics-4.5.10.jar (112 kB at 700 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.jar (44 kB at 249 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hdrhistogram/HdrHistogram/2.1.12/HdrHistogram-2.1.12.jar (174 kB at 971 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar (30 kB at 165 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-influx/1.12.4/micrometer-registry-influx-1.12.4.jar (27 kB at 150 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar (8.0 kB at 43 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-core/1.12.4/micrometer-core-1.12.4.jar (884 kB at 4.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-jmx/1.12.4/micrometer-registry-jmx-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar (4.3 kB at 23 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-jmx/4.2.25/metrics-jmx-4.2.25.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar (90 kB at 469 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-core/4.2.25/metrics-core-4.2.25.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar (3.4 kB at 18 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-linux-x86_64.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar (4.6 kB at 23 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-classes/2.0.65.Final/netty-tcnative-classes-2.0.65.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-registry-jmx/1.12.4/micrometer-registry-jmx-1.12.4.jar (9.2 kB at 47 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-linux-aarch_64.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-jmx/4.2.25/metrics-jmx-4.2.25.jar (22 kB at 106 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-osx-x86_64.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-classes/2.0.65.Final/netty-tcnative-classes-2.0.65.Final.jar (35 kB at 162 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-osx-aarch_64.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/dropwizard/metrics/metrics-core/4.2.25/metrics-core-4.2.25.jar (131 kB at 592 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-windows-x86_64.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-linux-x86_64.jar (1.2 MB at 5.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/client/2.1/client-2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-linux-aarch_64.jar (1.1 MB at 4.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/common/2.1/common-2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/client/2.1/client-2.1.jar (16 kB at 67 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/saslprep/1.1/saslprep-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-osx-aarch_64.jar (999 kB at 4.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/stringprep/1.1/stringprep-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-osx-x86_64.jar (1.1 MB at 4.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/cql2pgjson/35.3.0/cql2pgjson-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/scram/common/2.1/common-2.1.jar (67 kB at 265 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/dbschema/35.3.0/dbschema-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/saslprep/1.1/saslprep-1.1.jar (3.8 kB at 15 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi-common/6.0.3/okapi-common-6.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-tcnative-boringssl-static/2.0.65.Final/netty-tcnative-boringssl-static-2.0.65.Final-windows-x86_64.jar (996 kB at 3.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/z3950/zing/cql-java/1.13/cql-java-1.13.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/ongres/stringprep/stringprep/1.1/stringprep-1.1.jar (36 kB at 142 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-pg-client/4.5.10/vertx-pg-client-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/okapi/okapi-common/6.0.3/okapi-common-6.0.3.jar (63 kB at 230 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client/4.5.10/vertx-sql-client-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/cql2pgjson/35.3.0/cql2pgjson-35.3.0.jar (38 kB at 139 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.17.0/commons-io-2.17.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/dbschema/35.3.0/dbschema-35.3.0.jar (31 kB at 110 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/z3950/zing/cql-java/1.13/cql-java-1.13.jar (43 kB at 155 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/freemarker/freemarker/2.3.33/freemarker-2.3.33.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-pg-client/4.5.10/vertx-pg-client-4.5.10.jar (168 kB at 595 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-core/2.24.1/log4j-core-2.24.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-sql-client/4.5.10/vertx-sql-client-4.5.10.jar (176 kB at 613 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-api/2.24.1/log4j-api-2.24.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar (752 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-interfaces/35.3.0/domain-models-api-interfaces-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.17.0/commons-io-2.17.0.jar (516 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-core/4.5.10/vertx-core-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-api/2.24.1/log4j-api-2.24.1.jar (348 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-common/4.1.111.Final/netty-common-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-interfaces/35.3.0/domain-models-api-interfaces-35.3.0.jar (123 kB at 374 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-buffer/4.1.111.Final/netty-buffer-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-core/2.24.1/log4j-core-2.24.1.jar (1.9 MB at 5.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport/4.1.111.Final/netty-transport-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/freemarker/freemarker/2.3.33/freemarker-2.3.33.jar (1.9 MB at 5.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler/4.1.111.Final/netty-handler-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-buffer/4.1.111.Final/netty-buffer-4.1.111.Final.jar (336 kB at 881 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport-native-unix-common/4.1.111.Final/netty-transport-native-unix-common-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-core/4.5.10/vertx-core-4.5.10.jar (1.6 MB at 4.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec/4.1.111.Final/netty-codec-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler/4.1.111.Final/netty-handler-4.1.111.Final.jar (570 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler-proxy/4.1.111.Final/netty-handler-proxy-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport/4.1.111.Final/netty-transport-4.1.111.Final.jar (518 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-socks/4.1.111.Final/netty-codec-socks-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-common/4.1.111.Final/netty-common-4.1.111.Final.jar (694 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http/4.1.111.Final/netty-codec-http-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-transport-native-unix-common/4.1.111.Final/netty-transport-native-unix-common-4.1.111.Final.jar (44 kB at 112 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http2/4.1.111.Final/netty-codec-http2-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-handler-proxy/4.1.111.Final/netty-handler-proxy-4.1.111.Final.jar (26 kB at 65 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver/4.1.111.Final/netty-resolver-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-socks/4.1.111.Final/netty-codec-socks-4.1.111.Final.jar (121 kB at 305 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver-dns/4.1.111.Final/netty-resolver-dns-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec/4.1.111.Final/netty-codec-4.1.111.Final.jar (352 kB at 878 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-dns/4.1.111.Final/netty-codec-dns-4.1.111.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver/4.1.111.Final/netty-resolver-4.1.111.Final.jar (38 kB at 93 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/mail/mailapi/1.4.3/mailapi-1.4.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http/4.1.111.Final/netty-codec-http-4.1.111.Final.jar (668 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-aspects/35.3.0/domain-models-api-aspects-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-http2/4.1.111.Final/netty-codec-http2-4.1.111.Final.jar (490 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-resolver-dns/4.1.111.Final/netty-resolver-dns-4.1.111.Final.jar (181 kB at 441 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/netty/netty-codec-dns/4.1.111.Final/netty-codec-dns-4.1.111.Final.jar (67 kB at 162 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/domain-models-api-aspects/35.3.0/domain-models-api-aspects-35.3.0.jar (34 kB at 81 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/mail/mailapi/1.4.3/mailapi-1.4.3.jar (250 kB at 592 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jakarta.el/4.0.2/jakarta.el-4.0.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar (93 kB at 220 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/el/jakarta.el-api/4.0.0/jakarta.el-api-4.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar (61 kB at 142 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjrt/1.9.22.1/aspectjrt-1.9.22.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar (68 kB at 157 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/javassist/javassist/3.30.2-GA/javassist-3.30.2-GA.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jakarta.el/4.0.2/jakarta.el-4.0.2.jar (174 kB at 399 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-di-support/2.1.0/folio-di-support-2.1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hibernate/validator/hibernate-validator/8.0.1.Final/hibernate-validator-8.0.1.Final.jar (1.3 MB at 3.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-service-proxy/4.5.10/vertx-service-proxy-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/el/jakarta.el-api/4.0.0/jakarta.el-api-4.0.0.jar (81 kB at 184 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-core/6.1.5/spring-core-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjrt/1.9.22.1/aspectjrt-1.9.22.1.jar (127 kB at 288 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-jcl/6.1.5/spring-jcl-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-di-support/2.1.0/folio-di-support-2.1.0.jar (7.1 kB at 16 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-jcl/6.1.5/spring-jcl-6.1.5.jar (25 kB at 54 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured/5.5.0/rest-assured-5.5.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-service-proxy/4.5.10/vertx-service-proxy-4.5.10.jar (65 kB at 141 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy/4.0.22/groovy-4.0.22.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-core/6.1.5/spring-core-6.1.5.jar (1.9 MB at 3.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-xml/4.0.22/groovy-xml-4.0.22.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-xml/4.0.22/groovy-xml-4.0.22.jar (213 kB at 426 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured/5.5.0/rest-assured-5.5.0.jar (747 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/projectlombok/lombok/1.18.30/lombok-1.18.30.jar (2.0 MB at 4.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.2/commons-logging-1.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar (329 kB at 625 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar (780 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.2/commons-logging-1.2.jar (62 kB at 115 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar (123 kB at 228 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/json-path/5.5.0/json-path-5.5.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.jar (42 kB at 77 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-json/4.0.22/groovy-json-4.0.22.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.jar (91 kB at 165 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-common/5.5.0/rest-assured-common-5.5.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/json-path/5.5.0/json-path-5.5.0.jar (60 kB at 104 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/xml-path/5.5.0/xml-path-5.5.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-common/5.5.0/rest-assured-common-5.5.0.jar (52 kB at 90 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter/5.11.2/junit-jupiter-5.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy-json/4.0.22/groovy-json-4.0.22.jar (130 kB at 225 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-api/5.11.2/junit-jupiter-api-5.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/xml-path/5.5.0/xml-path-5.5.0.jar (81 kB at 135 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter/5.11.2/junit-jupiter-5.11.2.jar (6.4 kB at 11 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.11.2/junit-platform-commons-1.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-api/5.11.2/junit-jupiter-api-5.11.2.jar (216 kB at 362 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar (14 kB at 24 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-params/5.11.2/junit-jupiter-params-5.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.11.2/junit-platform-commons-1.11.2.jar (141 kB at 232 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-engine/5.11.2/junit-jupiter-engine-5.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar (6.8 kB at 11 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.11.2/junit-platform-engine-1.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/groovy/groovy/4.0.22/groovy-4.0.22.jar (7.6 MB at 12 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jmockit/jmockit/1.49/jmockit-1.49.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-engine/5.11.2/junit-jupiter-engine-5.11.2.jar (260 kB at 420 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.11.2/junit-platform-engine-1.11.2.jar (247 kB at 397 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/one/util/streamex/0.8.3/streamex-0.8.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar (20 kB at 32 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-lang/commons-lang/2.6/commons-lang-2.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/one/util/streamex/0.8.3/streamex-0.8.3.jar (323 kB at 510 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-test/6.1.5/spring-test-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jmockit/jmockit/1.49/jmockit-1.49.jar (698 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-context/6.1.5/spring-context-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/jupiter/junit-jupiter-params/5.11.2/junit-jupiter-params-5.11.2.jar (591 kB at 928 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-aop/6.1.5/spring-aop-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-lang/commons-lang/2.6/commons-lang-2.6.jar (284 kB at 442 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-beans/6.1.5/spring-beans-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-test/6.1.5/spring-test-6.1.5.jar (854 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-expression/6.1.5/spring-expression-6.1.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-aop/6.1.5/spring-aop-6.1.5.jar (416 kB at 618 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-observation/1.12.4/micrometer-observation-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-context/6.1.5/spring-context-6.1.5.jar (1.3 MB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-commons/1.12.4/micrometer-commons-1.12.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-expression/6.1.5/spring-expression-6.1.5.jar (303 kB at 445 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/postgresql/1.20.2/postgresql-1.20.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-beans/6.1.5/spring-beans-6.1.5.jar (858 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/jdbc/1.20.2/jdbc-1.20.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/javassist/javassist/3.30.2-GA/javassist-3.30.2-GA.jar (795 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/database-commons/1.20.2/database-commons-1.20.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-observation/1.12.4/micrometer-observation-1.12.4.jar (72 kB at 105 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/junit-jupiter/1.20.2/junit-jupiter-1.20.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/postgresql/1.20.2/postgresql-1.20.2.jar (11 kB at 16 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers/1.20.2/testcontainers-1.20.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/database-commons/1.20.2/database-commons-1.20.2.jar (15 kB at 21 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/4.13.2/junit-4.13.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-commons/1.12.4/micrometer-commons-1.12.4.jar (47 kB at 68 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/jdbc/1.20.2/jdbc-1.20.2.jar (30 kB at 43 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/junit-jupiter/1.20.2/junit-jupiter-1.20.2.jar (15 kB at 21 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar (25 kB at 36 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-api/3.4.0/docker-java-api-3.4.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar (45 kB at 64 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport-zerodep/3.4.0/docker-java-transport-zerodep-3.4.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/4.13.2/junit-4.13.2.jar (385 kB at 542 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport/3.4.0/docker-java-transport-3.4.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar (19 kB at 27 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-api/3.4.0/docker-java-api-3.4.0.jar (485 kB at 656 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-unit/4.5.10/vertx-unit-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport/3.4.0/docker-java-transport-3.4.0.jar (39 kB at 51 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/postgres-testing/35.3.0/postgres-testing-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-unit/4.5.10/vertx-unit-4.5.10.jar (100 kB at 129 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.27.1/commons-compress-1.27.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/postgres-testing/35.3.0/postgres-testing-35.3.0.jar (5.8 kB at 7.5 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/docker-java/docker-java-transport-zerodep/3.4.0/docker-java-transport-zerodep-3.4.0.jar (2.3 MB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/util/35.3.0/util-35.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/util/35.3.0/util-35.3.0.jar (11 kB at 14 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-codec/commons-codec/1.16.1/commons-codec-1.16.1.jar (365 kB at 460 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar (1.9 MB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.4/byte-buddy-1.15.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.27.1/commons-compress-1.27.1.jar (1.1 MB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.4/byte-buddy-agent-1.15.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar (8.9 kB at 11 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis/3.3/objenesis-3.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.4/byte-buddy-agent-1.15.4.jar (263 kB at 315 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-junit5/4.5.10/vertx-junit5-4.5.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar (708 kB at 848 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-slf4j-impl/2.24.1/log4j-slf4j-impl-2.24.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/objenesis/objenesis/3.3/objenesis-3.3.jar (49 kB at 59 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/vertx/vertx-junit5/4.5.10/vertx-junit5-4.5.10.jar (25 kB at 29 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-slf4j-impl/2.24.1/log4j-slf4j-impl-2.24.1.jar (25 kB at 30 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar (64 kB at 74 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.4/byte-buddy-1.15.4.jar (4.2 MB at 4.7 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers/1.20.2/testcontainers-1.20.2.jar (18 MB at 17 MB/s)
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.pom (1.5 kB at 112 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/2.0.6/maven-2.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/2.0.6/maven-2.0.6.pom (9.0 kB at 532 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/5/maven-parent-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/5/maven-parent-5.pom (15 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/3/apache-3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/3/apache-3.pom (3.4 kB at 343 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.pom (4.1 kB at 290 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/16/spice-parent-16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/16/spice-parent-16.pom (8.4 kB at 836 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/5/forge-parent-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/5/forge-parent-5.pom (8.4 kB at 760 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.jar (13 kB at 1.1 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar (226 kB at 15 MB/s)
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.12:prepare-agent (default-cli) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.pom (4.1 kB at 344 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/4.0/plexus-4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/4.0/plexus-4.0.pom (22 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/10/forge-parent-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/10/forge-parent-10.pom (14 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.pom (4.5 kB at 408 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/36/maven-shared-components-36.pom (4.9 kB at 445 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/36/maven-parent-36.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/36/maven-parent-36.pom (45 kB at 4.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/26/apache-26.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/26/apache-26.pom (21 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.pom (2.7 kB at 274 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/1.7.36/slf4j-parent-1.7.36.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.4.2/plexus-utils-3.4.2.pom (8.2 kB at 822 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/8/plexus-8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/8/plexus-8.pom (25 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.11.0/commons-io-2.11.0.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/52/commons-parent-52.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/52/commons-parent-52.pom (79 kB at 7.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.7.2/junit-bom-5.7.2.pom (5.1 kB at 463 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.pom (2.4 kB at 237 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/15/maven-shared-components-15.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/15/maven-shared-components-15.pom (9.3 kB at 622 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/16/maven-parent-16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/16/maven-parent-16.pom (23 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.pom (1.4 kB at 139 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/1.0/doxia-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/1.0/doxia-1.0.pom (9.6 kB at 964 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/10/maven-parent-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/10/maven-parent-10.pom (32 kB at 3.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/4/apache-4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/4/apache-4.pom (4.5 kB at 450 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12.pom (3.5 kB at 350 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.core/0.8.12/org.jacoco.core-0.8.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.core/0.8.12/org.jacoco.core-0.8.12.pom (2.1 kB at 208 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.7/asm-9.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.7/asm-9.7.pom (2.4 kB at 237 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-commons/9.7/asm-commons-9.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-commons/9.7/asm-commons-9.7.pom (2.8 kB at 279 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-tree/9.7/asm-tree-9.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-tree/9.7/asm-tree-9.7.pom (2.6 kB at 259 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.report/0.8.12/org.jacoco.report-0.8.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.report/0.8.12/org.jacoco.report-0.8.12.pom (1.9 kB at 188 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar (41 kB at 3.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/file-management/3.1.0/file-management-3.1.0.jar (36 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12-runtime.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.24/plexus-utils-3.0.24.jar (247 kB at 15 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.core/0.8.12/org.jacoco.core-0.8.12.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar (10 kB at 420 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.7/asm-9.7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12-runtime.jar (302 kB at 12 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-commons/9.7/asm-commons-9.7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/3.0/maven-reporting-api-3.0.jar (11 kB at 405 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-tree/9.7/asm-tree-9.7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.core/0.8.12/org.jacoco.core-0.8.12.jar (210 kB at 7.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.report/0.8.12/org.jacoco.report-0.8.12.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar (327 kB at 8.8 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jacoco/org.jacoco.report/0.8.12/org.jacoco.report-0.8.12.jar (131 kB at 3.5 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-commons/9.7/asm-commons-9.7.jar (73 kB at 1.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm-tree/9.7/asm-tree-9.7.jar (52 kB at 1.3 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.7/asm-9.7.jar (125 kB at 3.1 MB/s)
[INFO] argLine set to -javaagent:/home/jenkins/.m2/repository/org/jacoco/org.jacoco.agent/0.8.12/org.jacoco.agent-0.8.12-runtime.jar=destfile=/home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/jacoco.exec
[INFO] 
[INFO] --- properties-maven-plugin:1.2.1:set-system-properties (default) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.pom (8.7 kB at 866 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/13/plexus-13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/13/plexus-13.pom (27 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.0/plexus-utils-4.0.0.jar (192 kB at 11 MB/s)
[INFO] Set 1 system property
[INFO] 
[INFO] --- build-helper-maven-plugin:3.6.0:add-source (add_generated_sources_folder) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.pom (7.8 kB at 783 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/17/plexus-17.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/17/plexus-17.pom (28 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.pom (5.0 kB at 499 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/4.0.1/plexus-utils-4.0.1.jar (193 kB at 12 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache-extras/beanshell/bsh/2.0b6/bsh-2.0b6.jar (389 kB at 24 MB/s)
[INFO] Source directory: /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/generated-sources/raml-jaxrs added.
[INFO] 
[INFO] --- exec-maven-plugin:3.4.1:exec (git submodule update) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-util/1.4.1/maven-resolver-util-1.4.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-util/1.4.1/maven-resolver-util-1.4.1.pom (2.8 kB at 280 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver/1.4.1/maven-resolver-1.4.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver/1.4.1/maven-resolver-1.4.1.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-api/1.4.1/maven-resolver-api-1.4.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-api/1.4.1/maven-resolver-api-1.4.1.pom (2.6 kB at 263 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.1/plexus-xml-3.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.1/plexus-xml-3.0.1.pom (3.7 kB at 410 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/18/plexus-18.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/18/plexus-18.pom (29 kB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-exec/1.4.0/commons-exec-1.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-exec/1.4.0/commons-exec-1.4.0.pom (9.5 kB at 952 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/65/commons-parent-65.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/65/commons-parent-65.pom (78 kB at 7.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-util/1.4.1/maven-resolver-util-1.4.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-api/1.4.1/maven-resolver-api-1.4.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.1/plexus-xml-3.0.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-exec/1.4.0/commons-exec-1.4.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-exec/1.4.0/commons-exec-1.4.0.jar (66 kB at 5.1 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-api/1.4.1/maven-resolver-api-1.4.1.jar (149 kB at 11 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.1/plexus-xml-3.0.1.jar (94 kB at 6.3 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/resolver/maven-resolver-util/1.4.1/maven-resolver-util-1.4.1.jar (168 kB at 10 MB/s)
[INFO] 
[INFO] --- jsonschema2pojo-maven-plugin:1.2.2:generate (mod-orders-storage) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/1.2.2/jsonschema2pojo-core-1.2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/1.2.2/jsonschema2pojo-core-1.2.2.pom (3.7 kB at 335 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/bind/javax.json.bind-api/1.0/javax.json.bind-api-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/bind/javax.json.bind-api/1.0/javax.json.bind-api-1.0.pom (28 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/json/bind/jakarta.json.bind-api/2.0.0/jakarta.json.bind-api-2.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/json/bind/jakarta.json.bind-api/2.0.0/jakarta.json.bind-api-2.0.0.pom (25 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.2/jackson-databind-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.2/jackson-databind-2.17.2.pom (21 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.17.2/jackson-base-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.17.2/jackson-base-2.17.2.pom (12 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.2/jackson-annotations-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.2/jackson-annotations-2.17.2.pom (7.1 kB at 706 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.2/jackson-core-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.2/jackson-core-2.17.2.pom (9.6 kB at 964 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.17.2/jackson-dataformat-yaml-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.17.2/jackson-dataformat-yaml-2.17.2.pom (2.6 kB at 263 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.17.2/jackson-dataformats-text-2.17.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.17.2/jackson-dataformats-text-2.17.2.pom (3.5 kB at 386 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.2/snakeyaml-2.2.pom (21 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.11/javaparser-1.0.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.11/javaparser-1.0.11.pom (6.8 kB at 760 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel/2.6/codemodel-2.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel/2.6/codemodel-2.6.pom (2.9 kB at 294 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel-project/2.6/codemodel-project-2.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel-project/2.6/codemodel-project-2.6.pom (7.1 kB at 794 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/1/jvnet-parent-1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/1/jvnet-parent-1.pom (4.7 kB at 523 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.11.0/gson-2.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.11.0/gson-2.11.0.pom (12 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson-parent/2.11.0/gson-parent-2.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson-parent/2.11.0/gson-parent-2.11.0.pom (26 kB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.pom (4.3 kB at 425 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.27.0/error_prone_parent-2.27.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.27.0/error_prone_parent-2.27.0.pom (13 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.12.0/commons-text-1.12.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.12.0/commons-text-1.12.0.pom (20 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.pom (12 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.13.0/joda-time-2.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.13.0/joda-time-2.13.0.pom (40 kB at 4.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/1.3.9/annotations-1.3.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/1.3.9/annotations-1.3.9.pom (764 B at 85 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.pom (5.8 kB at 583 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/34/maven-shared-components-34.pom (5.1 kB at 566 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/1.2.2/jsonschema2pojo-core-1.2.2.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/bind/javax.json.bind-api/1.0/javax.json.bind-api-1.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/json/bind/jakarta.json.bind-api/2.0.0/jakarta.json.bind-api-2.0.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.2/jackson-databind-2.17.2.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.2/jackson-annotations-2.17.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/bind/javax.json.bind-api/1.0/javax.json.bind-api-1.0.jar (24 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.2/jackson-core-2.17.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/jakarta/json/bind/jakarta.json.bind-api/2.0.0/jakarta.json.bind-api-2.0.0.jar (36 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.17.2/jackson-dataformat-yaml-2.17.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.2/jackson-annotations-2.17.2.jar (78 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/1.2.2/jsonschema2pojo-core-1.2.2.jar (169 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.11/javaparser-1.0.11.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.2/jackson-core-2.17.2.jar (582 kB at 18 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel/2.6/codemodel-2.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.17.2/jackson-dataformat-yaml-2.17.2.jar (55 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.2/jackson-databind-2.17.2.jar (1.6 MB at 49 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.11/javaparser-1.0.11.jar (290 kB at 7.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.12.0/commons-text-1.12.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.2/snakeyaml-2.2.jar (334 kB at 8.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/codemodel/codemodel/2.6/codemodel-2.6.jar (152 kB at 3.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.13.0/joda-time-2.13.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar (19 kB at 395 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar (298 kB at 6.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/1.3.9/annotations-1.3.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar (93 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.12.0/commons-text-1.12.0.jar (251 kB at 4.7 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.13.0/joda-time-2.13.0.jar (639 kB at 10 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/1.3.9/annotations-1.3.9.jar (15 kB at 235 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.3.4/maven-shared-utils-3.3.4.jar (153 kB at 2.4 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar (169 kB at 2.5 MB/s)
[INFO] 
[INFO] --- domain-models-maven-plugin:35.3.0:java (generate_interfaces) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/jaxrs-code-generator/3.0.7/jaxrs-code-generator-3.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/jaxrs-code-generator/3.0.7/jaxrs-code-generator-3.0.7.pom (2.9 kB at 210 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/raml-to-jaxrs/3.0.7/raml-to-jaxrs-3.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/raml-to-jaxrs/3.0.7/raml-to-jaxrs-3.0.7.pom (3.3 kB at 326 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/raml-for-jaxrs/3.0.7/raml-for-jaxrs-3.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/raml-for-jaxrs/3.0.7/raml-for-jaxrs-3.0.7.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-2/1.0.28/raml-parser-2-1.0.28.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-2/1.0.28/raml-parser-2-1.0.28.pom (4.9 kB at 541 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-parent/1.0.28/raml-parser-parent-1.0.28.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-parent/1.0.28/raml-parser-parent-1.0.28.pom (11 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/yagi/1.0.28/yagi-1.0.28.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/yagi/1.0.28/yagi-1.0.28.pom (2.0 kB at 107 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.0/snakeyaml-2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.0/snakeyaml-2.0.pom (21 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/3.0.0/annotations-3.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/annotations/3.0.0/annotations-3.0.0.pom (3.5 kB at 348 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.3/joda-time-2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.3/joda-time-2.3.pom (25 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/33.3.1-jre/guava-33.3.1-jre.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/33.3.1-jre/guava-33.3.1-jre.pom (9.3 kB at 930 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/33.3.1-jre/guava-parent-33.3.1-jre.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/33.3.1-jre/guava-parent-33.3.1-jre.pom (20 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.2/failureaccess-1.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/failureaccess/1.0.2/failureaccess-1.0.2.pom (3.3 kB at 334 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.43.0/checker-qual-3.43.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/checkerframework/checker-qual/3.43.0/checker-qual-3.43.0.pom (2.1 kB at 233 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.28.0/error_prone_annotations-2.28.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_annotations/2.28.0/error_prone_annotations-2.28.0.pom (4.3 kB at 472 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.28.0/error_prone_parent-2.28.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/errorprone/error_prone_parent/2.28.0/error_prone_parent-2.28.0.pom (13 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/3.0.0/j2objc-annotations-3.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/j2objc/j2objc-annotations/3.0.0/j2objc-annotations-3.0.0.pom (5.1 kB at 562 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema/2.16.1/jackson-module-jsonSchema-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema/2.16.1/jackson-module-jsonSchema-2.16.1.pom (2.3 kB at 255 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema-parent/2.16.1/jackson-module-jsonSchema-parent-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema-parent/2.16.1/jackson-module-jsonSchema-parent-2.16.1.pom (2.9 kB at 319 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.pom (7.9 kB at 873 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-validator/2.2.8/json-schema-validator-2.2.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-validator/2.2.8/json-schema-validator-2.2.8.pom (3.5 kB at 352 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-core/1.2.8/json-schema-core-1.2.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-core/1.2.8/json-schema-core-1.2.8.pom (3.1 kB at 347 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.pom (965 B at 107 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mozilla/rhino/1.7R4/rhino-1.7R4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mozilla/rhino/1.7R4/rhino-1.7R4.pom (1.3 kB at 143 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/jackson-coreutils/1.8/jackson-coreutils-1.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/jackson-coreutils/1.8/jackson-coreutils-1.8.pom (2.8 kB at 187 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/msg-simple/1.1/msg-simple-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/msg-simple/1.1/msg-simple-1.1.pom (2.4 kB at 266 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/btf/1.2/btf-1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/btf/1.2/btf-1.2.pom (1.5 kB at 161 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/uri-template/0.9/uri-template-0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/uri-template/0.9/uri-template-0.9.pom (2.8 kB at 198 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/activation/1.1/activation-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/activation/1.1/activation-1.1.pom (1.1 kB at 118 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.9.7/joda-time-2.9.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.9.7/joda-time-2.9.7.pom (33 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber/8.0.0/libphonenumber-8.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber/8.0.0/libphonenumber-8.0.0.pom (2.4 kB at 271 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber-parent/8.0.0/libphonenumber-parent-8.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber-parent/8.0.0/libphonenumber-parent-8.0.0.pom (5.6 kB at 565 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.pom (4.3 kB at 429 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/sf/jopt-simple/jopt-simple/5.0.3/jopt-simple-5.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/sf/jopt-simple/jopt-simple/5.0.3/jopt-simple-5.0.3.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/juniversalchardet/juniversalchardet/1.0.3/juniversalchardet-1.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/juniversalchardet/juniversalchardet/1.0.3/juniversalchardet-1.0.3.pom (1.5 kB at 163 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema-core/2.2.1/xmlschema-core-2.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema-core/2.2.1/xmlschema-core-2.2.1.pom (6.8 kB at 680 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema/2.2.1/xmlschema-2.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema/2.2.1/xmlschema-2.2.1.pom (33 kB at 3.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/14/apache-14.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/14/apache-14.pom (15 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/javax.json-api/1.0/javax.json-api-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/javax.json-api/1.0/javax.json-api-1.0.pom (6.4 kB at 707 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/json/1.0/json-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/json/1.0/json-1.0.pom (10 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/3/jvnet-parent-3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/java/jvnet-parent/3/jvnet-parent-3.pom (4.8 kB at 532 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/javax.json/1.0.4/javax.json-1.0.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/javax.json/1.0.4/javax.json-1.0.4.pom (9.2 kB at 923 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/json/1.0.4/json-1.0.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/json/1.0.4/json-1.0.4.pom (11 kB at 923 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-to-pojo/1.0.6/raml-to-pojo-1.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-to-pojo/1.0.6/raml-to-pojo-1.0.6.pom (2.8 kB at 310 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-java-tools/1.0.6/raml-java-tools-1.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-java-tools/1.0.6/raml-java-tools-1.0.6.pom (15 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.pom (650 B at 72 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/test-utils/1.0.6/test-utils-1.0.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/test-utils/1.0.6/test-utils-1.0.6.pom (3.0 kB at 229 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.pom (2.5 kB at 154 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.3/byte-buddy-1.15.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.3/byte-buddy-1.15.3.pom (16 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.15.3/byte-buddy-parent-1.15.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.15.3/byte-buddy-parent-1.15.3.pom (63 kB at 5.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.3/byte-buddy-agent-1.15.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.3/byte-buddy-agent-1.15.3.pom (10 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/javapoet/1.11.1/javapoet-1.11.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/javapoet/1.11.1/javapoet-1.11.1.pom (4.8 kB at 539 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.pom (3.8 kB at 382 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.18/byte-buddy-1.14.18.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.18/byte-buddy-1.14.18.pom (16 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.14.18/byte-buddy-parent-1.14.18.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.14.18/byte-buddy-parent-1.14.18.pom (62 kB at 6.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.3.1/jaxb-api-2.3.1.pom (20 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api-parent/2.3.1/jaxb-api-parent-2.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api-parent/2.3.1/jaxb-api-parent-2.3.1.pom (8.1 kB at 737 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/javax.activation-api/1.2.0/javax.activation-api-1.2.0.pom (4.9 kB at 447 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/activation/all/1.2.0/all-1.2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/activation/all/1.2.0/all-1.2.0.pom (18 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.pom (14 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.5/gson-2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.5/gson-2.5.pom (8.9 kB at 985 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.1/jackson-mapper-asl-1.9.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.1/jackson-mapper-asl-1.9.1.pom (1.2 kB at 138 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.1/jackson-core-asl-1.9.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.1/jackson-core-asl-1.9.1.pom (1.0 kB at 113 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.pom (10 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/37/commons-parent-37.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/37/commons-parent-37.pom (63 kB at 7.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/16/apache-16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/16/apache-16.pom (15 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/0.5.1/jsonschema2pojo-core-0.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/0.5.1/jsonschema2pojo-core-0.5.1.pom (3.8 kB at 473 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo/0.5.1/jsonschema2pojo-0.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo/0.5.1/jsonschema2pojo-0.5.1.pom (20 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-scalagen/0.5.1/jsonschema2pojo-scalagen-0.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-scalagen/0.5.1/jsonschema2pojo-scalagen-0.5.1.pom (8.7 kB at 583 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.10/javaparser-1.0.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.10/javaparser-1.0.10.pom (6.8 kB at 760 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/sourceforge/collections/collections-generic/4.01/collections-generic-4.01.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/sourceforge/collections/collections-generic/4.01/collections-generic-4.01.pom (585 B at 65 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-io/1.3.2/commons-io-1.3.2.pom (640 B at 36 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/1.3.2/commons-io-1.3.2.pom (9.7 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/3/commons-parent-3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/3/commons-parent-3.pom (12 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.16.1/jackson-dataformat-yaml-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.16.1/jackson-dataformat-yaml-2.16.1.pom (2.6 kB at 292 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.16.1/jackson-dataformats-text-2.16.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformats-text/2.16.1/jackson-dataformats-text-2.16.1.pom (3.5 kB at 386 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/scala-lang/scala-library/2.11.6/scala-library-2.11.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/scala-lang/scala-library/2.11.6/scala-library-2.11.6.pom (1.4 kB at 158 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi/1.5.0/moshi-1.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi/1.5.0/moshi-1.5.0.pom (1.1 kB at 106 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi-parent/1.5.0/moshi-parent-1.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi-parent/1.5.0/moshi-parent-1.5.0.pom (5.5 kB at 606 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio/1.13.0/okio-1.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio/1.13.0/okio-1.13.0.pom (1.6 kB at 163 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio-parent/1.13.0/okio-parent-1.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio-parent/1.13.0/okio-parent-1.13.0.pom (4.8 kB at 537 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.0.0.GA/validation-api-1.0.0.GA.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.0.0.GA/validation-api-1.0.0.GA.pom (4.4 kB at 549 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.2/joda-time-2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.2/joda-time-2.2.pom (16 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.pom (1.5 kB at 167 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.pom (1.3 kB at 142 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-xjc/2.1.6/jaxb-xjc-2.1.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-xjc/2.1.6/jaxb-xjc-2.1.6.pom (343 B at 34 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-impl/2.1.6/jaxb-impl-2.1.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-impl/2.1.6/jaxb-impl-2.1.6.pom (339 B at 42 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.pom (486 B at 19 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.pom (962 B at 60 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/19.0/guava-19.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/19.0/guava-19.0.pom (6.8 kB at 755 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/19.0/guava-parent-19.0.pom (9.9 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.pom (2.1 kB at 234 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/jaxrs-code-generator/3.0.7/jaxrs-code-generator-3.0.7.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-2/1.0.28/raml-parser-2-1.0.28.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/yagi/1.0.28/yagi-1.0.28.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.0/snakeyaml-2.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema/2.16.1/jackson-module-jsonSchema-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/jaxrs/jaxrs-code-generator/3.0.7/jaxrs-code-generator-3.0.7.jar (213 kB at 14 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-validator/2.2.8/json-schema-validator-2.2.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/yaml/snakeyaml/2.0/snakeyaml-2.0.jar (335 kB at 12 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-core/1.2.8/json-schema-core-1.2.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-validator/2.2.8/json-schema-validator-2.2.8.jar (234 kB at 8.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mozilla/rhino/1.7R4/rhino-1.7R4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/module/jackson-module-jsonSchema/2.16.1/jackson-module-jsonSchema-2.16.1.jar (79 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/jackson-coreutils/1.8/jackson-coreutils-1.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/yagi/1.0.28/yagi-1.0.28.jar (177 kB at 5.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/msg-simple/1.1/msg-simple-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/jackson-coreutils/1.8/jackson-coreutils-1.8.jar (31 kB at 783 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/btf/1.2/btf-1.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/java-json-tools/json-schema-core/1.2.8/json-schema-core-1.2.8.jar (173 kB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/uri-template/0.9/uri-template-0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-parser-2/1.0.28/raml-parser-2-1.0.28.jar (399 kB at 8.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber/8.0.0/libphonenumber-8.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/msg-simple/1.1/msg-simple-1.1.jar (37 kB at 819 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/sf/jopt-simple/jopt-simple/5.0.3/jopt-simple-5.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/btf/1.2/btf-1.2.jar (8.9 kB at 172 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/juniversalchardet/juniversalchardet/1.0.3/juniversalchardet-1.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mozilla/rhino/1.7R4/rhino-1.7R4.jar (1.1 MB at 21 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema-core/2.2.1/xmlschema-core-2.2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/fge/uri-template/0.9/uri-template-0.9.jar (57 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/javax.json-api/1.0/javax.json-api-1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/sf/jopt-simple/jopt-simple/5.0.3/jopt-simple-5.0.3.jar (78 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/javax.json/1.0.4/javax.json-1.0.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/libphonenumber/libphonenumber/8.0.0/libphonenumber-8.0.0.jar (327 kB at 5.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-to-pojo/1.0.6/raml-to-pojo-1.0.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/googlecode/juniversalchardet/juniversalchardet/1.0.3/juniversalchardet-1.0.3.jar (221 kB at 3.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/test-utils/1.0.6/test-utils-1.0.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/ws/xmlschema/xmlschema-core/2.2.1/xmlschema-core-2.2.1.jar (172 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/javax.json/1.0.4/javax.json-1.0.4.jar (85 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.3/byte-buddy-1.15.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/json/javax.json-api/1.0/javax.json-api-1.0.jar (20 kB at 290 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.3/byte-buddy-agent-1.15.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/raml-to-pojo/1.0.6/raml-to-pojo-1.0.6.jar (202 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/raml/test-utils/1.0.6/test-utils-1.0.6.jar (62 kB at 817 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.5/gson-2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-agent/1.15.3/byte-buddy-agent-1.15.3.jar (263 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.1/jackson-mapper-asl-1.9.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.jar (707 kB at 8.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.1/jackson-core-asl-1.9.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/gson/gson/2.5/gson-2.5.jar (232 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-core-asl/1.9.1/jackson-core-asl-1.9.1.jar (228 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/javapoet/1.11.1/javapoet-1.11.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/javapoet/1.11.1/javapoet-1.11.1.jar (99 kB at 869 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar (27 kB at 227 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/0.5.1/jsonschema2pojo-core-0.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar (1.4 MB at 11 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-scalagen/0.5.1/jsonschema2pojo-scalagen-0.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar (53 kB at 414 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/sourceforge/collections/collections-generic/4.01/collections-generic-4.01.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/jackson/jackson-mapper-asl/1.9.1/jackson-mapper-asl-1.9.1.jar (764 kB at 5.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.16.1/jackson-dataformat-yaml-2.16.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-core/0.5.1/jsonschema2pojo-core-0.5.1.jar (134 kB at 931 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/scala-lang/scala-library/2.11.6/scala-library-2.11.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jsonschema2pojo/jsonschema2pojo-scalagen/0.5.1/jsonschema2pojo-scalagen-0.5.1.jar (375 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.10/javaparser-1.0.10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.16.1/jackson-dataformat-yaml-2.16.1.jar (55 kB at 359 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/sourceforge/collections/collections-generic/4.01/collections-generic-4.01.jar (532 kB at 3.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi/1.5.0/moshi-1.5.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.15.3/byte-buddy-1.15.3.jar (4.2 MB at 26 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio/1.13.0/okio-1.13.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/findbugs/jsr305/3.0.1/jsr305-3.0.1.jar (20 kB at 121 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.2/joda-time-2.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/code/javaparser/javaparser/1.0.10/javaparser-1.0.10.jar (277 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-xjc/2.1.6/jaxb-xjc-2.1.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okio/okio/1.13.0/okio-1.13.0.jar (82 kB at 450 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-impl/2.1.6/jaxb-impl-2.1.6.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/moshi/moshi/1.5.0/moshi-1.5.0.jar (124 kB at 657 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/joda-time/joda-time/2.2/joda-time-2.2.jar (574 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-impl/2.1.6/jaxb-impl-2.1.6.jar (849 kB at 4.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar (64 kB at 285 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar (23 kB at 96 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/activation/1.1/activation-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar (307 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/19.0/guava-19.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar (90 kB at 354 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/activation/activation/1.1/activation-1.1.jar (63 kB at 247 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/sun/xml/bind/jaxb-xjc/2.1.6/jaxb-xjc-2.1.6.jar (3.1 MB at 12 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar (120 kB at 373 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/scala-lang/scala-library/2.11.6/scala-library-2.11.6.jar (5.6 MB at 17 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/19.0/guava-19.0.jar (2.3 MB at 7.0 MB/s)
DomainModelsMojo.execute()
generateInterfaces=true
generateClients=false
project.baseDir = /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189
project.name = mod-invoice-storage
project.actifactId = mod-invoice-storage
Artifacts: []
ArtifactMap: {}
ramlDirs.size=0
schemaPaths.size=0
GenerateRunner.generate Input directory /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/classes/ramls
org/folio/rest/jaxrs/model/BatchGroup.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/BatchGroup.java
org/folio/rest/jaxrs/model/BatchGroupCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
org/folio/rest/jaxrs/model/ExportConfig.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Weekday.java
org/folio/rest/jaxrs/model/Credentials.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/ExportConfig.java
org/folio/rest/jaxrs/model/ExportConfigCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Weekday.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
org/folio/rest/jaxrs/model/BatchVoucherExport.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/BatchVoucherExport.java
org/folio/rest/jaxrs/model/BatchVoucherExportCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
org/folio/rest/jaxrs/model/Adjustment.java
org/folio/rest/jaxrs/model/BatchVoucher.java
org/folio/rest/jaxrs/model/BatchedVoucher.java
org/folio/rest/jaxrs/model/BatchedVoucherLine.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/VendorAddress.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
org/folio/rest/jaxrs/model/InvoiceLineNumber.java
org/folio/rest/jaxrs/model/SequenceNumber.java
org/folio/rest/jaxrs/model/SequenceNumber.java
org/folio/rest/jaxrs/model/Adjustment.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/Invoice.java
org/folio/rest/jaxrs/model/InvoiceCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Tags.java
org/folio/rest/jaxrs/model/Document.java
org/folio/rest/jaxrs/model/DocumentCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Contents.java
org/folio/rest/jaxrs/model/DocumentMetadata.java
org/folio/rest/jaxrs/model/InvoiceDocument.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Adjustment.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/InvoiceLine.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/ReferenceNumber.java
org/folio/rest/jaxrs/model/Tags.java
org/folio/rest/jaxrs/model/Adjustment.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/Invoice.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/Tags.java
org/folio/rest/jaxrs/model/Adjustment.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/InvoiceLine.java
org/folio/rest/jaxrs/model/InvoiceLineCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/ReferenceNumber.java
org/folio/rest/jaxrs/model/Tags.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
org/folio/rest/jaxrs/model/SequenceNumber.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/VendorAddress.java
org/folio/rest/jaxrs/model/Voucher.java
org/folio/rest/jaxrs/model/VoucherCollection.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/VendorAddress.java
org/folio/rest/jaxrs/model/Voucher.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/VoucherLine.java
org/folio/rest/jaxrs/model/VoucherLineCollection.java
org/folio/rest/jaxrs/model/FundDistribution.java
org/folio/rest/jaxrs/model/Metadata.java
org/folio/rest/jaxrs/model/VoucherLine.java
org/folio/rest/jaxrs/model/Error.java
org/folio/rest/jaxrs/model/Errors.java
org/folio/rest/jaxrs/model/Parameter.java
[INFO] 
[INFO] --- maven-resources-plugin:3.3.1:copy-resources (filter-descriptor-inputs) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.pom (2.7 kB at 204 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/5.1/plexus-5.1.pom (23 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.pom (8.8 kB at 877 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/10/plexus-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/10/plexus-10.pom (25 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.pom (6.0 kB at 464 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/39/maven-shared-components-39.pom (3.2 kB at 358 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/inject/javax.inject/1/javax.inject-1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/inject/javax.inject/1/javax.inject-1.pom (612 B at 68 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.pom (3.2 kB at 320 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/15/spice-parent-15.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/15/spice-parent-15.pom (8.4 kB at 929 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.0/plexus-utils-3.5.0.pom (8.0 kB at 801 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.pom (31 kB at 3.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.7.1/junit-bom-5.7.1.pom (5.1 kB at 566 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/inject/javax.inject/1/javax.inject-1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.26/plexus-interpolation-1.26.jar (85 kB at 7.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/inject/javax.inject/1/javax.inject-1.jar (2.5 kB at 192 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-build-api/0.0.7/plexus-build-api-0.0.7.jar (8.5 kB at 606 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.5.1/plexus-utils-3.5.1.jar (269 kB at 16 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-filtering/3.3.1/maven-filtering-3.3.1.jar (55 kB at 2.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.12.0/commons-lang3-3.12.0.jar (587 kB at 24 MB/s)
[INFO] Copying 2 resources from descriptors to target
[INFO] 
[INFO] --- copy-rename-maven-plugin:1.0.1:rename (rename-descriptor-outputs) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.pom (3.1 kB at 314 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/2.0.9/maven-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/2.0.9/maven-2.0.9.pom (19 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/8/maven-parent-8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/8/maven-parent-8.pom (24 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.pom (2.3 kB at 255 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.11/plexus-1.0.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.11/plexus-1.0.11.pom (9.0 kB at 997 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.pom (2.7 kB at 194 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.pom (2.1 kB at 257 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.pom (3.9 kB at 439 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/1.0.3/plexus-containers-1.0.3.pom (492 B at 49 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.4/plexus-1.0.4.pom (5.7 kB at 637 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/3.8.1/junit-3.8.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/3.8.1/junit-3.8.1.pom (998 B at 111 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.0.4/plexus-utils-1.0.4.pom (6.9 kB at 686 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.pom (3.1 kB at 348 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.pom (2.0 kB at 228 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.pom (2.7 kB at 300 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.pom (1.9 kB at 211 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.pom (1.6 kB at 180 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.pom (2.0 kB at 219 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.pom (7.8 kB at 865 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.pom (2.0 kB at 218 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.pom (1.8 kB at 200 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting/2.0.9/maven-reporting-2.0.9.pom (1.5 kB at 164 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.pom (1.3 kB at 168 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/1.0-alpha-10/doxia-1.0-alpha-10.pom (9.2 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/6/maven-parent-6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/6/maven-parent-6.pom (20 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.pom (1.7 kB at 194 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.0/commons-cli-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.0/commons-cli-1.0.pom (2.1 kB at 234 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.pom (1.5 kB at 60 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.pom (2.1 kB at 231 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.pom (7.1 kB at 709 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.pom (1.3 kB at 128 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1/classworlds-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1/classworlds-1.1.pom (3.3 kB at 369 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.pom (8.1 kB at 896 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/2.0.2/plexus-2.0.2.pom (12 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar (122 kB at 9.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar (58 kB at 4.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar (87 kB at 5.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/3.8.1/junit-3.8.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar (35 kB at 2.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar (49 kB at 2.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar (29 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/junit/junit/3.8.1/junit-3.8.1.jar (121 kB at 4.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar (194 kB at 7.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-parameter-documenter/2.0.9/maven-plugin-parameter-documenter-2.0.9.jar (21 kB at 746 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/2.0.9/maven-core-2.0.9.jar (160 kB at 5.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.0/commons-cli-1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/2.0.9/maven-reporting-api-2.0.9.jar (10 kB at 317 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/1.0-alpha-10/doxia-sink-api-1.0-alpha-10.jar (9.9 kB at 275 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar (25 kB at 664 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-error-diagnostics/2.0.9/maven-error-diagnostics-2.0.9.jar (14 kB at 345 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1/classworlds-1.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-descriptor/2.0.9/maven-plugin-descriptor-2.0.9.jar (37 kB at 861 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-cli/commons-cli/1.0/commons-cli-1.0.jar (30 kB at 684 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-monitor/2.0.9/maven-monitor-2.0.9.jar (10 kB at 224 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar (13 kB at 253 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/classworlds/classworlds/1.1/classworlds-1.1.jar (38 kB at 714 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar (89 kB at 1.6 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.8/plexus-utils-1.5.8.jar (268 kB at 4.6 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/2.0.9/maven-plugin-api-2.0.9.jar (13 kB at 211 kB/s)
[INFO] Renamed /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/ModuleDescriptor-template.json to /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/ModuleDescriptor.json
[INFO] Renamed /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/DeploymentDescriptor-template.json to /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/DeploymentDescriptor.json
[INFO] 
[INFO] --- maven-resources-plugin:3.3.1:resources (default-resources) @ mod-invoice-storage ---
[INFO] Copying 46 resources from src/main/resources to target/classes
[INFO] The encoding used to copy filtered properties files have not been set. This means that the same encoding will be used to copy filtered properties files as when copying other filtered resources. This might not be what you want! Run your build with --debug to see which files might be affected. Read more at https://maven.apache.org/plugins/maven-resources-plugin/examples/filtering-properties-files.html
[INFO] 
[INFO] --- maven-compiler-plugin:3.13.0:compile (default-compile) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.4.2/maven-shared-utils-3.4.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.4.2/maven-shared-utils-3.4.2.pom (5.9 kB at 421 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.pom (4.7 kB at 474 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/19/maven-shared-components-19.pom (6.4 kB at 636 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/23/maven-parent-23.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/23/maven-parent-23.pom (33 kB at 3.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.2.0/plexus-java-1.2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.2.0/plexus-java-1.2.0.pom (4.3 kB at 475 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-languages/1.2.0/plexus-languages-1.2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-languages/1.2.0/plexus-languages-1.2.0.pom (3.2 kB at 355 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/15/plexus-15.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/15/plexus-15.pom (28 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.6/asm-9.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.6/asm-9.6.pom (2.4 kB at 296 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.pom (17 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-api/2.15.0/plexus-compiler-api-2.15.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-api/2.15.0/plexus-compiler-api-2.15.0.pom (1.4 kB at 151 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler/2.15.0/plexus-compiler-2.15.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler/2.15.0/plexus-compiler-2.15.0.pom (7.6 kB at 844 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-manager/2.15.0/plexus-compiler-manager-2.15.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-manager/2.15.0/plexus-compiler-manager-2.15.0.pom (1.3 kB at 123 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.0/plexus-xml-3.0.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.0/plexus-xml-3.0.0.pom (3.7 kB at 415 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-javac/2.15.0/plexus-compiler-javac-2.15.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-javac/2.15.0/plexus-compiler-javac-2.15.0.pom (1.3 kB at 143 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compilers/2.15.0/plexus-compilers-2.15.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compilers/2.15.0/plexus-compilers-2.15.0.pom (1.6 kB at 174 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.4.2/maven-shared-utils-3.4.2.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.2.0/plexus-java-1.2.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.6/asm-9.6.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-incremental/1.1/maven-shared-incremental-1.1.jar (14 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-api/2.15.0/plexus-compiler-api-2.15.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.2.0/plexus-java-1.2.0.jar (58 kB at 4.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-manager/2.15.0/plexus-compiler-manager-2.15.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/ow2/asm/asm/9.6/asm-9.6.jar (124 kB at 8.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.0/plexus-xml-3.0.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-utils/3.4.2/maven-shared-utils-3.4.2.jar (151 kB at 10 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-javac/2.15.0/plexus-compiler-javac-2.15.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.0.3/qdox-2.0.3.jar (334 kB at 18 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-api/2.15.0/plexus-compiler-api-2.15.0.jar (29 kB at 1.5 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-manager/2.15.0/plexus-compiler-manager-2.15.0.jar (5.2 kB at 238 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/3.0.0/plexus-xml-3.0.0.jar (93 kB at 3.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-compiler-javac/2.15.0/plexus-compiler-javac-2.15.0.jar (26 kB at 1.0 MB/s)
[INFO] Recompiling the module because of changed dependency.
[INFO] Compiling 137 source files with javac [debug parameters release 17] to target/classes
[INFO] /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/src/main/java/org/folio/rest/utils/HelperUtils.java: Some input files use or override a deprecated API.
[INFO] /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/src/main/java/org/folio/rest/utils/HelperUtils.java: Recompile with -Xlint:deprecation for details.
[INFO] 
[INFO] --- folio-module-descriptor-validator:1.0.0:validate (default) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.9.6/maven-plugin-api-3.9.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.9.6/maven-plugin-api-3.9.6.pom (2.9 kB at 245 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.9.6/maven-3.9.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.9.6/maven-3.9.6.pom (29 kB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.9.6/maven-model-3.9.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.9.6/maven-model-3.9.6.pom (2.7 kB at 302 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.9.6/maven-artifact-3.9.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.9.6/maven-artifact-3.9.6.pom (2.3 kB at 232 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.9.0.M2/org.eclipse.sisu.plexus-0.9.0.M2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.9.0.M2/org.eclipse.sisu.plexus-0.9.0.M2.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-plexus/0.9.0.M2/sisu-plexus-0.9.0.M2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-plexus/0.9.0.M2/sisu-plexus-0.9.0.M2.pom (15 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.pom (13 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.9.0.M2/org.eclipse.sisu.inject-0.9.0.M2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.9.0.M2/org.eclipse.sisu.inject-0.9.0.M2.pom (17 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-inject/0.9.0.M2/sisu-inject-0.9.0.M2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-inject/0.9.0.M2/sisu-inject-0.9.0.M2.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.pom (750 B at 75 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/2.1.0/plexus-containers-2.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/2.1.0/plexus-containers-2.1.0.pom (4.8 kB at 534 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.6.0/plexus-classworlds-2.6.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.6.0/plexus-classworlds-2.6.0.pom (7.9 kB at 791 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.3.0/plexus-utils-3.3.0.pom (5.2 kB at 576 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.7.0/plexus-classworlds-2.7.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.7.0/plexus-classworlds-2.7.0.pom (7.6 kB at 546 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-annotations/3.11.0/maven-plugin-annotations-3.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-annotations/3.11.0/maven-plugin-annotations-3.11.0.pom (1.5 kB at 148 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-tools/3.11.0/maven-plugin-tools-3.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-tools/3.11.0/maven-plugin-tools-3.11.0.pom (17 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.0/jackson-databind-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.0/jackson-databind-2.17.0.pom (21 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.17.0/jackson-base-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-base/2.17.0/jackson-base-2.17.0.pom (12 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.17.0/jackson-bom-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/jackson-bom/2.17.0/jackson-bom-2.17.0.pom (19 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.0/jackson-annotations-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.0/jackson-annotations-2.17.0.pom (7.1 kB at 706 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.0/jackson-core-2.17.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.0/jackson-core-2.17.0.pom (9.6 kB at 876 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.14.9/byte-buddy-parent-1.14.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy-parent/1.14.9/byte-buddy-parent-1.14.9.pom (62 kB at 5.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-permission-utils/1.5.5/folio-permission-utils-1.5.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-permission-utils/1.5.5/folio-permission-utils-1.5.5.pom (2.2 kB at 239 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/applications-poc-tools/1.5.5/applications-poc-tools-1.5.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/applications-poc-tools/1.5.5/applications-poc-tools-1.5.5.pom (11 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/boot/spring-boot-starter-parent/3.3.2/spring-boot-starter-parent-3.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/boot/spring-boot-starter-parent/3.3.2/spring-boot-starter-parent-3.3.2.pom (13 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/boot/spring-boot-dependencies/3.3.2/spring-boot-dependencies-3.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/boot/spring-boot-dependencies/3.3.2/spring-boot-dependencies-3.3.2.pom (103 kB at 9.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/activemq/artemis-bom/2.33.0/artemis-bom-2.33.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/activemq/artemis-bom/2.33.0/artemis-bom-2.33.0.pom (9.6 kB at 964 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/activemq/artemis-project/2.33.0/artemis-project-2.33.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/activemq/artemis-project/2.33.0/artemis-project-2.33.0.pom (64 kB at 7.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-bom/3.25.3/assertj-bom-3.25.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/assertj/assertj-bom/3.25.3/assertj-bom-3.25.3.pom (3.7 kB at 410 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/zipkin/reporter2/zipkin-reporter-bom/3.4.0/zipkin-reporter-bom-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/zipkin/reporter2/zipkin-reporter-bom/3.4.0/zipkin-reporter-bom-3.4.0.pom (6.4 kB at 711 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/zipkin/brave/brave-bom/6.0.3/brave-bom-6.0.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/zipkin/brave/brave-bom/6.0.3/brave-bom-6.0.3.pom (11 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/cassandra/java-driver-bom/4.18.1/java-driver-bom-4.18.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/cassandra/java-driver-bom/4.18.1/java-driver-bom-4.18.1.pom (5.5 kB at 607 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jaxb/jaxb-bom/4.0.5/jaxb-bom-4.0.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jaxb/jaxb-bom/4.0.5/jaxb-bom-4.0.5.pom (12 kB at 776 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/infinispan/infinispan-bom/15.0.5.Final/infinispan-bom-15.0.5.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/infinispan/infinispan-bom/15.0.5.Final/infinispan-bom-15.0.5.Final.pom (18 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/infinispan/infinispan-build-configuration-parent/15.0.5.Final/infinispan-build-configuration-parent-15.0.5.Final.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/infinispan/infinispan-build-configuration-parent/15.0.5.Final/infinispan-build-configuration-parent-15.0.5.Final.pom (19 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/jboss-parent/43/jboss-parent-43.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/jboss-parent/43/jboss-parent-43.pom (75 kB at 7.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/jersey-bom/3.1.7/jersey-bom-3.1.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/glassfish/jersey/jersey-bom/3.1.7/jersey-bom-3.1.7.pom (21 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.11/jetty-ee10-bom-12.0.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/jetty/ee10/jetty-ee10-bom/12.0.11/jetty-ee10-bom-12.0.11.pom (9.3 kB at 926 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/jetty/jetty-bom/12.0.11/jetty-bom-12.0.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/jetty/jetty-bom/12.0.11/jetty-bom-12.0.11.pom (14 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlin/kotlin-bom/1.9.24/kotlin-bom-1.9.24.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlin/kotlin-bom/1.9.24/kotlin-bom-1.9.24.pom (9.1 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.8.1/kotlinx-coroutines-bom-1.8.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlinx/kotlinx-coroutines-bom/1.8.1/kotlinx-coroutines-bom-1.8.1.pom (4.3 kB at 536 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.3/kotlinx-serialization-bom-1.6.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jetbrains/kotlinx/kotlinx-serialization-bom/1.6.3/kotlinx-serialization-bom-1.6.3.pom (3.7 kB at 407 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.23.1/log4j-bom-2.23.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/log4j/log4j-bom/2.23.1/log4j-bom-2.23.1.pom (12 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/10.6.0/logging-parent-10.6.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/logging/logging-parent/10.6.0/logging-parent-10.6.0.pom (54 kB at 5.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.13.2/micrometer-bom-1.13.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-bom/1.13.2/micrometer-bom-1.13.2.pom (8.6 kB at 858 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-tracing-bom/1.3.2/micrometer-tracing-bom-1.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/micrometer/micrometer-tracing-bom/1.3.2/micrometer-tracing-bom-1.3.2.pom (4.5 kB at 501 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.11.0/mockito-bom-5.11.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/mockito/mockito-bom/5.11.0/mockito-bom-5.11.0.pom (3.0 kB at 296 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/squareup/okhttp3/okhttp-bom/4.12.0/okhttp-bom-4.12.0.pom (3.1 kB at 339 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/opentelemetry/opentelemetry-bom/1.37.0/opentelemetry-bom-1.37.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/opentelemetry/opentelemetry-bom/1.37.0/opentelemetry-bom-1.37.0.pom (5.7 kB at 632 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/prometheus-metrics-bom/1.2.1/prometheus-metrics-bom-1.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/prometheus-metrics-bom/1.2.1/prometheus-metrics-bom-1.2.1.pom (6.1 kB at 607 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/client_java/1.2.1/client_java-1.2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/client_java/1.2.1/client_java-1.2.1.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/prometheus/simpleclient_bom/0.16.0/simpleclient_bom-0.16.0.pom (6.0 kB at 668 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/pulsar/pulsar-bom/3.2.3/pulsar-bom-3.2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/pulsar/pulsar-bom/3.2.3/pulsar-bom-3.2.3.pom (26 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/querydsl/querydsl-bom/5.1.0/querydsl-bom-5.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/querydsl/querydsl-bom/5.1.0/querydsl-bom-5.1.0.pom (7.2 kB at 447 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/projectreactor/reactor-bom/2023.0.8/reactor-bom-2023.0.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/projectreactor/reactor-bom/2023.0.8/reactor-bom-2023.0.8.pom (4.8 kB at 530 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-bom/5.4.0/rest-assured-bom-5.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rest-assured/rest-assured-bom/5.4.0/rest-assured-bom-5.4.0.pom (4.5 kB at 166 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/io/rsocket/rsocket-bom/1.1.3/rsocket-bom-1.1.3.pom (2.6 kB at 264 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/seleniumhq/selenium/selenium-bom/4.19.1/selenium-bom-4.19.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/seleniumhq/selenium/selenium-bom/4.19.1/selenium-bom-4.19.1.pom (6.0 kB at 670 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/amqp/spring-amqp-bom/3.1.6/spring-amqp-bom-3.1.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/amqp/spring-amqp-bom/3.1.6/spring-amqp-bom-3.1.6.pom (3.9 kB at 352 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/batch/spring-batch-bom/5.1.2/spring-batch-bom-5.1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/batch/spring-batch-bom/5.1.2/spring-batch-bom-5.1.2.pom (3.2 kB at 360 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/data/spring-data-bom/2024.0.2/spring-data-bom-2024.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/data/spring-data-bom/2024.0.2/spring-data-bom-2024.0.2.pom (5.5 kB at 688 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-framework-bom/6.1.11/spring-framework-bom-6.1.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/spring-framework-bom/6.1.11/spring-framework-bom-6.1.11.pom (5.8 kB at 649 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/integration/spring-integration-bom/6.3.2/spring-integration-bom-6.3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/integration/spring-integration-bom/6.3.2/spring-integration-bom-6.3.2.pom (10 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/pulsar/spring-pulsar-bom/1.1.2/spring-pulsar-bom-1.1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/pulsar/spring-pulsar-bom/1.1.2/spring-pulsar-bom-1.1.2.pom (2.9 kB at 324 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/restdocs/spring-restdocs-bom/3.0.1/spring-restdocs-bom-3.0.1.pom (2.6 kB at 136 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/security/spring-security-bom/6.3.1/spring-security-bom-6.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/security/spring-security-bom/6.3.1/spring-security-bom-6.3.1.pom (5.3 kB at 592 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/session/spring-session-bom/3.3.1/spring-session-bom-3.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/session/spring-session-bom/3.3.1/spring-session-bom-3.3.1.pom (2.9 kB at 321 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/ws/spring-ws-bom/4.0.11/spring-ws-bom-4.0.11.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/springframework/ws/spring-ws-bom/4.0.11/spring-ws-bom-4.0.11.pom (3.5 kB at 437 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.19.8/testcontainers-bom-1.19.8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/testcontainers/testcontainers-bom/1.19.8/testcontainers-bom-1.19.8.pom (10 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.9.6/maven-plugin-api-3.9.6.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.9.6/maven-model-3.9.6.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.9.6/maven-artifact-3.9.6.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.9.0.M2/org.eclipse.sisu.plexus-0.9.0.M2.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.9.6/maven-plugin-api-3.9.6.jar (47 kB at 3.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.9.0.M2/org.eclipse.sisu.inject-0.9.0.M2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.9.6/maven-model-3.9.6.jar (218 kB at 14 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/javax.annotation-api/1.2/javax.annotation-api-1.2.jar (26 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.7.0/plexus-classworlds-2.7.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/2.1.0/plexus-component-annotations-2.1.0.jar (4.2 kB at 169 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-annotations/3.11.0/maven-plugin-annotations-3.11.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.9.0.M2/org.eclipse.sisu.inject-0.9.0.M2.jar (425 kB at 16 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.0/jackson-databind-2.17.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.9.0.M2/org.eclipse.sisu.plexus-0.9.0.M2.jar (210 kB at 7.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.0/jackson-annotations-2.17.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.7.0/plexus-classworlds-2.7.0.jar (53 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.0/jackson-core-2.17.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/plugin-tools/maven-plugin-annotations/3.11.0/maven-plugin-annotations-3.11.0.jar (14 kB at 372 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.9.6/maven-artifact-3.9.6.jar (59 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-permission-utils/1.5.5/folio-permission-utils-1.5.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-annotations/2.17.0/jackson-annotations-2.17.0.jar (78 kB at 1.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-core/2.17.0/jackson-core-2.17.0.jar (582 kB at 8.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/fasterxml/jackson/core/jackson-databind/2.17.0/jackson-databind-2.17.0.jar (1.6 MB at 25 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/folio/folio-permission-utils/1.5.5/folio-permission-utils-1.5.5.jar (14 kB at 203 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/net/bytebuddy/byte-buddy/1.14.9/byte-buddy-1.14.9.jar (4.2 MB at 41 MB/s)
[INFO] 
[INFO] --- aspectj-maven-plugin:1.14:compile (default) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjtools/1.9.22.1/aspectjtools-1.9.22.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjtools/1.9.22.1/aspectjtools-1.9.22.1.pom (2.5 kB at 154 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/4.0.2/plexus-xml-4.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/4.0.2/plexus-xml-4.0.2.pom (4.2 kB at 466 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-xml-impl/4.0.0-alpha-7/maven-xml-impl-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-xml-impl/4.0.0-alpha-7/maven-xml-impl-4.0.0-alpha-7.pom (1.9 kB at 211 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/4.0.0-alpha-7/maven-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/4.0.0-alpha-7/maven-4.0.0-alpha-7.pom (26 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/40/maven-parent-40.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/40/maven-parent-40.pom (49 kB at 4.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-bom/4.0.0-alpha-7/maven-bom-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-bom/4.0.0-alpha-7/maven-bom-4.0.0-alpha-7.pom (6.3 kB at 634 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/junit-bom/5.9.1/junit-bom-5.9.1.pom (5.6 kB at 563 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-xml/4.0.0-alpha-7/maven-api-xml-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-xml/4.0.0-alpha-7/maven-api-xml-4.0.0-alpha-7.pom (1.6 kB at 141 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api/4.0.0-alpha-7/maven-api-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api/4.0.0-alpha-7/maven-api-4.0.0-alpha-7.pom (3.6 kB at 358 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-meta/4.0.0-alpha-7/maven-api-meta-4.0.0-alpha-7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-meta/4.0.0-alpha-7/maven-api-meta-4.0.0-alpha-7.pom (1.4 kB at 138 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/4.0.0-M9/maven-reporting-api-4.0.0-M9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/4.0.0-M9/maven-reporting-api-4.0.0-M9.pom (2.8 kB at 316 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/41/maven-shared-components-41.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/41/maven-shared-components-41.pom (3.2 kB at 353 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/2.0.0-M8/doxia-sink-api-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/2.0.0-M8/doxia-sink-api-2.0.0-M8.pom (1.4 kB at 155 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/2.0.0-M8/doxia-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia/2.0.0-M8/doxia-2.0.0-M8.pom (18 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-impl/4.0.0-M13/maven-reporting-impl-4.0.0-M13.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-impl/4.0.0-M13/maven-reporting-impl-4.0.0-M13.pom (7.6 kB at 847 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.pom (8.1 kB at 896 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.2.5/maven-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven/3.2.5/maven-3.2.5.pom (22 kB at 2.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/25/maven-parent-25.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-parent/25/maven-parent-25.pom (37 kB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/15/apache-15.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/15/apache-15.pom (15 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.pom (4.2 kB at 531 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.20/plexus-utils-3.0.20.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/3.0.20/plexus-utils-3.0.20.pom (3.8 kB at 152 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/3.3.1/plexus-3.3.1.pom (20 kB at 2.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/17/spice-parent-17.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/17/spice-parent-17.pom (6.8 kB at 751 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.pom (2.2 kB at 241 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.pom (2.6 kB at 288 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-interpolation/1.21/plexus-interpolation-1.21.pom (1.5 kB at 171 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/1.3.1/plexus-components-1.3.1.pom (3.1 kB at 340 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.pom (815 B at 91 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-containers/1.5.5/plexus-containers-1.5.5.pom (4.2 kB at 471 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/2.0.7/plexus-2.0.7.pom (17 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.pom (3.0 kB at 329 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/12/spice-parent-12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/spice/spice-parent/12/spice-parent-12.pom (6.8 kB at 566 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/4/forge-parent-4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/4/forge-parent-4.pom (8.4 kB at 933 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.5.5/plexus-utils-1.5.5.pom (5.1 kB at 572 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.pom (2.1 kB at 229 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.pom (2.2 kB at 248 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.pom (2.3 kB at 261 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.pom (3.0 kB at 336 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.0.M1/org.eclipse.sisu.plexus-0.3.0.M1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.plexus/0.3.0.M1/org.eclipse.sisu.plexus-0.3.0.M1.pom (4.7 kB at 523 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-plexus/0.3.0.M1/sisu-plexus-0.3.0.M1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-plexus/0.3.0.M1/sisu-plexus-0.3.0.M1.pom (13 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.0/cdi-api-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.0/cdi-api-1.0.pom (1.4 kB at 159 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-api-parent/1.0/weld-api-parent-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-api-parent/1.0/weld-api-parent-1.0.pom (2.4 kB at 236 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-api-bom/1.0/weld-api-bom-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-api-bom/1.0/weld-api-bom-1.0.pom (7.9 kB at 565 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-parent/6/weld-parent-6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-parent/6/weld-parent-6.pom (21 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.pom (1.0 kB at 114 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.0.M1/org.eclipse.sisu.inject-0.3.0.M1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.0.M1/org.eclipse.sisu.inject-0.3.0.M1.pom (2.5 kB at 283 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-inject/0.3.0.M1/sisu-inject-0.3.0.M1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/sisu/sisu-inject/0.3.0.M1/sisu-inject-0.3.0.M1.pom (14 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.1/plexus-classworlds-2.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.1/plexus-classworlds-2.5.1.pom (5.0 kB at 334 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/2.1/plexus-utils-2.1.pom (4.0 kB at 448 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.pom (3.0 kB at 333 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.pom (4.2 kB at 425 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.pom (1.9 kB at 211 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether/1.0.0.v20140518/aether-1.0.0.v20140518.pom (30 kB at 3.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.pom (2.1 kB at 205 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.pom (2.2 kB at 146 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.pom (3.5 kB at 386 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3.pom (11 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/inject/guice-parent/3.2.3/guice-parent-3.2.3.pom (13 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/38/forge-parent-38.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/forge/forge-parent/38/forge-parent-38.pom (19 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/aopalliance/aopalliance/1.0/aopalliance-1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/aopalliance/aopalliance/1.0/aopalliance-1.0.pom (363 B at 40 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/16.0.1/guava-16.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/16.0.1/guava-16.0.1.pom (6.1 kB at 678 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava-parent/16.0.1/guava-parent-16.0.1.pom (7.3 kB at 734 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.pom (7.3 kB at 522 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-model/2.0.0-M16/doxia-site-model-2.0.0-M16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-model/2.0.0-M16/doxia-site-model-2.0.0-M16.pom (5.8 kB at 729 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sitetools/2.0.0-M16/doxia-sitetools-2.0.0-M16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sitetools/2.0.0-M16/doxia-sitetools-2.0.0-M16.pom (13 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.2/cdi-api-1.2.pom (6.3 kB at 483 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-parent/26/weld-parent-26.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/jboss/weld/weld-parent/26/weld-parent-26.pom (32 kB at 3.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-core/2.0.0-M8/doxia-core-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-core/2.0.0-M8/doxia-core-2.0.0-M8.pom (3.6 kB at 357 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.pom (21 kB at 2.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/54/commons-parent-54.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/54/commons-parent-54.pom (82 kB at 4.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/27/apache-27.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/27/apache-27.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-integration-tools/2.0.0-M16/doxia-integration-tools-2.0.0-M16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-integration-tools/2.0.0-M16/doxia-integration-tools-2.0.0-M16.pom (7.9 kB at 790 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-i18n/1.0-beta-10/plexus-i18n-1.0-beta-10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-i18n/1.0-beta-10/plexus-i18n-1.0-beta-10.pom (2.1 kB at 231 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/1.1.12/plexus-components-1.1.12.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/1.1.12/plexus-components-1.1.12.pom (3.0 kB at 334 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.10/plexus-1.0.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/1.0.10/plexus-1.0.10.pom (8.2 kB at 917 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.4.5/plexus-utils-1.4.5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-utils/1.4.5/plexus-utils-1.4.5.pom (2.3 kB at 252 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-renderer/2.0.0-M16/doxia-site-renderer-2.0.0-M16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-renderer/2.0.0-M16/doxia-site-renderer-2.0.0-M16.pom (7.4 kB at 819 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-skin-model/2.0.0-M16/doxia-skin-model-2.0.0-M16.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-skin-model/2.0.0-M16/doxia-skin-model-2.0.0-M16.pom (3.2 kB at 287 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xhtml5/2.0.0-M8/doxia-module-xhtml5-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xhtml5/2.0.0-M8/doxia-module-xhtml5-2.0.0-M8.pom (2.7 kB at 275 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-modules/2.0.0-M8/doxia-modules-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-modules/2.0.0-M8/doxia-modules-2.0.0-M8.pom (2.2 kB at 244 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-velocity/2.0/plexus-velocity-2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-velocity/2.0/plexus-velocity-2.0.pom (3.4 kB at 344 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/6.6/plexus-components-6.6.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-components/6.6/plexus-components-6.6.pom (2.7 kB at 297 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-core/2.3/velocity-engine-core-2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-core/2.3/velocity-engine-core-2.3.pom (10 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-parent/2.3/velocity-engine-parent-2.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-parent/2.3/velocity-engine-parent-2.3.pom (14 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-master/4/velocity-master-4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-master/4/velocity-master-4.pom (7.8 kB at 647 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-api/1.7.30/slf4j-api-1.7.30.pom (3.8 kB at 349 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/1.7.30/slf4j-parent-1.7.30.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/slf4j/slf4j-parent/1.7.30/slf4j-parent-1.7.30.pom (14 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-generic/3.1/velocity-tools-generic-3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-generic/3.1/velocity-tools-generic-3.1.pom (2.6 kB at 213 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-parent/3.1/velocity-tools-parent-3.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-parent/3.1/velocity-tools-parent-3.1.pom (8.0 kB at 729 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.pom (18 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/47/commons-parent-47.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/47/commons-parent-47.pom (78 kB at 6.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/19/apache-19.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/19/apache-19.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.pom (12 kB at 1.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/39/commons-parent-39.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/39/commons-parent-39.pom (62 kB at 5.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-digester3/3.2/commons-digester3-3.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-digester3/3.2/commons-digester3-3.2.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/22/commons-parent-22.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/22/commons-parent-22.pom (42 kB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/9/apache-9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/apache/9/apache-9.pom (15 kB at 1.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.pom (11 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/14/commons-parent-14.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/14/commons-parent-14.pom (31 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.pom (18 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/5/commons-parent-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/5/commons-parent-5.pom (16 kB at 1.6 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.10/commons-lang3-3.10.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-lang3/3.10/commons-lang3-3.10.pom (31 kB at 3.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/50/commons-parent-50.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/50/commons-parent-50.pom (76 kB at 4.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/cliftonlabs/json-simple/3.0.2/json-simple-3.0.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/cliftonlabs/json-simple/3.0.2/json-simple-3.0.2.pom (7.5 kB at 747 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-apt/2.0.0-M8/doxia-module-apt-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-apt/2.0.0-M8/doxia-module-apt-2.0.0-M8.pom (2.8 kB at 284 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xdoc/2.0.0-M8/doxia-module-xdoc-2.0.0-M8.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xdoc/2.0.0-M8/doxia-module-xdoc-2.0.0-M8.pom (5.2 kB at 524 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-archiver/3.6.1/maven-archiver-3.6.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-archiver/3.6.1/maven-archiver-3.6.1.pom (4.1 kB at 405 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/40/maven-shared-components-40.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/40/maven-shared-components-40.pom (3.2 kB at 358 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-archiver/4.8.0/plexus-archiver-4.8.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-archiver/4.8.0/plexus-archiver-4.8.0.pom (6.1 kB at 678 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/14/plexus-14.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus/14/plexus-14.pom (28 kB at 2.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-io/3.4.1/plexus-io-3.4.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-io/3.4.1/plexus-io-3.4.1.pom (6.0 kB at 601 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-io/commons-io/2.13.0/commons-io-2.13.0.pom (20 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/58/commons-parent-58.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/58/commons-parent-58.pom (83 kB at 7.5 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.pom (22 kB at 2.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/56/commons-parent-56.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-parent/56/commons-parent-56.pom (82 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/iq80/snappy/snappy/0.4/snappy-0.4.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/iq80/snappy/snappy/0.4/snappy-0.4.pom (15 kB at 1.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/tukaani/xz/1.9/xz-1.9.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/tukaani/xz/1.9/xz-1.9.pom (2.0 kB at 227 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/luben/zstd-jni/1.5.5-5/zstd-jni-1.5.5-5.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/luben/zstd-jni/1.5.5-5/zstd-jni-1.5.5-5.pom (1.9 kB at 213 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjtools/1.9.22.1/aspectjtools-1.9.22.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/4.0.2/plexus-xml-4.0.2.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-xml-impl/4.0.0-alpha-7/maven-xml-impl-4.0.0-alpha-7.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-xml/4.0.0-alpha-7/maven-api-xml-4.0.0-alpha-7.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-meta/4.0.0-alpha-7/maven-api-meta-4.0.0-alpha-7.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-xml/4.0.2/plexus-xml-4.0.2.jar (89 kB at 2.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/4.0.0-M9/maven-reporting-api-4.0.0-M9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-xml-impl/4.0.0-alpha-7/maven-xml-impl-4.0.0-alpha-7.jar (19 kB at 424 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-impl/4.0.0-M13/maven-reporting-impl-4.0.0-M13.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-xml/4.0.0-alpha-7/maven-api-xml-4.0.0-alpha-7.jar (8.4 kB at 159 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-api/4.0.0-M9/maven-reporting-api-4.0.0-M9.jar (9.8 kB at 178 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/reporting/maven-reporting-impl/4.0.0-M13/maven-reporting-impl-4.0.0-M13.jar (21 kB at 354 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-api-meta/4.0.0-alpha-7/maven-api-meta-4.0.0-alpha-7.jar (12 kB at 172 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings/3.2.5/maven-settings-3.2.5.jar (43 kB at 615 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-settings-builder/3.2.5/maven-settings-builder-3.2.5.jar (44 kB at 553 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-repository-metadata/3.2.5/maven-repository-metadata-3.2.5.jar (26 kB at 309 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model/3.2.5/maven-model-3.2.5.jar (161 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-core/3.2.5/maven-core-3.2.5.jar (608 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-model-builder/3.2.5/maven-model-builder-3.2.5.jar (170 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-aether-provider/3.2.5/maven-aether-provider-3.2.5.jar (66 kB at 671 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-spi/1.0.0.v20140518/aether-spi-1.0.0.v20140518.jar (31 kB at 258 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3-no_aop.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-util/1.0.0.v20140518/aether-util-1.0.0.v20140518.jar (146 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/aopalliance/aopalliance/1.0/aopalliance-1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-impl/1.0.0.v20140518/aether-impl-1.0.0.v20140518.jar (172 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/16.0.1/guava-16.0.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/eclipse/aether/aether-api/1.0.0.v20140518/aether-api-1.0.0.v20140518.jar (136 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/sisu/sisu-guice/3.2.3/sisu-guice-3.2.3-no_aop.jar (398 kB at 2.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/aopalliance/aopalliance/1.0/aopalliance-1.0.jar (4.5 kB at 32 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-classworlds/2.5.2/plexus-classworlds-2.5.2.jar (53 kB at 354 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar (4.2 kB at 27 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar (29 kB at 182 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar (13 kB at 84 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-core/2.0.0-M8/doxia-core-2.0.0-M8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-artifact/3.2.5/maven-artifact-3.2.5.jar (55 kB at 318 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-plugin-api/3.2.5/maven-plugin-api-3.2.5.jar (46 kB at 267 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-apt/2.0.0-M8/doxia-module-apt-2.0.0-M8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-core/2.0.0-M8/doxia-core-2.0.0-M8.jar (146 kB at 792 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xdoc/2.0.0-M8/doxia-module-xdoc-2.0.0-M8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-apt/2.0.0-M8/doxia-module-apt-2.0.0-M8.jar (53 kB at 277 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-archiver/3.6.1/maven-archiver-3.6.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-text/1.10.0/commons-text-1.10.0.jar (238 kB at 1.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-archiver/4.8.0/plexus-archiver-4.8.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xdoc/2.0.0-M8/doxia-module-xdoc-2.0.0-M8.jar (35 kB at 174 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-io/3.4.1/plexus-io-3.4.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/google/guava/guava/16.0.1/guava-16.0.1.jar (2.2 MB at 11 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-archiver/4.8.0/plexus-archiver-4.8.0.jar (224 kB at 1.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/iq80/snappy/snappy/0.4/snappy-0.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/maven-archiver/3.6.1/maven-archiver-3.6.1.jar (27 kB at 129 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/tukaani/xz/1.9/xz-1.9.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/tukaani/xz/1.9/xz-1.9.jar (116 kB at 532 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/luben/zstd-jni/1.5.5-5/zstd-jni-1.5.5-5.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-io/3.4.1/plexus-io-3.4.1.jar (79 kB at 359 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/2.0.0-M8/doxia-sink-api-2.0.0-M8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/iq80/snappy/snappy/0.4/snappy-0.4.jar (58 kB at 261 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-renderer/2.0.0-M16/doxia-site-renderer-2.0.0-M16.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-renderer/2.0.0-M16/doxia-site-renderer-2.0.0-M16.jar (42 kB at 177 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-skin-model/2.0.0-M16/doxia-skin-model-2.0.0-M16.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-sink-api/2.0.0-M8/doxia-sink-api-2.0.0-M8.jar (10 kB at 42 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xhtml5/2.0.0-M8/doxia-module-xhtml5-2.0.0-M8.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-compress/1.23.0/commons-compress-1.23.0.jar (1.1 MB at 4.2 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.2/cdi-api-1.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-skin-model/2.0.0-M16/doxia-skin-model-2.0.0-M16.jar (16 kB at 64 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-velocity/2.0/plexus-velocity-2.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/javax/enterprise/cdi-api/1.2/cdi-api-1.2.jar (71 kB at 270 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-core/2.3/velocity-engine-core-2.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-module-xhtml5/2.0.0-M8/doxia-module-xhtml5-2.0.0-M8.jar (17 kB at 64 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-generic/3.1/velocity-tools-generic-3.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/aspectj/aspectjtools/1.9.22.1/aspectjtools-1.9.22.1.jar (15 MB at 56 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-velocity/2.0/plexus-velocity-2.0.jar (4.8 kB at 18 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-beanutils/commons-beanutils/1.9.4/commons-beanutils-1.9.4.jar (247 kB at 849 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-digester3/3.2/commons-digester3-3.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/tools/velocity-tools-generic/3.1/velocity-tools-generic-3.1.jar (217 kB at 735 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/cliftonlabs/json-simple/3.0.2/json-simple-3.0.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar (588 kB at 1.9 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-integration-tools/2.0.0-M16/doxia-integration-tools-2.0.0-M16.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/velocity/velocity-engine-core/2.3/velocity-engine-core-2.3.jar (531 kB at 1.7 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-i18n/1.0-beta-10/plexus-i18n-1.0-beta-10.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/commons/commons-digester3/3.2/commons-digester3-3.2.jar (242 kB at 757 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-model/2.0.0-M16/doxia-site-model-2.0.0-M16.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/cliftonlabs/json-simple/3.0.2/json-simple-3.0.2.jar (35 kB at 109 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-integration-tools/2.0.0-M16/doxia-integration-tools-2.0.0-M16.jar (50 kB at 154 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-i18n/1.0-beta-10/plexus-i18n-1.0-beta-10.jar (12 kB at 36 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/doxia/doxia-site-model/2.0.0-M16/doxia-site-model-2.0.0-M16.jar (86 kB at 258 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/github/luben/zstd-jni/1.5.5-5/zstd-jni-1.5.5-5.jar (5.9 MB at 18 MB/s)
[INFO] Showing AJC message detail for messages of types: [error, warning, fail]
[WARNING] You aren't using a compiler supported by lombok, so lombok will not work and has been disabled.
Your processor is: org.aspectj.org.eclipse.jdt.internal.compiler.apt.dispatch.BatchProcessingEnvImpl
Lombok supports: OpenJDK javac, ECJ
	<unknown source file>:<no line information>

[INFO] 
[INFO] --- maven-resources-plugin:3.3.1:testResources (default-testResources) @ mod-invoice-storage ---
[INFO] Copying 2 resources from src/test/resources to target/test-classes
[INFO] 
[INFO] --- maven-compiler-plugin:3.13.0:testCompile (default-testCompile) @ mod-invoice-storage ---
[INFO] Recompiling the module because of changed dependency.
[INFO] Compiling 22 source files with javac [debug parameters release 17] to target/test-classes
[INFO] /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/src/test/java/org/folio/rest/core/RestClientTest.java: Some input files use or override a deprecated API.
[INFO] /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/src/test/java/org/folio/rest/core/RestClientTest.java: Recompile with -Xlint:deprecation for details.
[INFO] 
[INFO] --- maven-surefire-plugin:3.5.1:test (default-test) @ mod-invoice-storage ---
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-api/3.5.1/surefire-api-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-api/3.5.1/surefire-api-3.5.1.pom (3.5 kB at 272 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-logger-api/3.5.1/surefire-logger-api-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-logger-api/3.5.1/surefire-logger-api-3.5.1.pom (3.3 kB at 326 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-shared-utils/3.5.1/surefire-shared-utils-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-shared-utils/3.5.1/surefire-shared-utils-3.5.1.pom (4.7 kB at 469 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-api/3.5.1/surefire-extensions-api-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-api/3.5.1/surefire-extensions-api-3.5.1.pom (3.5 kB at 252 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/maven-surefire-common/3.5.1/maven-surefire-common-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/maven-surefire-common/3.5.1/maven-surefire-common-3.5.1.pom (7.8 kB at 868 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-booter/3.5.1/surefire-booter-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-booter/3.5.1/surefire-booter-3.5.1.pom (4.8 kB at 537 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-spi/3.5.1/surefire-extensions-spi-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-spi/3.5.1/surefire-extensions-spi-3.5.1.pom (1.8 kB at 176 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-common-artifact-filters/3.4.0/maven-common-artifact-filters-3.4.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-common-artifact-filters/3.4.0/maven-common-artifact-filters-3.4.0.pom (5.4 kB at 597 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/42/maven-shared-components-42.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-shared-components/42/maven-shared-components-42.pom (3.8 kB at 377 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.3.0/plexus-java-1.3.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.3.0/plexus-java-1.3.0.pom (14 kB at 1.4 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.1.0/qdox-2.1.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.1.0/qdox-2.1.0.pom (18 kB at 1.8 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-api/3.5.1/surefire-api-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-logger-api/3.5.1/surefire-logger-api-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-shared-utils/3.5.1/surefire-shared-utils-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-api/3.5.1/surefire-extensions-api-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/maven-surefire-common/3.5.1/maven-surefire-common-3.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-api/3.5.1/surefire-extensions-api-3.5.1.jar (26 kB at 2.0 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-booter/3.5.1/surefire-booter-3.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-logger-api/3.5.1/surefire-logger-api-3.5.1.jar (14 kB at 970 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-spi/3.5.1/surefire-extensions-spi-3.5.1.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/maven-surefire-common/3.5.1/maven-surefire-common-3.5.1.jar (311 kB at 16 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-common-artifact-filters/3.4.0/maven-common-artifact-filters-3.4.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-booter/3.5.1/surefire-booter-3.5.1.jar (118 kB at 5.1 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.3.0/plexus-java-1.3.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-extensions-spi/3.5.1/surefire-extensions-spi-3.5.1.jar (8.2 kB at 341 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.1.0/qdox-2.1.0.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/shared/maven-common-artifact-filters/3.4.0/maven-common-artifact-filters-3.4.0.jar (58 kB at 1.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/codehaus/plexus/plexus-java/1.3.0/plexus-java-1.3.0.jar (57 kB at 1.7 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/com/thoughtworks/qdox/qdox/2.1.0/qdox-2.1.0.jar (348 kB at 9.7 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-api/3.5.1/surefire-api-3.5.1.jar (171 kB at 2.9 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-shared-utils/3.5.1/surefire-shared-utils-3.5.1.jar (2.8 MB at 40 MB/s)
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-junit-platform/3.5.1/surefire-junit-platform-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-junit-platform/3.5.1/surefire-junit-platform-3.5.1.pom (5.7 kB at 518 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-providers/3.5.1/surefire-providers-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-providers/3.5.1/surefire-providers-3.5.1.pom (2.6 kB at 186 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/common-java5/3.5.1/common-java5-3.5.1.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/common-java5/3.5.1/common-java5-3.5.1.pom (2.8 kB at 307 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.pom (3.2 kB at 320 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.pom (1.7 kB at 168 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.pom (2.8 kB at 315 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.pom (3.0 kB at 336 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-junit-platform/3.5.1/surefire-junit-platform-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/common-java5/3.5.1/common-java5-3.5.1.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/common-java5/3.5.1/common-java5-3.5.1.jar (18 kB at 1.2 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-engine/1.9.3/junit-platform-engine-1.9.3.jar (189 kB at 14 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar (7.7 kB at 510 kB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/apache/maven/surefire/surefire-junit-platform/3.5.1/surefire-junit-platform-3.5.1.jar (27 kB at 1.4 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-commons/1.9.3/junit-platform-commons-1.9.3.jar (103 kB at 5.7 MB/s)
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.9.3/junit-platform-launcher-1.9.3.jar (169 kB at 6.3 MB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.11.2/junit-platform-launcher-1.11.2.pom
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.11.2/junit-platform-launcher-1.11.2.pom (3.0 kB at 337 kB/s)
[INFO] Downloading from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.11.2/junit-platform-launcher-1.11.2.jar
[INFO] Downloaded from folio-nexus: https://repository.folio.org/repository/maven-public/org/junit/platform/junit-platform-launcher/1.11.2/junit-platform-launcher-1.11.2.jar (189 kB at 16 MB/s)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8 -Dsun.net.inetaddr.ttl=10 -Dsun.net.inetaddr.negative.ttl=10 -Dmaven.ext.class.path="/home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08/pipeline-maven-spy.jar" -Dorg.jenkinsci.plugins.pipeline.maven.reportsFolder="/home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08" 
[INFO] Running org.folio.rest.impl.StorageTestSuite
13:42:13 [] [] [] [] INFO  StorageTestSuite     Start container database
13:42:13 [] [] [] [] INFO  StorageTestSuite     Start verticle
13:42:13 [] [] [] [] INFO  RestVerticle         git: https://github.com/folio-org/raml-module-builder.git 7dcee528adbbb830e84dd7b92a6551e81bf6754e
13:42:13 [] [] [] [] INFO  RestVerticle         metrics enabled: false
13:42:13 [] [] [] [] INFO  Messages             Loading messages from /infra-messages/APIMessages_en.properties ................................
13:42:13 [] [] [] [] INFO  Messages             Loading messages from /infra-messages/APIMessages_de.properties ................................
13:42:13 [] [] [] [] INFO  Version              HV000001: Hibernate Validator 8.0.1.Final
13:42:14 [] [] [] [] INFO  RestRouting          Adding route DELETE /_/tenant/{operation_id} -> deleteTenantByOperationId
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /_/tenant/{operation_id} -> getTenantByOperationId
13:42:14 [] [] [] [] INFO  RestRouting          Adding route POST /_/tenant -> postTenant
13:42:14 [] [] [] [] INFO  RestRouting          Adding route DELETE /invoice-storage/invoice-lines/{id} -> deleteInvoiceStorageInvoiceLinesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoice-lines/{id} -> getInvoiceStorageInvoiceLinesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route PUT /invoice-storage/invoice-lines/{id} -> putInvoiceStorageInvoiceLinesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route DELETE /invoice-storage/invoices/{id} -> deleteInvoiceStorageInvoicesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoices/{id} -> getInvoiceStorageInvoicesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route PUT /invoice-storage/invoices/{id} -> putInvoiceStorageInvoicesById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route DELETE /invoice-storage/invoices/{id}/documents/{documentId} -> deleteInvoiceStorageInvoicesDocumentsByIdAndDocumentId
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoices/{id}/documents/{documentId} -> getInvoiceStorageInvoicesDocumentsByIdAndDocumentId
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoice-lines -> getInvoiceStorageInvoiceLines
13:42:14 [] [] [] [] INFO  RestRouting          Adding route POST /invoice-storage/invoice-lines -> postInvoiceStorageInvoiceLines
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoices -> getInvoiceStorageInvoices
13:42:14 [] [] [] [] INFO  RestRouting          Adding route POST /invoice-storage/invoices -> postInvoiceStorageInvoices
13:42:14 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoices/{id}/documents -> getInvoiceStorageInvoicesDocumentsById
13:42:14 [] [] [] [] INFO  RestRouting          Adding route POST /invoice-storage/invoices/{id}/documents -> postInvoiceStorageInvoicesDocumentsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoice-line-number -> getInvoiceStorageInvoiceLineNumber
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /admin/kill_query -> deleteAdminKillQuery
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/cache_hit_rates -> getAdminCacheHitRates
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/db_cache_summary -> getAdminDbCacheSummary
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/health -> getAdminHealth
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/jstack -> getAdminJstack
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /admin/jstack -> putAdminJstack
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/list_locking_queries -> getAdminListLockingQueries
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/loglevel -> getAdminLoglevel
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /admin/loglevel -> putAdminLoglevel
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/memory -> getAdminMemory
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/postgres_active_sessions -> getAdminPostgresActiveSessions
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/postgres_load -> getAdminPostgresLoad
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/postgres_table_access_stats -> getAdminPostgresTableAccessStats
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/postgres_table_size -> getAdminPostgresTableSize
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/slow_queries -> getAdminSlowQueries
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/table_index_usage -> getAdminTableIndexUsage
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /admin/total_db_size -> getAdminTotalDbSize
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /admin/get_password -> postAdminGetPassword
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /admin/importSQL -> postAdminImportSQL
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /admin/postgres_maintenance -> postAdminPostgresMaintenance
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /admin/set_AES_key -> postAdminSetAESKey
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /admin/postgres_create_indexes -> putAdminPostgresCreateIndexes
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /admin/postgres_drop_indexes -> putAdminPostgresDropIndexes
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /_/ramls -> getRamls
13:42:15 [] [] [] [] INFO  RestRouting          Looks like org.folio.rest.jaxrs.resource.Rmbtests is not implemented
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/voucher-number -> getVoucherStorageVoucherNumber
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/voucher-number/start -> getVoucherStorageVoucherNumberStart
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /voucher-storage/voucher-number/start/{value} -> postVoucherStorageVoucherNumberStartByValue
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /invoice-storage/invoice-number -> getInvoiceStorageInvoiceNumber
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /batch-voucher-storage/batch-voucher-exports/{id} -> deleteBatchVoucherStorageBatchVoucherExportsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/batch-voucher-exports/{id} -> getBatchVoucherStorageBatchVoucherExportsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /batch-voucher-storage/batch-voucher-exports/{id} -> putBatchVoucherStorageBatchVoucherExportsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/batch-voucher-exports -> getBatchVoucherStorageBatchVoucherExports
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /batch-voucher-storage/batch-voucher-exports -> postBatchVoucherStorageBatchVoucherExports
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /_/jsonSchemas -> getJsonSchemas
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /batch-group-storage/batch-groups/{id} -> deleteBatchGroupStorageBatchGroupsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-group-storage/batch-groups/{id} -> getBatchGroupStorageBatchGroupsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /batch-group-storage/batch-groups/{id} -> putBatchGroupStorageBatchGroupsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-group-storage/batch-groups -> getBatchGroupStorageBatchGroups
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /batch-group-storage/batch-groups -> postBatchGroupStorageBatchGroups
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /batch-voucher-storage/batch-vouchers/{id} -> deleteBatchVoucherStorageBatchVouchersById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/batch-vouchers/{id} -> getBatchVoucherStorageBatchVouchersById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /batch-voucher-storage/batch-vouchers -> postBatchVoucherStorageBatchVouchers
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /batch-voucher-storage/export-configurations/{id} -> deleteBatchVoucherStorageExportConfigurationsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/export-configurations/{id} -> getBatchVoucherStorageExportConfigurationsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /batch-voucher-storage/export-configurations/{id} -> putBatchVoucherStorageExportConfigurationsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route DELETE /batch-voucher-storage/export-configurations/{id}/credentials -> deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/export-configurations/{id}/credentials -> getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /batch-voucher-storage/export-configurations/{id}/credentials -> postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route PUT /batch-voucher-storage/export-configurations/{id}/credentials -> putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:15 [] [] [] [] INFO  RestRouting          Adding route GET /batch-voucher-storage/export-configurations -> getBatchVoucherStorageExportConfigurations
13:42:15 [] [] [] [] INFO  RestRouting          Adding route POST /batch-voucher-storage/export-configurations -> postBatchVoucherStorageExportConfigurations
13:42:16 [] [] [] [] INFO  RestRouting          Adding route DELETE /voucher-storage/voucher-lines/{id} -> deleteVoucherStorageVoucherLinesById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/voucher-lines/{id} -> getVoucherStorageVoucherLinesById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route PUT /voucher-storage/voucher-lines/{id} -> putVoucherStorageVoucherLinesById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route DELETE /voucher-storage/vouchers/{id} -> deleteVoucherStorageVouchersById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/vouchers/{id} -> getVoucherStorageVouchersById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route PUT /voucher-storage/vouchers/{id} -> putVoucherStorageVouchersById
13:42:16 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/voucher-lines -> getVoucherStorageVoucherLines
13:42:16 [] [] [] [] INFO  RestRouting          Adding route POST /voucher-storage/voucher-lines -> postVoucherStorageVoucherLines
13:42:16 [] [] [] [] INFO  RestRouting          Adding route GET /voucher-storage/vouchers -> getVoucherStorageVouchers
13:42:16 [] [] [] [] INFO  RestRouting          Adding route POST /voucher-storage/vouchers -> postVoucherStorageVouchers
13:42:16 [] [] [] [] INFO  RestVerticle         Init hook called with implemented class named org.folio.rest.impl.InitAPIs
13:42:16 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:16 [] [] [] [] INFO  InitAPIs             APIs initialized successfully
13:42:16 [] [] [] [] INFO  RestVerticle         Listening port 60069
13:42:16 [] [] [] [] INFO  RestVerticle         No periodic implementation found, continuing with deployment
13:42:17 [] [] [] [] INFO  RestVerticle         No Post Deploy Hook implementation found, continuing with deployment
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant public is set: false
13:42:17 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Starting postgres tester
13:42:23 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"username","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id -1617146422
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'diku_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE diku_mod_invoice_storage PASSWORD 'diku' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE diku_mod_invoice_storage SET search_path = "diku_mod_invoice_storage";
  GRANT diku_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA diku_mod_invoice_storage AUTHORIZATION diku_mod_invoice_storage;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'diku_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE diku_mod_invoice_storage PASSWORD 'diku' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE diku_mod_invoice_storage SET search_path = "diku_mod_invoice_storage";
  GRANT diku_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA diku_mod_invoice_storage AUTHORIZATION diku_mod_invoice_storage;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO diku_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM diku_mod_invoice_storage.rmb_internal);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO diku_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM diku_mod_invoice_storage.rmb_internal);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42882 POST /_/tenant  HTTP_1_1 201 405 6969 tid=diku Created 
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 643728299
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO diku_mod_invoice_storage;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO diku_mod_invoice_storage;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE diku_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = diku_mod_invoice_storage.uuid_larger,   combinefunc = diku_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE diku_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = diku_mod_invoice_storage.uuid_larger,   combinefunc = diku_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE diku_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = diku_mod_invoice_storage.uuid_smaller,   combinefunc = diku_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE diku_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = diku_mod_invoice_storage.uuid_smaller,   combinefunc = diku_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION diku_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION diku_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = diku_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = diku_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = diku_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = diku_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE diku_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO diku_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE diku_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO diku_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(diku_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(diku_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(diku_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(diku_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function diku_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function diku_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function diku_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function diku_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function diku_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function diku_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function diku_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function diku_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function diku_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function diku_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO diku_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM diku_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO diku_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM diku_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM diku_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON diku_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON diku_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON diku_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS diku_mod_invoice_storage.update_batch_groups_references();
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS diku_mod_invoice_storage.update_batch_groups_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_groups_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_groups_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_groups_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_groups_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "diku_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON diku_mod_invoice_storage.batch_groups CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON diku_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON diku_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "diku_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON diku_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON diku_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON diku_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON diku_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON diku_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON diku_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_export_config_credentials_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_export_config_credentials_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.export_config_credentials_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.export_config_credentials_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "diku_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON diku_mod_invoice_storage.export_config_credentials CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON diku_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON diku_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON diku_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON diku_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON diku_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON diku_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON diku_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON diku_mod_invoice_storage.invoices (batchGroupId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON diku_mod_invoice_storage.invoices (batchGroupId);
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON diku_mod_invoice_storage.invoices CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON diku_mod_invoice_storage.invoices CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_invoices_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_invoices_references();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON diku_mod_invoice_storage.invoices CASCADE;
13:42:24 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON diku_mod_invoice_storage.invoices CASCADE;
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.invoices_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.invoices_set_md();
13:42:24 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON diku_mod_invoice_storage.invoices CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON diku_mod_invoice_storage.invoices CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_invoices_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_invoices_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON diku_mod_invoice_storage.invoices CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "diku_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON diku_mod_invoice_storage.invoices CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS diku_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS diku_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE diku_mod_invoice_storage.invoice_number TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE diku_mod_invoice_storage.invoice_number TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON diku_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON diku_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON diku_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON diku_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON diku_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON diku_mod_invoice_storage.invoice_lines (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON diku_mod_invoice_storage.invoice_lines (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_invoice_lines_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_invoice_lines_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.invoice_lines_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.invoice_lines_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_invoice_lines_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_invoice_lines_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "diku_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON diku_mod_invoice_storage.invoice_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON diku_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON diku_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON diku_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON diku_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON diku_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON diku_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON diku_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON diku_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON diku_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON diku_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON diku_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON diku_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON diku_mod_invoice_storage.vouchers (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON diku_mod_invoice_storage.vouchers (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON diku_mod_invoice_storage.vouchers (batchGroupId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON diku_mod_invoice_storage.vouchers (batchGroupId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_vouchers_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_vouchers_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.vouchers_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.vouchers_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_vouchers_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_vouchers_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "diku_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON diku_mod_invoice_storage.vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS diku_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS diku_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE diku_mod_invoice_storage.voucher_number OWNER TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE diku_mod_invoice_storage.voucher_number OWNER TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON diku_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON diku_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON diku_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON diku_mod_invoice_storage.voucher_lines (voucherId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON diku_mod_invoice_storage.voucher_lines (voucherId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_voucher_lines_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_voucher_lines_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.voucher_lines_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.voucher_lines_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_voucher_lines_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_voucher_lines_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "diku_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON diku_mod_invoice_storage.voucher_lines CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON diku_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON diku_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON diku_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON diku_mod_invoice_storage.documents (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON diku_mod_invoice_storage.documents (invoiceId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_documents_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_documents_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.documents_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.documents_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_documents_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_documents_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "diku_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON diku_mod_invoice_storage.documents CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE diku_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE diku_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON diku_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON diku_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON diku_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS diku_mod_invoice_storage.update_batch_vouchers_references();
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS diku_mod_invoice_storage.update_batch_vouchers_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS diku_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "diku_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON diku_mod_invoice_storage.batch_vouchers CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON diku_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS diku_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON diku_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON diku_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE diku_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON diku_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON diku_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON diku_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON diku_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON diku_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE diku_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "diku_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON diku_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:25 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function diku_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS diku_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM diku_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE diku_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM diku_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE diku_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM diku_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE diku_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM diku_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE diku_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO diku_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO diku_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM diku_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM diku_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM diku_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM diku_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM diku_mod_invoice_storage.invoices
    )
    UPDATE diku_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION diku_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM diku_mod_invoice_storage.invoices
    )
    UPDATE diku_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM diku_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM diku_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON diku_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM diku_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM diku_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM diku_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'diku_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'diku_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM diku_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'diku_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'diku_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA diku_mod_invoice_storage TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA diku_mod_invoice_storage TO diku_mod_invoice_storage;
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE diku_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE diku_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:25 [] [diku] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  TenantAPI            job 1dfb5094-7643-4b86-b1d3-dff5f31eed44 completed
13:42:25 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42882 GET /_/tenant/1dfb5094-7643-4b86-b1d3-dff5f31eed44 wait=60000& HTTP_1_1 200 464 430 tid=diku OK 
13:42:25 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
[INFO] Running org.folio.rest.impl.StorageTestSuite$HelperUtilsTestNested
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 s -- in org.folio.rest.impl.StorageTestSuite$HelperUtilsTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$EntitiesCrudTestNested
13:42:25 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:25 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Verifying database's initial state ... 
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           loadDbSchema: Loaded templates/db_scripts/schema.json OK
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant diku is set: false
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       Using schema: diku
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"diku_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:26 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42904 GET /invoice-storage/invoices null HTTP_1_1 200 44 112 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "invoices": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42910 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 8 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "invoiceLines": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42912 GET /voucher-storage/vouchers null HTTP_1_1 200 44 22 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "vouchers": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42914 GET /voucher-storage/voucher-lines null HTTP_1_1 200 48 5 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "voucherLines": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42916 GET /batch-group-storage/batch-groups null HTTP_1_1 200 163 39 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 161

{
    "batchGroups": [
        {
            "id": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "name": "FOLIO",
            "description": "System default"
        }
    ],
    "totalRecords": 1
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42918 GET /batch-voucher-storage/export-configurations null HTTP_1_1 200 49 15 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 70

{
    "exportConfigs": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Verifying database's initial state ... 
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:27 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42920 GET /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 200 55 14 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 76

{
    "batchVoucherExports": [
        
    ],
    "totalRecords": 0
}
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Creating INVOICE ... 
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 successfully created
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42922 POST /invoice-storage/invoices null HTTP_1_1 201 993 113 tid=diku Created 
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Valid fields exists ... 
13:42:27 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Creating INVOICE_LINES ... 
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoiceLines
13:42:27 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42928 POST /invoice-storage/invoice-lines null HTTP_1_1 201 1953 42 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Creating VOUCHER ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVouchers
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42930 POST /voucher-storage/vouchers null HTTP_1_1 201 893 39 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Creating VOUCHER_LINES ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVoucherLines
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42932 POST /voucher-storage/voucher-lines null HTTP_1_1 201 1103 19 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Creating BATCH_GROUP ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42934 POST /batch-group-storage/batch-groups null HTTP_1_1 201 370 7 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Creating BATCH_VOUCHER_EXPORT_CONFIGS ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurations
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42936 POST /batch-voucher-storage/export-configurations null HTTP_1_1 201 553 26 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER test: Creating BATCH_VOUCHER ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42938 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 32 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Creating BATCH_VOUCHER_EXPORTS ... 
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVoucherExports
13:42:28 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42940 POST /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 201 578 12 tid=diku Created 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Valid fields exists ... 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42942 GET /invoice-storage/invoices null HTTP_1_1 200 1096 5 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 535

{
    "invoices": [
        {
            "id": "733cafd3-895f-4e33-87b7-bf40dc3c8069",
            "accountingCode": "1234",
            "adjustments": [
                
            ],
            "adjustmentsTotal": 45.0,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exchangeRate": 1.0,
            "exportToAccounting": false,
            "folioInvoiceNo": "123invoicenumber45",
            "invoiceDate": "2018-07-25T00:00:00.000+00:00",
            "note": "Some note",
            "paymentTerms": "Payment in Advance",
            "paymentMethod": "EFT",
            "status": "Approved",
            "source": "User",
            "vendorInvoiceNo": "YK75851",
            "voucherNumber": "478",
            "poNumbers": [
                "313000",
                "312325"
            ],
            "vendorId": "c0fb5956-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:27.758+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:27.758+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42944 GET /invoice-storage/invoice-lines null HTTP_1_1 200 2118 6 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 803

{
    "invoiceLines": [
        {
            "id": "e0d08448-343b-118a-8c2f-4fb50248d672",
            "adjustments": [
                {
                    "description": "Service Fee",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Amount",
                    "value": 5.0
                },
                {
                    "description": "Sales Tax",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Percentage",
                    "value": 5.0
                }
            ],
            "adjustmentsTotal": 55.0,
            "description": "Some description",
            "fundDistributions": [
                {
                    "code": "USHIST",
                    "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                    "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                    "distributionType": "percentage",
                    "value": 50.0
                },
                {
                    "code": "EUHIST",
                    "encumbrance": "5f9bfc74-f6ff-4877-be1f-793f8ce90ade",
                    "fundId": "63157e96-0693-426d-b0df-948bacdfdb08",
                    "distributionType": "percentage",
                    "value": 50.0
                }
            ],
            "invoiceId": "733cafd3-895f-4e33-87b7-bf40dc3c8069",
            "invoiceLineNumber": "1",
            "invoiceLineStatus": "Approved",
            "poLineId": "90fb53f2-cdf1-11e8-a8d5-f2801f1b9fd1",
            "productId": "0552142352",
            "productIdType": "8261054f-be78-422d-bd51-4ed9f33c3422",
            "quantity": 3,
            "releaseEncumbrance": false,
            "subscriptionInfo": "Subscription information",
            "subscriptionStart": "2018-08-01T00:00:00.000+00:00",
            "subscriptionEnd": "2019-01-01T00:00:00.000+00:00",
            "subTotal": 1000.0,
            "total": 1055.0,
            "referenceNumbers": [
                {
                    "refNumber": "refNumExample",
                    "refNumberType": "Vendor title number",
                    "vendorDetailsSource": "InvoiceLine"
                }
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:27.969+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:27.969+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42946 GET /voucher-storage/vouchers null HTTP_1_1 200 988 5 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 483

{
    "vouchers": [
        {
            "id": "a9b99f8a-7100-47f2-9903-6293d44a9905",
            "accountingCode": "1234",
            "amount": 23.45,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "disbursementNumber": "EFT546789",
            "disbursementDate": "2019-05-05T00:00:00.000+00:00",
            "disbursementAmount": 5.0,
            "enclosureNeeded": false,
            "invoiceCurrency": "USD",
            "invoiceId": "733cafd3-895f-4e33-87b7-bf40dc3c8069",
            "exchangeRate": 0.89,
            "exportToAccounting": false,
            "status": "Awaiting payment",
            "systemCurrency": "EUR",
            "type": "Payment",
            "voucherDate": "2019-05-06T00:00:00.000+00:00",
            "voucherNumber": "1000",
            "acqUnitIds": [
                
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:28.073+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:28.073+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42948 GET /voucher-storage/voucher-lines null HTTP_1_1 200 1208 4 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 548

{
    "voucherLines": [
        {
            "id": "7a09dfd7-8588-49b5-bd15-5119414ff0b5",
            "amount": 23.45,
            "externalAccountNumber": "54321098",
            "fundDistributions": [
                {
                    "code": "USHIST",
                    "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                    "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                    "invoiceLineId": "e0d08448-343b-118a-8c2f-4fb50248d672",
                    "distributionType": "percentage",
                    "value": 50.0
                },
                {
                    "code": "EUHIST",
                    "encumbrance": "5f9bfc74-f6ff-4877-be1f-793f8ce90ade",
                    "fundId": "63157e96-0693-426d-b0df-948bacdfdb08",
                    "invoiceLineId": "e0d08448-343b-118a-8c2f-4fb50248d672",
                    "distributionType": "percentage",
                    "value": 50.0
                }
            ],
            "sourceIds": [
                "e0d08448-343b-118a-8c2f-4fb50248d672"
            ],
            "subTransactionId": "7b1f7179-b83f-4eab-a4db-3c600eebe271",
            "voucherId": "a9b99f8a-7100-47f2-9903-6293d44a9905",
            "metadata": {
                "createdDate": "2024-10-22T13:42:28.147+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:28.147+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42950 GET /batch-group-storage/batch-groups null HTTP_1_1 200 555 4 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 313

{
    "batchGroups": [
        {
            "id": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "name": "FOLIO",
            "description": "System default"
        },
        {
            "id": "cd592659-77aa-4eb3-ac34-c9a4657bb20f",
            "name": "Amherst (AC)",
            "description": "Amherst College",
            "metadata": {
                "createdDate": "2024-10-22T13:42:28.207+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:28.207+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 2
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42952 GET /batch-voucher-storage/export-configurations null HTTP_1_1 200 631 3 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 373

{
    "exportConfigs": [
        {
            "id": "26a4d92b-18ca-4be3-854e-4fb7db03c7a7",
            "batchGroupId": "cd592659-77aa-4eb3-ac34-c9a4657bb20f",
            "enableScheduledExport": true,
            "format": "Application/xml",
            "startTime": "00:00",
            "uploadURI": "ftp://ftp.amherst-lib.edu/invoices/",
            "weekdays": [
                "Monday",
                "Wednesday"
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:28.263+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:28.263+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Verifying only 1 adjustment was created ... 
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42954 GET /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 200 662 3 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 353

{
    "batchVoucherExports": [
        {
            "id": "566c9156-e52f-4597-9fee-5ddac91d14fb",
            "status": "Uploaded",
            "message": "226 Transfer complete",
            "batchGroupId": "cd592659-77aa-4eb3-ac34-c9a4657bb20f",
            "start": "2020-01-27T00:00:00.000+00:00",
            "end": "2020-01-28T00:00:00.000+00:00",
            "batchVoucherId": "35657479-83b9-4760-9c39-b58dcd02ee15",
            "metadata": {
                "createdDate": "2024-10-22T13:42:28.413+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:28.413+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Fetching INVOICE with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoicesById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42956 GET /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 200 993 6 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Fetching INVOICE_LINES with ID: e0d08448-343b-118a-8c2f-4fb50248d672
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLinesById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42958 GET /invoice-storage/invoice-lines/e0d08448-343b-118a-8c2f-4fb50248d672 null HTTP_1_1 200 1953 4 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Fetching VOUCHER with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchersById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42960 GET /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 200 893 3 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Fetching VOUCHER_LINES with ID: 7a09dfd7-8588-49b5-bd15-5119414ff0b5
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLinesById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42962 GET /voucher-storage/voucher-lines/7a09dfd7-8588-49b5-bd15-5119414ff0b5 null HTTP_1_1 200 1103 3 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Fetching BATCH_GROUP with ID: cd592659-77aa-4eb3-ac34-c9a4657bb20f
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42964 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 200 370 3 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Fetching BATCH_VOUCHER_EXPORT_CONFIGS with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42966 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 200 553 3 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER test: Fetching BATCH_VOUCHER with ID: 35657479-83b9-4760-9c39-b58dcd02ee15
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42968 GET /batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15 null HTTP_1_1 200 1051 25 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Fetching BATCH_VOUCHER_EXPORTS with ID: 566c9156-e52f-4597-9fee-5ddac91d14fb
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42970 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 200 578 3 tid=diku OK 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Editing INVOICE with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoicesById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService putInvoiceStorageInvoicesById:: Invoice with id: 733cafd3-895f-4e33-87b7-bf40dc3c8069 was successfully updated
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42972 PUT /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 204 0 13 tid=diku No Content 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Editing INVOICE_LINES with ID: e0d08448-343b-118a-8c2f-4fb50248d672
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoiceLinesById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42974 PUT /invoice-storage/invoice-lines/e0d08448-343b-118a-8c2f-4fb50248d672 null HTTP_1_1 204 0 7 tid=diku No Content 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Editing VOUCHER with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putVoucherStorageVouchersById
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42976 PUT /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 204 0 5 tid=diku No Content 
13:42:28 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Editing VOUCHER_LINES with ID: 7a09dfd7-8588-49b5-bd15-5119414ff0b5
13:42:28 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42978 PUT /voucher-storage/voucher-lines/7a09dfd7-8588-49b5-bd15-5119414ff0b5 null HTTP_1_1 204 0 5 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Editing BATCH_GROUP with ID: cd592659-77aa-4eb3-ac34-c9a4657bb20f
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42980 PUT /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Editing BATCH_VOUCHER_EXPORT_CONFIGS with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42982 PUT /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Editing BATCH_VOUCHER_EXPORTS with ID: 566c9156-e52f-4597-9fee-5ddac91d14fb
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42984 PUT /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Fetching updated INVOICE with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42986 GET /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 200 913 3 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Fetching updated INVOICE_LINES with ID: e0d08448-343b-118a-8c2f-4fb50248d672
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42988 GET /invoice-storage/invoice-lines/e0d08448-343b-118a-8c2f-4fb50248d672 null HTTP_1_1 200 1889 6 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Fetching updated VOUCHER with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42990 GET /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 200 828 3 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Fetching updated VOUCHER_LINES with ID: 7a09dfd7-8588-49b5-bd15-5119414ff0b5
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42992 GET /voucher-storage/voucher-lines/7a09dfd7-8588-49b5-bd15-5119414ff0b5 null HTTP_1_1 200 1053 3 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Fetching updated BATCH_GROUP with ID: cd592659-77aa-4eb3-ac34-c9a4657bb20f
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42994 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 200 299 2 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Fetching updated BATCH_VOUCHER_EXPORT_CONFIGS with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42996 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 200 490 16 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Fetching updated BATCH_VOUCHER_EXPORTS with ID: 566c9156-e52f-4597-9fee-5ddac91d14fb
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:42998 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 200 497 2 tid=diku OK 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages VOUCHER test: Deleting VOUCHER with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43000 DELETE /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 400 121 7 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages INVOICE test: Deleting INVOICE with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   1 invoice lines of invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 were successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR InvoicePostgresDAO   Invoice deletion with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 failed
io.vertx.pgclient.PgException: ERROR: update or delete on table "invoices" violates foreign key constraint "invoiceid_invoices_fkey" on table "vouchers" (23503)
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR InvoiceStorageService Invoice '733cafd3-895f-4e33-87b7-bf40dc3c8069' and associated lines and documents if any failed to be deleted
io.vertx.ext.web.handler.HttpException: Bad Request
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43002 DELETE /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 400 206 15 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages VOUCHER_LINES test: Deleting VOUCHER_LINES with ID: 7a09dfd7-8588-49b5-bd15-5119414ff0b5
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43004 DELETE /voucher-storage/voucher-lines/7a09dfd7-8588-49b5-bd15-5119414ff0b5 null HTTP_1_1 204 0 2 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages VOUCHER test: Deleting VOUCHER with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43006 DELETE /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 204 0 2 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages INVOICE_LINES test: Deleting INVOICE_LINES with ID: e0d08448-343b-118a-8c2f-4fb50248d672
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43008 DELETE /invoice-storage/invoice-lines/e0d08448-343b-118a-8c2f-4fb50248d672 null HTTP_1_1 204 0 3 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages INVOICE test: Deleting INVOICE with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 invoice lines of invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 were successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Invoice with id=733cafd3-895f-4e33-87b7-bf40dc3c8069 successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Invoice 733cafd3-895f-4e33-87b7-bf40dc3c8069 and associated lines and documents if any were successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43010 DELETE /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 204 0 5 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_VOUCHER_EXPORT_CONFIGS test: Deleting BATCH_VOUCHER_EXPORT_CONFIGS with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43012 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 204 0 3 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_VOUCHER_EXPORTS test: Deleting BATCH_VOUCHER_EXPORTS with ID: 566c9156-e52f-4597-9fee-5ddac91d14fb
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherExportsService getAssociatedBatchVoucherIdBatch:: voucher id '35657479-83b9-4760-9c39-b58dcd02ee15' retrieved for batch voucher export with id
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportById:: Deletion of batch voucher export with id '566c9156-e52f-4597-9fee-5ddac91d14fb' completed
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR BatchVoucherExportsService Failed to delete batch voucher export with id: 566c9156-e52f-4597-9fee-5ddac91d14fb 
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id '35657479-83b9-4760-9c39-b58dcd02ee15' deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  ResponseUtils        Batch voucher exports {batchVoucherExportId=566c9156-e52f-4597-9fee-5ddac91d14fb, batchVoucherId=35657479-83b9-4760-9c39-b58dcd02ee15} and associated data were successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43014 DELETE /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 204 0 10 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_GROUP test: Deleting BATCH_GROUP with ID: cd592659-77aa-4eb3-ac34-c9a4657bb20f
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43016 DELETE /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 3 tid=diku No Content 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages INVOICE test: Verify INVOICE is deleted with ID: 733cafd3-895f-4e33-87b7-bf40dc3c8069
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43018 GET /invoice-storage/invoices/733cafd3-895f-4e33-87b7-bf40dc3c8069 null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages INVOICE_LINES test: Verify INVOICE_LINES is deleted with ID: e0d08448-343b-118a-8c2f-4fb50248d672
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43020 GET /invoice-storage/invoice-lines/e0d08448-343b-118a-8c2f-4fb50248d672 null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages VOUCHER test: Verify VOUCHER is deleted with ID: a9b99f8a-7100-47f2-9903-6293d44a9905
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43022 GET /voucher-storage/vouchers/a9b99f8a-7100-47f2-9903-6293d44a9905 null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages VOUCHER_LINES test: Verify VOUCHER_LINES is deleted with ID: 7a09dfd7-8588-49b5-bd15-5119414ff0b5
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43024 GET /voucher-storage/voucher-lines/7a09dfd7-8588-49b5-bd15-5119414ff0b5 null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_GROUP test: Verify BATCH_GROUP is deleted with ID: cd592659-77aa-4eb3-ac34-c9a4657bb20f
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43026 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_VOUCHER_EXPORT_CONFIGS test: Verify BATCH_VOUCHER_EXPORT_CONFIGS is deleted with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43028 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storages BATCH_VOUCHER_EXPORTS test: Verify BATCH_VOUCHER_EXPORTS is deleted with ID: 566c9156-e52f-4597-9fee-5ddac91d14fb
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43030 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43032 GET /invoice-storage/invoices query=invalid-query HTTP_1_1 400 120 12 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43034 GET /invoice-storage/invoice-lines query=invalid-query HTTP_1_1 400 120 2 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43036 GET /voucher-storage/vouchers query=invalid-query HTTP_1_1 400 120 2 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43038 GET /voucher-storage/voucher-lines query=invalid-query HTTP_1_1 400 120 2 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43040 GET /batch-group-storage/batch-groups query=invalid-query HTTP_1_1 400 120 1 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43042 GET /batch-voucher-storage/export-configurations query=invalid-query HTTP_1_1 400 120 2 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS test: Invalid CQL query
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR Conn                 org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR PgUtil               org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
org.folio.rest.persist.cql.CQLQueryValidationException: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:205) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereOp(CQLWrapper.java:232) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereClause(CQLWrapper.java:255) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWithoutLimOff(CQLWrapper.java:306) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.toString(CQLWrapper.java:316) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.buildQueryHelper(PostgresClient.java:2114) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.Conn.get(Conn.java:835) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$73(PostgresClient.java:2299) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.withTimeout(PostgresClient.java:3613) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$142(PostgresClient.java:3747) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$145(PostgresClient.java:3802) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:38) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.SucceededFuture.addListener(SucceededFuture.java:88) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Composition.onSuccess(Composition.java:43) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:66) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:259) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.Mapping.onSuccess(Mapping.java:40) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:60) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: org.folio.cql2pgjson.exception.QueryValidationException: cql.serverChoice requested, but no serverChoiceIndexes defined.
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:524) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.pg(CQL2PgJSON.java:323) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:318) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.cql2pgjson.CQL2PgJSON.toSql(CQL2PgJSON.java:308) ~[cql2pgjson-35.3.0.jar:?]
	at org.folio.rest.persist.cql.CQLWrapper.getWhereThis(CQLWrapper.java:203) ~[domain-models-runtime-35.3.0.jar:?]
	... 30 more
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43044 GET /batch-voucher-storage/batch-voucher-exports query=invalid-query HTTP_1_1 400 120 1 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE put by id test: Invalid INVOICE: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService putInvoiceStorageInvoicesById:: Invoice with id: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa was successfully updated
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43046 PUT /invoice-storage/invoices/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 27 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES put by id test: Invalid INVOICE_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43048 PUT /invoice-storage/invoice-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 4 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER put by id test: Invalid VOUCHER: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43050 PUT /voucher-storage/vouchers/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 3 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES put by id test: Invalid VOUCHER_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43052 PUT /voucher-storage/voucher-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 3 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP put by id test: Invalid BATCH_GROUP: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43054 PUT /batch-group-storage/batch-groups/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS put by id test: Invalid BATCH_VOUCHER_EXPORT_CONFIGS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43056 PUT /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 3 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS put by id test: Invalid BATCH_VOUCHER_EXPORTS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43058 PUT /batch-voucher-storage/batch-voucher-exports/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE delete by id test: Invalid INVOICE: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 invoice lines of invoice with id=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa were successfully deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR InvoiceStorageService Invoice 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa' and associated lines and documents if any failed to be deleted
io.vertx.ext.web.handler.HttpException: Not Found
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43060 DELETE /invoice-storage/invoices/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 17 4 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES delete by id test: Invalid INVOICE_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43062 DELETE /invoice-storage/invoice-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER delete by id test: Invalid VOUCHER: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43064 DELETE /voucher-storage/vouchers/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES delete by id test: Invalid VOUCHER_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43066 DELETE /voucher-storage/voucher-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP delete by id test: Invalid BATCH_GROUP: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43068 DELETE /batch-group-storage/batch-groups/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS delete by id test: Invalid BATCH_VOUCHER_EXPORT_CONFIGS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43070 DELETE /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER delete by id test: Invalid BATCH_VOUCHER: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Deletion of batch voucher exports completed
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Batch voucher exports with batch voucher id bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:29 [] [diku] [] [mod_invoice_storage] WARN  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa' not found
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR ResponseUtils        Batch vouchers io.vertx.ext.web.handler.HttpException: Not Found {batchVoucherId=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa} deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43072 DELETE /batch-voucher-storage/batch-vouchers/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 4 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS delete by id test: Invalid BATCH_VOUCHER_EXPORTS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR BatchVoucherExportsService Failed to get batch voucher id for batch voucher export id: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] ERROR ResponseUtils        Batch voucher exports io.vertx.ext.web.handler.HttpException: Not Found {batchVoucherExportId=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa} deleted
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43074 DELETE /batch-voucher-storage/batch-voucher-exports/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE get by id test: Invalid INVOICE: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoicesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43076 GET /invoice-storage/invoices/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES get by id test: Invalid INVOICE_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43078 GET /invoice-storage/invoice-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER get by id test: Invalid VOUCHER: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43080 GET /voucher-storage/vouchers/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES get by id test: Invalid VOUCHER_LINES: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLinesById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43082 GET /voucher-storage/voucher-lines/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_GROUP get by id test: Invalid BATCH_GROUP: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43084 GET /batch-group-storage/batch-groups/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORT_CONFIGS get by id test: Invalid BATCH_VOUCHER_EXPORT_CONFIGS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43086 GET /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER get by id test: Invalid BATCH_VOUCHER: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43088 GET /batch-voucher-storage/batch-vouchers/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage BATCH_VOUCHER_EXPORTS get by id test: Invalid BATCH_VOUCHER_EXPORTS: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:29 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43090 GET /batch-voucher-storage/batch-voucher-exports/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER_LINES test: Creating VOUCHER_LINES ... fails
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVoucherLines
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43092 POST /voucher-storage/voucher-lines null HTTP_1_1 400 115 4 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage VOUCHER test: Creating VOUCHER ... fails
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVouchers
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43094 POST /voucher-storage/vouchers null HTTP_1_1 400 110 3 tid=diku Bad Request 
13:42:29 [] [] [] [] INFO  EntitiesCrudTest     --- mod-invoice-storage INVOICE_LINES test: Creating INVOICE_LINES ... fails
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoiceLines
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43096 POST /invoice-storage/invoice-lines null HTTP_1_1 400 115 4 tid=diku Bad Request 
[INFO] Tests run: 93, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.579 s -- in org.folio.rest.impl.StorageTestSuite$EntitiesCrudTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$InvoiceTestNested
13:42:29 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:29 [] [] [] [] INFO  InvoiceTest          --- mod-invoice-storage INVOICE test: Attempt to delete invoice when no DB initialized
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice 8df2cd63-cc34-4c66-9ed3-5b44d526f9b6
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant no_db_tenant is set: false
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Using schema: no_db_tenant
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"no_db_tenant_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] ERROR PostgresClient       FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
io.vertx.pgclient.PgException: FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=8df2cd63-cc34-4c66-9ed3-5b44d526f9b6
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] ERROR InvoicePostgresDAO   The invoice 8df2cd63-cc34-4c66-9ed3-5b44d526f9b6 cannot be deleted
io.vertx.pgclient.PgException: FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] ERROR InvoiceStorageService Invoice '8df2cd63-cc34-4c66-9ed3-5b44d526f9b6' and associated lines and documents if any failed to be deleted
io.vertx.ext.web.handler.HttpException: Internal Server Error
13:42:29 [] [no_db_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43098 DELETE /invoice-storage/invoices/8df2cd63-cc34-4c66-9ed3-5b44d526f9b6 null HTTP_1_1 500 89 25 tid=no_db_tenant Internal Server Error 
13:42:29 [] [] [] [] INFO  InvoiceTest          --- mod-invoice-storage INVOICE test: Delete invoice and associated invoice lines
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: null
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=null
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=cfeb72ff-f721-47ba-ad6a-16b8a893916f successfully created
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:29 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43104 POST /invoice-storage/invoices null HTTP_1_1 201 993 52 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoiceLines
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43106 POST /invoice-storage/invoice-lines null HTTP_1_1 201 1953 6 tid=diku Created 
13:42:30 [] [] [] [] INFO  InvoiceTest          Created line with id=3bfb2b55-bc55-4316-ba05-dc8085f31a8a
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoiceLines
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43108 POST /invoice-storage/invoice-lines null HTTP_1_1 201 1953 6 tid=diku Created 
13:42:30 [] [] [] [] INFO  InvoiceTest          Created line with id=0f951293-01bc-46ca-82c8-78a1a8916148
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43110 GET /invoice-storage/invoices null HTTP_1_1 200 1096 3 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 536

{
    "invoices": [
        {
            "id": "cfeb72ff-f721-47ba-ad6a-16b8a893916f",
            "accountingCode": "1234",
            "adjustments": [
                
            ],
            "adjustmentsTotal": 45.0,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exchangeRate": 1.0,
            "exportToAccounting": false,
            "folioInvoiceNo": "123invoicenumber45",
            "invoiceDate": "2018-07-25T00:00:00.000+00:00",
            "note": "Some note",
            "paymentTerms": "Payment in Advance",
            "paymentMethod": "EFT",
            "status": "Approved",
            "source": "User",
            "vendorInvoiceNo": "YK75851",
            "voucherNumber": "478",
            "poNumbers": [
                "313000",
                "312325"
            ],
            "vendorId": "c0fb5956-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:29.939+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:29.939+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 1
}
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43112 GET /invoice-storage/invoice-lines null HTTP_1_1 200 4189 10 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 867

{
    "invoiceLines": [
        {
            "id": "3bfb2b55-bc55-4316-ba05-dc8085f31a8a",
            "adjustments": [
                {
                    "description": "Service Fee",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Amount",
                    "value": 5.0
                },
                {
                    "description": "Sales Tax",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Percentage",
                    "value": 5.0
                }
            ],
            "adjustmentsTotal": 55.0,
            "description": "Some description",
            "fundDistributions": [
                {
                    "code": "USHIST",
                    "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                    "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                    "distributionType": "percentage",
                    "value": 50.0
                },
                {
                    "code": "EUHIST",
                    "encumbrance": "5f9bfc74-f6ff-4877-be1f-793f8ce90ade",
                    "fundId": "63157e96-0693-426d-b0df-948bacdfdb08",
                    "distributionType": "percentage",
                    "value": 50.0
                }
            ],
            "invoiceId": "cfeb72ff-f721-47ba-ad6a-16b8a893916f",
            "invoiceLineNumber": "1",
            "invoiceLineStatus": "Approved",
            "poLineId": "90fb53f2-cdf1-11e8-a8d5-f2801f1b9fd1",
            "productId": "0552142352",
            "productIdType": "8261054f-be78-422d-bd51-4ed9f33c3422",
            "quantity": 3,
            "releaseEncumbrance": false,
            "subscriptionInfo": "Subscription information",
            "subscriptionStart": "2018-08-01T00:00:00.000+00:00",
            "subscriptionEnd": "2019-01-01T00:00:00.000+00:00",
            "subTotal": 1000.0,
            "total": 1055.0,
            "referenceNumbers": [
                {
                    "refNumber": "refNumExample",
                    "refNumberType": "Vendor title number",
                    "vendorDetailsSource": "InvoiceLine"
                }
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.008+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.008+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        },
        {
            "id": "0f951293-01bc-46ca-82c8-78a1a8916148",
            "adjustments": [
                {
                    "description": "Service Fee",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Amount",
                    "value": 5.0
                },
                {
                    "description": "Sales Tax",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Percentage",
                    "value": 5.0
                }
            ],
            "adjustmentsTotal": 55.0,
            "description": "Some description",
            "fundDistributions": [
                {
                    "code": "USHIST",
                    "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                    "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                    "distributionType": "percentage",
                    "value": 50.0
                },
                {
                    "code": "EUHIST",
                    "encumbrance": "5f9bfc74-f6ff-4877-be1f-793f8ce90ade",
                    "fundId": "63157e96-0693-426d-b0df-948bacdfdb08",
                    "distributionType": "percentage",
                    "value": 50.0
                }
            ],
            "invoiceId": "cfeb72ff-f721-47ba-ad6a-16b8a893916f",
            "invoiceLineNumber": "1",
            "invoiceLineStatus": "Approved",
            "poLineId": "90fb53f2-cdf1-11e8-a8d5-f2801f1b9fd1",
            "productId": "0552142352",
            "productIdType": "8261054f-be78-422d-bd51-4ed9f33c3422",
            "quantity": 3,
            "releaseEncumbrance": false,
            "subscriptionInfo": "Subscription information",
            "subscriptionStart": "2018-08-01T00:00:00.000+00:00",
            "subscriptionEnd": "2019-01-01T00:00:00.000+00:00",
            "subTotal": 1000.0,
            "total": 1055.0,
            "referenceNumbers": [
                {
                    "refNumber": "refNumExample",
                    "refNumberType": "Vendor title number",
                    "vendorDetailsSource": "InvoiceLine"
                }
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.031+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.031+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 2
}
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice cfeb72ff-f721-47ba-ad6a-16b8a893916f
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=cfeb72ff-f721-47ba-ad6a-16b8a893916f
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   2 invoice lines of invoice with id=cfeb72ff-f721-47ba-ad6a-16b8a893916f successfully deleted
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=cfeb72ff-f721-47ba-ad6a-16b8a893916f
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=cfeb72ff-f721-47ba-ad6a-16b8a893916f were successfully deleted
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=cfeb72ff-f721-47ba-ad6a-16b8a893916f
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Invoice with id=cfeb72ff-f721-47ba-ad6a-16b8a893916f successfully deleted
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Invoice cfeb72ff-f721-47ba-ad6a-16b8a893916f and associated lines and documents if any were successfully deleted
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43114 DELETE /invoice-storage/invoices/cfeb72ff-f721-47ba-ad6a-16b8a893916f null HTTP_1_1 204 0 5 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43116 GET /invoice-storage/invoices null HTTP_1_1 200 44 2 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "invoices": [
        
    ],
    "totalRecords": 0
}
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43118 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 2 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "invoiceLines": [
        
    ],
    "totalRecords": 0
}
13:42:30 [] [] [] [] INFO  InvoiceTest          --- mod-invoice-storage INVOICE test: Attempt to create invoice when no DB initialized
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: null
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR PostgresClient       FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
io.vertx.pgclient.PgException: FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=null
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR InvoicePostgresDAO   Invoice creation with id=e637a5e4-1a7a-4c44-84ac-4b9518c9300e failed
io.vertx.pgclient.PgException: FATAL: password authentication failed for user "no_db_tenant_mod_invoice_storage" (28P01)
13:42:30 [] [no_db_tenant] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43120 POST /invoice-storage/invoices null HTTP_1_1 500 89 13 tid=no_db_tenant Internal Server Error 
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.287 s -- in org.folio.rest.impl.StorageTestSuite$InvoiceTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$DocumentTestNested
13:42:30 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage Document test:
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage Document test: prepare two invoices
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: 6b8bc989-834d-4a14-945b-4c5442ae09af
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=6b8bc989-834d-4a14-945b-4c5442ae09af
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=6b8bc989-834d-4a14-945b-4c5442ae09af successfully created
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43126 POST /invoice-storage/invoices null HTTP_1_1 201 1525 8 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: 07bb89be-dd4a-42f8-bbd0-a648e14bac5d
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=07bb89be-dd4a-42f8-bbd0-a648e14bac5d
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=07bb89be-dd4a-42f8-bbd0-a648e14bac5d successfully created
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43128 POST /invoice-storage/invoices null HTTP_1_1 201 914 11 tid=diku Created 
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage Document test: prepare two create two documents
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoicesDocumentsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   create invoice document with id=433f8140-001e-4605-b5a8-f02793f3d2ec
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR InvoiceStorageService Error occurred while creating a new invoice document for invoice with id: 6b8bc989-834d-4a14-945b-4c5442ae09af
io.vertx.ext.web.handler.HttpException: Internal Server Error
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43130 POST /invoice-storage/invoices/6b8bc989-834d-4a14-945b-4c5442ae09af/documents null HTTP_1_1 500 66 12 tid=diku Internal Server Error 
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage test: Deleting document with ID: 433f8140-001e-4605-b5a8-f02793f3d2ec
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesDocumentsByIdAndDocumentId
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43132 DELETE /invoice-storage/invoices/6b8bc989-834d-4a14-945b-4c5442ae09af/documents/433f8140-001e-4605-b5a8-f02793f3d2ec null HTTP_1_1 404 9 2 tid=diku Not Found 
HTTP/1.1 404 Not Found
Content-Type: text/plain
content-encoding: gzip
content-length: 35

Not found
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage delete document by id test: Invalid id: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesDocumentsByIdAndDocumentId
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43134 DELETE /invoice-storage/invoices/6b8bc989-834d-4a14-945b-4c5442ae09af/documents/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  DocumentTest         --- mod-invoice-storage get document by id test: Invalid id: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoicesDocumentsByIdAndDocumentId
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   get invoice document with invoiceId=6b8bc989-834d-4a14-945b-4c5442ae09af and documentId=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] ERROR InvoicePostgresDAO   Invoice document with invoiceId=6b8bc989-834d-4a14-945b-4c5442ae09af and documentId=bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa not found
13:42:30 [] [diku] [] [mod_invoice_storage] ERROR InvoiceStorageService Error occurred while retrieving invoice document with id: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa for invoice with id: 6b8bc989-834d-4a14-945b-4c5442ae09af
io.vertx.ext.web.handler.HttpException: Not Found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43136 GET /invoice-storage/invoices/6b8bc989-834d-4a14-945b-4c5442ae09af/documents/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa null HTTP_1_1 404 9 3 tid=diku Not Found 
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.142 s <<< FAILURE! -- in org.folio.rest.impl.StorageTestSuite$DocumentTestNested
[ERROR] org.folio.rest.impl.StorageTestSuite$DocumentTestNested.testDocumentsCrud -- Time elapsed: 0.092 s <<< FAILURE!
java.lang.AssertionError: 
1 expectation failed.
Expected status code <204> but was <404>.

	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
	at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:135)
	at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:143)
	at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
	at org.folio.rest.impl.TestBase.deleteDataSuccess(TestBase.java:184)
	at org.folio.rest.impl.DocumentTest.testDocumentsCrud(DocumentTest.java:99)

[INFO] Running org.folio.rest.impl.StorageTestSuite$ExportConfigCredentialsTestNested
13:42:30 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials test: Creating Credentials ... 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43138 POST /batch-group-storage/batch-groups null HTTP_1_1 201 363 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurations
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43140 POST /batch-voucher-storage/export-configurations null HTTP_1_1 201 553 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43142 POST /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 201 418 8 tid=diku Created 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials test: Valid fields exists ... 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials test: Fetching Credentials with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'    >>>WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully retrieved batch voucher storage export configurations credentials for id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43144 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 200 418 4 tid=diku OK 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials test: Editing Credentials with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43146 PUT /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 204 0 7 tid=diku No Content 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials test: Fetching updated Credentials with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'    >>>WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully retrieved batch voucher storage export configurations credentials for id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43148 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 200 361 3 tid=diku OK 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storages Credentials test: Deleting Credentials with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully deleted batch voucher storage export configurations credentials with id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43150 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 204 0 3 tid=diku No Content 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storages Credentials test: Verify Credentials is deleted with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'    >>>WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl Batch voucher storage export configurations credentials with id '26a4d92b-18ca-4be3-854e-4fb7db03c7a7' not found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43152 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43154 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43156 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43158 DELETE /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 2 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43160 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials put by id test: Invalid Credentials: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43162 PUT /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa/credentials null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials delete by id test: Invalid Credentials: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl Batch voucher storage export configurations credentials with id 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa' not found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43164 DELETE /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa/credentials null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials put by id test: no id
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43166 POST /batch-group-storage/batch-groups null HTTP_1_1 201 363 2 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurations
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43168 POST /batch-voucher-storage/export-configurations null HTTP_1_1 201 553 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43170 POST /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 201 418 2 tid=diku Created 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl PUT payload is missing 'id'.  Looking up record from storage by exportConfigId: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'    >>>WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully updated export configurations credentials with id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43172 PUT /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl PUT payload is missing 'id'.  Looking up record from storage by exportConfigId: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa'    >>>WHERE (jsonb->>'exportConfigId') = 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa'
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl Export configurations credentials with exportConfigId 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa' not found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43174 PUT /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa/credentials null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storages Credentials test: Deleting Credentials with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully deleted batch voucher storage export configurations credentials with id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43176 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storages Credentials test: Verify Credentials is deleted with ID: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'    >>>WHERE (jsonb->>'exportConfigId') = '26a4d92b-18ca-4be3-854e-4fb7db03c7a7'
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl Batch voucher storage export configurations credentials with id '26a4d92b-18ca-4be3-854e-4fb7db03c7a7' not found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43178 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43180 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43182 GET /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43184 DELETE /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 2 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43186 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 404 9 1 tid=diku Not Found 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials put by id test: Invalid Credentials: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43188 POST /batch-group-storage/batch-groups null HTTP_1_1 201 363 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43190 POST /batch-group-storage/batch-groups null HTTP_1_1 201 367 2 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurations
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43192 POST /batch-voucher-storage/export-configurations null HTTP_1_1 201 553 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurations
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43194 POST /batch-voucher-storage/export-configurations null HTTP_1_1 201 541 4 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43196 POST /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 201 418 3 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43198 POST /batch-voucher-storage/export-configurations/6544eb9d-a1e4-4d81-a500-b299c8b76068/credentials null HTTP_1_1 201 419 2 tid=diku Created 
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43200 POST /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 400 58 0 tid=diku Bad Request 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl PUT with mismatch path/'exportConfigId' field: 6544eb9d-a1e4-4d81-a500-b299c8b76068, 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43202 PUT /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 400 58 0 tid=diku Bad Request 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully deleted batch voucher storage export configurations credentials with id: 26a4d92b-18ca-4be3-854e-4fb7db03c7a7
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43204 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7/credentials null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  ExportConfigurationsImpl Successfully deleted batch voucher storage export configurations credentials with id: 6544eb9d-a1e4-4d81-a500-b299c8b76068
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43206 DELETE /batch-voucher-storage/export-configurations/6544eb9d-a1e4-4d81-a500-b299c8b76068/credentials null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43208 DELETE /batch-voucher-storage/export-configurations/26a4d92b-18ca-4be3-854e-4fb7db03c7a7 null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageExportConfigurationsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43210 DELETE /batch-voucher-storage/export-configurations/6544eb9d-a1e4-4d81-a500-b299c8b76068 null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43212 DELETE /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchGroupStorageBatchGroupsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43214 DELETE /batch-group-storage/batch-groups/20780f40-f2e5-4178-9918-107bc461a516 null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:30 [] [] [] [] INFO  ExportConfigCredentialsTest --- mod-invoice-storage Credentials get by id test: Invalid Credentials: bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurationsCredentialsById
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'exportConfigId') = 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa'    >>>WHERE (jsonb->>'exportConfigId') = 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa'
13:42:30 [] [diku] [] [mod_invoice_storage] WARN  ExportConfigurationsImpl Batch voucher storage export configurations credentials with id 'bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa' not found
13:42:30 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43216 GET /batch-voucher-storage/export-configurations/bad500aa-aaaa-500a-aaaa-aaaaaaaaaaaa/credentials null HTTP_1_1 404 9 1 tid=diku Not Found 
[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.364 s -- in org.folio.rest.impl.StorageTestSuite$ExportConfigCredentialsTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$BatchVoucherTestNested
13:42:30 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1225678282
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'isolated_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE isolated_mod_invoice_storage PASSWORD 'isolated' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE isolated_mod_invoice_storage SET search_path = "isolated_mod_invoice_storage";
  GRANT isolated_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA isolated_mod_invoice_storage AUTHORIZATION isolated_mod_invoice_storage;
END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'isolated_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE isolated_mod_invoice_storage PASSWORD 'isolated' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE isolated_mod_invoice_storage SET search_path = "isolated_mod_invoice_storage";
  GRANT isolated_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA isolated_mod_invoice_storage AUTHORIZATION isolated_mod_invoice_storage;
END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO isolated_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM isolated_mod_invoice_storage.rmb_internal);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO isolated_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM isolated_mod_invoice_storage.rmb_internal);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43218 POST /_/tenant  HTTP_1_1 201 409 46 tid=isolated Created 
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1859936813
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE isolated_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_larger,   combinefunc = isolated_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE isolated_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_larger,   combinefunc = isolated_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE isolated_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_smaller,   combinefunc = isolated_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE isolated_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_smaller,   combinefunc = isolated_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION isolated_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION isolated_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE isolated_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO isolated_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE isolated_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO isolated_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO isolated_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO isolated_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM isolated_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM isolated_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_groups_references();
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_groups_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_groups_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_groups_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_groups_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_groups_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON isolated_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON isolated_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_export_config_credentials_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_export_config_credentials_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.export_config_credentials_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.export_config_credentials_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON isolated_mod_invoice_storage.invoices (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON isolated_mod_invoice_storage.invoices (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoices_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoices_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoices_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoices_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoices_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoices_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE isolated_mod_invoice_storage.invoice_number TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE isolated_mod_invoice_storage.invoice_number TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON isolated_mod_invoice_storage.invoice_lines (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON isolated_mod_invoice_storage.invoice_lines (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoice_lines_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoice_lines_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoice_lines_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoice_lines_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoice_lines_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoice_lines_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON isolated_mod_invoice_storage.vouchers (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON isolated_mod_invoice_storage.vouchers (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON isolated_mod_invoice_storage.vouchers (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON isolated_mod_invoice_storage.vouchers (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_vouchers_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_vouchers_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.vouchers_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.vouchers_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_vouchers_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_vouchers_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE isolated_mod_invoice_storage.voucher_number OWNER TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE isolated_mod_invoice_storage.voucher_number OWNER TO isolated_mod_invoice_storage;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON isolated_mod_invoice_storage.voucher_lines (voucherId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON isolated_mod_invoice_storage.voucher_lines (voucherId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_voucher_lines_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_voucher_lines_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.voucher_lines_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.voucher_lines_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_voucher_lines_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_voucher_lines_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON isolated_mod_invoice_storage.documents (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON isolated_mod_invoice_storage.documents (invoiceId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_documents_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_documents_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.documents_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.documents_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_documents_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_documents_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON isolated_mod_invoice_storage.documents CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE isolated_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE isolated_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_vouchers_references();
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_vouchers_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:30 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO isolated_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO isolated_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:30 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM isolated_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM isolated_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM isolated_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM isolated_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:31 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "uuid-ossp" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM isolated_mod_invoice_storage.invoices
    )
    UPDATE isolated_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM isolated_mod_invoice_storage.invoices
    )
    UPDATE isolated_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM isolated_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM isolated_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM isolated_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM isolated_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM isolated_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'isolated_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'isolated_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM isolated_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'isolated_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'isolated_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA isolated_mod_invoice_storage TO isolated_mod_invoice_storage;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA isolated_mod_invoice_storage TO isolated_mod_invoice_storage;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:31 [] [isolated] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  TenantAPI            job cb562906-1c9b-4d90-b10b-ff9aeaf52892 completed
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43218 GET /_/tenant/cb562906-1c9b-4d90-b10b-ff9aeaf52892 wait=60000& HTTP_1_1 200 468 207 tid=isolated OK 
13:42:31 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:31 [] [] [] [] INFO  IsolatedTenantExtension Isolated tenant has been prepared
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant isolated is set: false
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       Using schema: isolated
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"isolated_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43220 POST /batch-group-storage/batch-groups null HTTP_1_1 201 370 15 tid=isolated Created 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43226 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=isolated Created 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVoucherExports
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43228 POST /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 201 578 4 tid=isolated Created 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43230 GET /batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15 null HTTP_1_1 200 1051 12 tid=isolated OK 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVouchersById
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Deletion of batch voucher exports completed
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Batch voucher exports with batch voucher id 35657479-83b9-4760-9c39-b58dcd02ee15 deleted
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id '35657479-83b9-4760-9c39-b58dcd02ee15' deleted
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  ResponseUtils        Batch vouchers {batchVoucherId=35657479-83b9-4760-9c39-b58dcd02ee15} and associated data were successfully deleted
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43236 DELETE /batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15 null HTTP_1_1 204 0 3 tid=isolated No Content 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43238 GET /batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15 null HTTP_1_1 404 9 1 tid=isolated Not Found 
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:31 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43240 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 404 9 1 tid=isolated Not Found 
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteTenantByOperationId
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Trying to delete tenant by operation id: cb562906-1c9b-4d90-b10b-ff9aeaf52892
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43242 DELETE /_/tenant/cb562906-1c9b-4d90-b10b-ff9aeaf52892  HTTP_1_1 204 0 14 tid=isolated No Content 
13:42:31 [] [] [] [] INFO  TenantApiTestUtil    tenant has been deleted
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1748990117
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS isolated_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='isolated_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE isolated_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:31 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='drop cascades to 65 other objects', detail='drop cascades to table rmb_internal
drop cascades to table rmb_job
drop cascades to table rmb_internal_index
drop cascades to table rmb_internal_analyze
drop cascades to function uuid_smaller(uuid,uuid)
drop cascades to function uuid_larger(uuid,uuid)
drop cascades to function next_uuid(uuid)
drop cascades to function max(uuid)
drop cascades to function min(uuid)
drop cascades to function count_estimate_smart2(bigint,bigint,text)
drop cascades to function count_estimate_default(text)
drop cascades to function count_estimate(text)
drop cascades to function upsert(text,uuid,anyelement)
drop cascades to function f_unaccent(text)
drop cascades to function get_tsvector(text)
drop cascades to function tsquery_and(text)
drop cascades to function tsquery_or(text)
drop cascades to function tsquery_phrase(text)
drop cascades to function normalize_digits(text)
drop cascades to function set_id_in_jsonb()
drop cascades to function concat_space_sql(text[])
drop cascades to function concat_array_object_values(jsonb,text)
drop cascades to function concat_array_object_values(jsonb,text,text,text)
drop cascades to function first_array_object_value(jsonb,text,text,text)
drop cascades to function concat_array_object(jsonb)
drop cascades to function rmb_internal_index(text,text,text,text)
drop cascades to table batch_groups
drop cascades to function batch_groups_set_md()
drop cascades to function set_batch_groups_md_json()
drop cascades to table batch_voucher_export_configs
drop cascades to function update_batch_voucher_export_configs_references()
drop cascades to function batch_voucher_export_configs_set_md()
drop cascades to function set_batch_voucher_export_configs_md_json()
drop cascades to table export_config_credentials
drop cascades to function update_export_config_credentials_references()
drop cascades to function export_config_credentials_set_md()
drop cascades to function set_export_config_credentials_md_json()
drop cascades to table invoices
drop cascades to function update_invoices_references()
drop cascades to function invoices_set_md()
drop cascades to function set_invoices_md_json()
drop cascades to sequence invoice_number
drop cascades to table invoice_lines
drop cascades to function update_invoice_lines_references()
drop cascades to function invoice_lines_set_md()
drop cascades to function set_invoice_lines_md_json()
drop cascades to table vouchers
drop cascades to function update_vouchers_references()
drop cascades to function vouchers_set_md()
drop cascades to function set_vouchers_md_json()
drop cascades to sequence voucher_number
drop cascades to table voucher_lines
drop cascades to function update_voucher_lines_references()
drop cascades to function voucher_lines_set_md()
drop cascades to function set_voucher_lines_md_json()
drop cascades to table documents
drop cascades to function update_documents_references()
drop cascades to function documents_set_md()
drop cascades to function set_documents_md_json()
drop cascades to table batch_vouchers
drop cascades to table batch_voucher_exports
drop cascades to function update_batch_voucher_exports_references()
drop cascades to function batch_voucher_exports_set_md()
drop cascades to function set_batch_voucher_exports_md_json()
drop cascades to function update_invoices_with_po_numbers(jsonb)', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE"
PL/pgSQL function inline_code_block line 5 at SQL statement', file='dependency.c', line='1214', routine='reportDependentObjects', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS isolated_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='isolated_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE isolated_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:31 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43244 POST /_/tenant  HTTP_1_1 204 0 57 tid=isolated No Content 
13:42:31 [] [] [] [] INFO  IsolatedTenantExtension Isolated tenant has been deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43246 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43248 GET /batch-voucher-storage/batch-vouchers/1133cddd-ef47-4dd7-bf2f-e605140defac null HTTP_1_1 200 1051 2 tid=diku OK 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43250 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43252 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVouchersById
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Deletion of batch voucher exports completed
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Batch voucher exports with batch voucher id 942e08a2-b0e9-4914-a96d-77fcba4444c6 deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id '942e08a2-b0e9-4914-a96d-77fcba4444c6' deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  ResponseUtils        Batch vouchers {batchVoucherId=942e08a2-b0e9-4914-a96d-77fcba4444c6} and associated data were successfully deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43254 DELETE /batch-voucher-storage/batch-vouchers/942e08a2-b0e9-4914-a96d-77fcba4444c6 null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43256 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVouchersById
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Deletion of batch voucher exports completed
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportsByBatchVoucherId:: Batch voucher exports with batch voucher id 12345678-83b9-1234-9c39-b58dcd02ee10 deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] WARN  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id '12345678-83b9-1234-9c39-b58dcd02ee10' not found
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR ResponseUtils        Batch vouchers io.vertx.ext.web.handler.HttpException: Not Found {batchVoucherId=12345678-83b9-1234-9c39-b58dcd02ee10} deleted
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43258 DELETE /batch-voucher-storage/batch-vouchers/12345678-83b9-1234-9c39-b58dcd02ee10 null HTTP_1_1 404 9 3 tid=diku Not Found 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43260 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 4 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43262 GET /batch-voucher-storage/batch-vouchers/12345678-83b9-1234-9c39-b58dcd02ee10 null HTTP_1_1 404 9 2 tid=diku Not Found 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43264 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 5 tid=diku Created 
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR RestRouting          null
java.lang.reflect.InvocationTargetException: null
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[?:?]
	at org.folio.rest.RestRouting.invoke(RestRouting.java:447) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.RestRouting.lambda$21(RestRouting.java:708) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:252) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.http.impl.HttpEventHandler.handleEnd(HttpEventHandler.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.http.impl.Http1xServerRequest.handleEnd(Http1xServerRequest.java:592) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.ContextImpl.lambda$execute$4(ContextImpl.java:315) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: jakarta.validation.ValidationException: 
 'id' parameter is incorrect. parameter value {38a8c92-9f45-4a86-98c3-76a20f1615ee} is not valid: must match "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
	at org.folio.rest.annotations.RestValidator.buildValidationException(RestValidator.aj:80) ~[domain-models-api-aspects-35.3.0.jar:?]
	at org.folio.rest.annotations.RestValidator.ajc$before$org_folio_rest_annotations_RestValidator$1$1872e94e(RestValidator.aj:49) ~[domain-models-api-aspects-35.3.0.jar:?]
	at org.folio.rest.impl.BatchVouchersImpl.getBatchVoucherStorageBatchVouchersById(BatchVouchersImpl.java:40) ~[classes/:?]
	... 17 more
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43266 GET /batch-voucher-storage/batch-vouchers/38a8c92-9f45-4a86-98c3-76a20f1615ee null HTTP_1_1 400 202 -1 tid=null Bad Request 
 'id' parameter is incorrect. parameter value {38a8c92-9f45-4a86-98c3-76a20f1615ee} is not valid: must match "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:31 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43268 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 3 tid=diku Created 
13:42:31 [] [] [] [] ERROR RestRouting          HV000116: The object to be validated must not be null.
java.lang.IllegalArgumentException: HV000116: The object to be validated must not be null.
	at org.hibernate.validator.internal.util.Contracts.assertNotNull(Contracts.java:44) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]
	at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:151) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]
	at org.folio.rest.RestRouting.isValidRequest(RestRouting.java:139) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.RestRouting.parseNonAnnotated(RestRouting.java:355) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.RestRouting.parseParams1(RestRouting.java:403) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.RestRouting.parseParams(RestRouting.java:427) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.RestRouting.lambda$21(RestRouting.java:703) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:270) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:252) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.http.impl.HttpEventHandler.handleEnd(HttpEventHandler.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.http.impl.Http1xServerRequest.handleEnd(Http1xServerRequest.java:592) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.ContextImpl.lambda$execute$4(ContextImpl.java:315) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
13:42:31 [] [] [] [] INFO  LogUtil              127.0.0.1:43270 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 400 54 -1 tid=null Bad Request HV000116: The object to be validated must not be null.
[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.873 s -- in org.folio.rest.impl.StorageTestSuite$BatchVoucherTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$OrderStorageServiceTestNested
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.180 s -- in org.folio.rest.impl.StorageTestSuite$OrderStorageServiceTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$BatchVoucherExportsTestNested
13:42:32 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1225678282
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'isolated_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE isolated_mod_invoice_storage PASSWORD 'isolated' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE isolated_mod_invoice_storage SET search_path = "isolated_mod_invoice_storage";
  GRANT isolated_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA isolated_mod_invoice_storage AUTHORIZATION isolated_mod_invoice_storage;
END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'isolated_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE isolated_mod_invoice_storage PASSWORD 'isolated' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE isolated_mod_invoice_storage SET search_path = "isolated_mod_invoice_storage";
  GRANT isolated_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA isolated_mod_invoice_storage AUTHORIZATION isolated_mod_invoice_storage;
END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO isolated_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM isolated_mod_invoice_storage.rmb_internal);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO isolated_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM isolated_mod_invoice_storage.rmb_internal);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43272 POST /_/tenant  HTTP_1_1 201 409 44 tid=isolated Created 
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1859936813
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO isolated_mod_invoice_storage;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO isolated_mod_invoice_storage;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE isolated_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_larger,   combinefunc = isolated_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE isolated_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_larger,   combinefunc = isolated_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE isolated_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_smaller,   combinefunc = isolated_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE isolated_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = isolated_mod_invoice_storage.uuid_smaller,   combinefunc = isolated_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION isolated_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION isolated_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = isolated_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE isolated_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO isolated_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE isolated_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO isolated_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(isolated_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function isolated_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function isolated_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO isolated_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM isolated_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO isolated_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM isolated_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM isolated_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON isolated_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_groups_references();
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_groups_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_groups_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_groups_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_groups_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_groups_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON isolated_mod_invoice_storage.batch_groups CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON isolated_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON isolated_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_export_config_credentials_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_export_config_credentials_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.export_config_credentials_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.export_config_credentials_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "isolated_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON isolated_mod_invoice_storage.export_config_credentials CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON isolated_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON isolated_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON isolated_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON isolated_mod_invoice_storage.invoices (batchGroupId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON isolated_mod_invoice_storage.invoices (batchGroupId);
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoices_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoices_references();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoices_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoices_set_md();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoices_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoices_md_json();
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "isolated_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON isolated_mod_invoice_storage.invoices CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:32 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE isolated_mod_invoice_storage.invoice_number TO isolated_mod_invoice_storage;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE isolated_mod_invoice_storage.invoice_number TO isolated_mod_invoice_storage;
13:42:32 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON isolated_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON isolated_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON isolated_mod_invoice_storage.invoice_lines (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON isolated_mod_invoice_storage.invoice_lines (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoice_lines_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_invoice_lines_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoice_lines_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.invoice_lines_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoice_lines_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_invoice_lines_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "isolated_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON isolated_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON isolated_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON isolated_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON isolated_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON isolated_mod_invoice_storage.vouchers (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON isolated_mod_invoice_storage.vouchers (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON isolated_mod_invoice_storage.vouchers (batchGroupId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON isolated_mod_invoice_storage.vouchers (batchGroupId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_vouchers_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_vouchers_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.vouchers_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.vouchers_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_vouchers_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_vouchers_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "isolated_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS isolated_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE isolated_mod_invoice_storage.voucher_number OWNER TO isolated_mod_invoice_storage;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE isolated_mod_invoice_storage.voucher_number OWNER TO isolated_mod_invoice_storage;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON isolated_mod_invoice_storage.voucher_lines (voucherId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON isolated_mod_invoice_storage.voucher_lines (voucherId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_voucher_lines_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_voucher_lines_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.voucher_lines_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.voucher_lines_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_voucher_lines_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_voucher_lines_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "isolated_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON isolated_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON isolated_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON isolated_mod_invoice_storage.documents (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON isolated_mod_invoice_storage.documents (invoiceId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_documents_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_documents_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.documents_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.documents_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_documents_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_documents_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "isolated_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON isolated_mod_invoice_storage.documents CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE isolated_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE isolated_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_vouchers_references();
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.update_batch_vouchers_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON isolated_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS isolated_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE isolated_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON isolated_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON isolated_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON isolated_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE isolated_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "isolated_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON isolated_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS isolated_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM isolated_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE isolated_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO isolated_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO isolated_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM isolated_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM isolated_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM isolated_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM isolated_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "uuid-ossp" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM isolated_mod_invoice_storage.invoices
    )
    UPDATE isolated_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION isolated_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM isolated_mod_invoice_storage.invoices
    )
    UPDATE isolated_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM isolated_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM isolated_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON isolated_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM isolated_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM isolated_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM isolated_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'isolated_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'isolated_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM isolated_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'isolated_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'isolated_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA isolated_mod_invoice_storage TO isolated_mod_invoice_storage;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA isolated_mod_invoice_storage TO isolated_mod_invoice_storage;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE isolated_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE isolated_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:33 [] [isolated] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  TenantAPI            job 2cf2640b-5b36-4f17-acd6-6424d4d53a2a completed
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43272 GET /_/tenant/2cf2640b-5b36-4f17-acd6-6424d4d53a2a wait=60000& HTTP_1_1 200 468 229 tid=isolated OK 
13:42:33 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:33 [] [] [] [] INFO  IsolatedTenantExtension Isolated tenant has been prepared
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant isolated is set: false
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       Using schema: isolated
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"isolated_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43274 POST /batch-group-storage/batch-groups null HTTP_1_1 201 370 17 tid=isolated Created 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVouchers
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43280 POST /batch-voucher-storage/batch-vouchers null HTTP_1_1 201 1051 5 tid=isolated Created 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postBatchVoucherStorageBatchVoucherExports
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43282 POST /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 201 578 5 tid=isolated Created 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43284 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 200 578 12 tid=isolated OK 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking deleteBatchVoucherStorageBatchVoucherExportsById
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService getAssociatedBatchVoucherIdBatch:: voucher id '35657479-83b9-4760-9c39-b58dcd02ee15' retrieved for batch voucher export with id
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherExportsService deleteBatchVoucherExportById:: Deletion of batch voucher export with id '566c9156-e52f-4597-9fee-5ddac91d14fb' completed
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] ERROR BatchVoucherExportsService Failed to delete batch voucher export with id: 566c9156-e52f-4597-9fee-5ddac91d14fb 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: deletion of batch voucher completed
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  BatchVoucherService  deleteBatchVoucherById:: Batch voucher with id '35657479-83b9-4760-9c39-b58dcd02ee15' deleted
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  ResponseUtils        Batch voucher exports {batchVoucherExportId=566c9156-e52f-4597-9fee-5ddac91d14fb, batchVoucherId=35657479-83b9-4760-9c39-b58dcd02ee15} and associated data were successfully deleted
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43290 DELETE /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 204 0 6 tid=isolated No Content 
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExportsById
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43292 GET /batch-voucher-storage/batch-voucher-exports/566c9156-e52f-4597-9fee-5ddac91d14fb null HTTP_1_1 404 9 1 tid=isolated Not Found 
Request method:	GET
Request URI:	http://localhost:60069/batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	id=35657479-83b9-4760-9c39-b58dcd02ee15
Headers:		X-Okapi-Tenant=isolated
				X-Okapi-User-id=28d0fb04-d137-11e8-a8d5-f2801f1b9fd1
				X-Okapi-Token=eyJhbGciOiJIUzI1NiJ9
				Accept=*/*
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVouchersById
13:42:33 [] [isolated] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43294 GET /batch-voucher-storage/batch-vouchers/35657479-83b9-4760-9c39-b58dcd02ee15 null HTTP_1_1 404 9 2 tid=isolated Not Found 
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteTenantByOperationId
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Trying to delete tenant by operation id: 2cf2640b-5b36-4f17-acd6-6424d4d53a2a
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43296 DELETE /_/tenant/2cf2640b-5b36-4f17-acd6-6424d4d53a2a  HTTP_1_1 204 0 7 tid=isolated No Content 
13:42:33 [] [] [] [] INFO  TenantApiTestUtil    tenant has been deleted
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1748990117
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS isolated_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='isolated_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE isolated_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='drop cascades to 65 other objects', detail='drop cascades to table rmb_internal
drop cascades to table rmb_job
drop cascades to table rmb_internal_index
drop cascades to table rmb_internal_analyze
drop cascades to function uuid_smaller(uuid,uuid)
drop cascades to function uuid_larger(uuid,uuid)
drop cascades to function next_uuid(uuid)
drop cascades to function max(uuid)
drop cascades to function min(uuid)
drop cascades to function count_estimate_smart2(bigint,bigint,text)
drop cascades to function count_estimate_default(text)
drop cascades to function count_estimate(text)
drop cascades to function upsert(text,uuid,anyelement)
drop cascades to function f_unaccent(text)
drop cascades to function get_tsvector(text)
drop cascades to function tsquery_and(text)
drop cascades to function tsquery_or(text)
drop cascades to function tsquery_phrase(text)
drop cascades to function normalize_digits(text)
drop cascades to function set_id_in_jsonb()
drop cascades to function concat_space_sql(text[])
drop cascades to function concat_array_object_values(jsonb,text)
drop cascades to function concat_array_object_values(jsonb,text,text,text)
drop cascades to function first_array_object_value(jsonb,text,text,text)
drop cascades to function concat_array_object(jsonb)
drop cascades to function rmb_internal_index(text,text,text,text)
drop cascades to table batch_groups
drop cascades to function batch_groups_set_md()
drop cascades to function set_batch_groups_md_json()
drop cascades to table batch_voucher_export_configs
drop cascades to function update_batch_voucher_export_configs_references()
drop cascades to function batch_voucher_export_configs_set_md()
drop cascades to function set_batch_voucher_export_configs_md_json()
drop cascades to table export_config_credentials
drop cascades to function update_export_config_credentials_references()
drop cascades to function export_config_credentials_set_md()
drop cascades to function set_export_config_credentials_md_json()
drop cascades to table invoices
drop cascades to function update_invoices_references()
drop cascades to function invoices_set_md()
drop cascades to function set_invoices_md_json()
drop cascades to sequence invoice_number
drop cascades to table invoice_lines
drop cascades to function update_invoice_lines_references()
drop cascades to function invoice_lines_set_md()
drop cascades to function set_invoice_lines_md_json()
drop cascades to table vouchers
drop cascades to function update_vouchers_references()
drop cascades to function vouchers_set_md()
drop cascades to function set_vouchers_md_json()
drop cascades to sequence voucher_number
drop cascades to table voucher_lines
drop cascades to function update_voucher_lines_references()
drop cascades to function voucher_lines_set_md()
drop cascades to function set_voucher_lines_md_json()
drop cascades to table documents
drop cascades to function update_documents_references()
drop cascades to function documents_set_md()
drop cascades to function set_documents_md_json()
drop cascades to table batch_vouchers
drop cascades to table batch_voucher_exports
drop cascades to function update_batch_voucher_exports_references()
drop cascades to function batch_voucher_exports_set_md()
drop cascades to function set_batch_voucher_exports_md_json()
drop cascades to function update_invoices_with_po_numbers(jsonb)', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE"
PL/pgSQL function inline_code_block line 5 at SQL statement', file='dependency.c', line='1214', routine='reportDependentObjects', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS isolated_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS isolated_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='isolated_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE isolated_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:33 [] [isolated] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43298 POST /_/tenant  HTTP_1_1 204 0 52 tid=isolated No Content 
13:42:33 [] [] [] [] INFO  IsolatedTenantExtension Isolated tenant has been deleted
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.634 s -- in org.folio.rest.impl.StorageTestSuite$BatchVoucherExportsTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$TenantSampleDataTestNested
13:42:33 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:33 [] [] [] [] INFO  PostgresClient       Executing multiple statements with id 985188415
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE ROLE new_tenant_mod_finance_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE ROLE new_tenant_mod_finance_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  GRANT new_tenant_mod_finance_storage TO CURRENT_USER;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  GRANT new_tenant_mod_finance_storage TO CURRENT_USER;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE SCHEMA new_tenant_mod_finance_storage AUTHORIZATION new_tenant_mod_finance_storage;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE SCHEMA new_tenant_mod_finance_storage AUTHORIZATION new_tenant_mod_finance_storage;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_finance_storage.fund (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_finance_storage.fund (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_finance_storage.transaction (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_finance_storage.transaction (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       Executing multiple statements with id 2075009375
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE ROLE new_tenant_mod_orders_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE ROLE new_tenant_mod_orders_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  GRANT new_tenant_mod_orders_storage TO CURRENT_USER;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  GRANT new_tenant_mod_orders_storage TO CURRENT_USER;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE SCHEMA new_tenant_mod_orders_storage AUTHORIZATION new_tenant_mod_orders_storage;
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE SCHEMA new_tenant_mod_orders_storage AUTHORIZATION new_tenant_mod_orders_storage;
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_orders_storage.purchase_order (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_orders_storage.purchase_order (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_orders_storage.order_invoice_relationship (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_orders_storage.order_invoice_relationship (   id UUID PRIMARY KEY,   jsonb JSONB NOT NULL );
13:42:33 [] [] [] [] INFO  TenantSampleDataTest load sample data
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1838719754
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'partial_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE partial_tenant_mod_invoice_storage PASSWORD 'partial_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE partial_tenant_mod_invoice_storage SET search_path = "partial_tenant_mod_invoice_storage";
  GRANT partial_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA partial_tenant_mod_invoice_storage AUTHORIZATION partial_tenant_mod_invoice_storage;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'partial_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE partial_tenant_mod_invoice_storage PASSWORD 'partial_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE partial_tenant_mod_invoice_storage SET search_path = "partial_tenant_mod_invoice_storage";
  GRANT partial_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA partial_tenant_mod_invoice_storage AUTHORIZATION partial_tenant_mod_invoice_storage;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43304 POST /_/tenant  HTTP_1_1 201 414 35 tid=partial_tenant Created 
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 703414496
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE partial_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = partial_tenant_mod_invoice_storage.uuid_larger,   combinefunc = partial_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE partial_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = partial_tenant_mod_invoice_storage.uuid_larger,   combinefunc = partial_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE partial_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = partial_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = partial_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE partial_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = partial_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = partial_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON partial_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON partial_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON partial_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON partial_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE partial_tenant_mod_invoice_storage.invoice_number TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE partial_tenant_mod_invoice_storage.invoice_number TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON partial_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS partial_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS partial_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE partial_tenant_mod_invoice_storage.voucher_number OWNER TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE partial_tenant_mod_invoice_storage.voucher_number OWNER TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON partial_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON partial_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON partial_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE partial_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE partial_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM partial_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE partial_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM partial_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE partial_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM partial_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE partial_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM partial_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE partial_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM partial_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM partial_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM partial_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM partial_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "uuid-ossp" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM partial_tenant_mod_invoice_storage.invoices
    )
    UPDATE partial_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM partial_tenant_mod_invoice_storage.invoices
    )
    UPDATE partial_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant partial_tenant is set: false
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Using schema: partial_tenant
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"partial_tenant_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43306 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 404 9 13 tid=partial_tenant Not Found 
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43306 POST /batch-group-storage/batch-groups null HTTP_1_1 201 242 14 tid=partial_tenant Created 
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job ff01609f-7620-4986-9156-7eca899e9a42 completed
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43304 GET /_/tenant/ff01609f-7620-4986-9156-7eca899e9a42 wait=60000& HTTP_1_1 200 473 295 tid=partial_tenant OK 
13:42:33 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43316 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 5 tid=partial_tenant OK 
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 518112389
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_job" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43318 POST /_/tenant  HTTP_1_1 201 413 25 tid=partial_tenant Created 
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1703961700
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_index" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_analyze" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:33 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:33 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_export_configs" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_export_configs_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "exportconfigid" of relation "export_config_credentials" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "export_config_credentials_exportconfigid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "invoices" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "invoice_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_lines_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "voucherid" of relation "voucher_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "voucher_lines_voucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "documents" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "documents_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchvoucherid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchvoucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_date_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_num_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_status_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_total_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43320 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 200 242 2 tid=partial_tenant OK 
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking putBatchGroupStorageBatchGroupsById
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43320 PUT /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 204 0 4 tid=partial_tenant No Content 
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job 6c2e08ef-1c30-4e9d-8a67-6f7227e2ebcc completed
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43318 GET /_/tenant/6c2e08ef-1c30-4e9d-8a67-6f7227e2ebcc wait=60000& HTTP_1_1 200 472 152 tid=partial_tenant OK 
13:42:34 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for INVOICE
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43322 GET /invoice-storage/invoices null HTTP_1_1 200 44 3 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "invoices": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for INVOICE_LINES
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43324 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 2 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "invoiceLines": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for VOUCHER
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43326 GET /voucher-storage/vouchers null HTTP_1_1 200 44 3 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "vouchers": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for VOUCHER_LINES
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43328 GET /voucher-storage/voucher-lines null HTTP_1_1 200 48 2 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "voucherLines": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_GROUP
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43330 GET /batch-group-storage/batch-groups null HTTP_1_1 200 423 4 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 279

{
    "batchGroups": [
        {
            "id": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "name": "FOLIO",
            "description": "System default"
        },
        {
            "id": "cd592659-77aa-4eb3-ac34-c9a4657bb20f",
            "name": "Amherst (AC)",
            "description": "Amherst College",
            "metadata": {
                "createdDate": "2024-10-22T13:42:33.831+00:00",
                "updatedDate": "2024-10-22T13:42:34.120+00:00"
            }
        }
    ],
    "totalRecords": 2
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_VOUCHER_EXPORT_CONFIGS
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43332 GET /batch-voucher-storage/export-configurations null HTTP_1_1 200 49 3 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 70

{
    "exportConfigs": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_VOUCHER_EXPORTS
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43334 GET /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 200 55 3 tid=partial_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 76

{
    "batchVoucherExports": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:34 [] [] [] [] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:34 [] [] [] [] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:34 [] [] [] [] INFO  PostgresClient       Shared pool for tenant new_tenant is set: false
13:42:34 [] [] [] [] INFO  PostgresClient       Using schema: new_tenant
13:42:34 [] [] [] [] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"new_tenant_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteTenantByOperationId
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Trying to delete tenant by operation id: 6c2e08ef-1c30-4e9d-8a67-6f7227e2ebcc
13:42:34 [] [new_tenant] [] [mod_invoice_storage] ERROR TenantAPI            Tenant not found new_tenant
io.vertx.core.impl.NoStackTraceThrowable: Tenant not found new_tenant
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43336 DELETE /_/tenant/6c2e08ef-1c30-4e9d-8a67-6f7227e2ebcc  HTTP_1_1 404 27 3 tid=new_tenant Not Found 
13:42:34 [] [] [] [] INFO  TenantApiTestUtil    tenant has been deleted
13:42:34 [] [] [] [] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:34 [] [] [] [] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:34 [] [] [] [] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:34 [] [] [] [] INFO  PostgresClient       Shared pool for tenant new_tenant is set: false
13:42:34 [] [] [] [] INFO  PostgresClient       Using schema: new_tenant
13:42:34 [] [] [] [] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"new_tenant_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest -- create a tenant with no sample data --
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id -1599531638
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'new_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE new_tenant_mod_invoice_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE new_tenant_mod_invoice_storage SET search_path = "new_tenant_mod_invoice_storage";
  GRANT new_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA new_tenant_mod_invoice_storage AUTHORIZATION new_tenant_mod_invoice_storage;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'new_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE new_tenant_mod_invoice_storage PASSWORD 'new_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE new_tenant_mod_invoice_storage SET search_path = "new_tenant_mod_invoice_storage";
  GRANT new_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA new_tenant_mod_invoice_storage AUTHORIZATION new_tenant_mod_invoice_storage;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO new_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM new_tenant_mod_invoice_storage.rmb_internal);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO new_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM new_tenant_mod_invoice_storage.rmb_internal);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43338 POST /_/tenant  HTTP_1_1 201 411 34 tid=new_tenant Created 
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 193369853
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE new_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = new_tenant_mod_invoice_storage.uuid_larger,   combinefunc = new_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE new_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = new_tenant_mod_invoice_storage.uuid_larger,   combinefunc = new_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE new_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = new_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = new_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE new_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = new_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = new_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION new_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION new_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE new_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO new_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE new_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO new_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO new_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO new_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM new_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM new_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON new_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON new_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON new_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON new_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON new_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON new_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON new_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON new_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON new_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON new_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON new_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS new_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS new_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE new_tenant_mod_invoice_storage.invoice_number TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE new_tenant_mod_invoice_storage.invoice_number TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON new_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON new_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON new_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON new_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON new_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON new_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON new_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON new_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON new_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON new_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON new_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON new_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON new_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS new_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS new_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE new_tenant_mod_invoice_storage.voucher_number OWNER TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE new_tenant_mod_invoice_storage.voucher_number OWNER TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON new_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON new_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON new_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON new_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON new_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON new_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON new_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON new_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE new_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE new_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM new_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE new_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM new_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE new_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM new_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE new_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM new_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE new_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO new_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO new_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM new_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM new_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM new_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM new_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "uuid-ossp" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM new_tenant_mod_invoice_storage.invoices
    )
    UPDATE new_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM new_tenant_mod_invoice_storage.invoices
    )
    UPDATE new_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM new_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM new_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM new_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'new_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'new_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM new_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'new_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'new_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA new_tenant_mod_invoice_storage TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA new_tenant_mod_invoice_storage TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job ebaf0850-072b-4256-91f3-50f69083ec70 completed
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43338 GET /_/tenant/ebaf0850-072b-4256-91f3-50f69083ec70 wait=60000& HTTP_1_1 200 470 217 tid=new_tenant OK 
13:42:34 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:34 [] [] [] [] INFO  TenantSampleDataTest -- upgrade the tenant with sample data, so that it will be inserted now --
13:42:34 [] [] [] [] INFO  TenantSampleDataTest upgrading Module with sample
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id -1818076442
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO new_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM new_tenant_mod_invoice_storage.rmb_internal);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO new_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM new_tenant_mod_invoice_storage.rmb_internal);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_job" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43340 POST /_/tenant  HTTP_1_1 201 410 18 tid=new_tenant Created 
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id -1345031390
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_index" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS new_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_analyze" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION new_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION new_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = new_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE new_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO new_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE new_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO new_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(new_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function new_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function new_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO new_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO new_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM new_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM new_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_export_configs" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_export_configs_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "exportconfigid" of relation "export_config_credentials" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON new_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "export_config_credentials_exportconfigid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON new_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON new_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON new_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON new_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON new_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "invoices" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON new_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON new_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoices_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoices_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoices CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON new_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON new_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "invoice_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON new_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_lines_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON new_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON new_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON new_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON new_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON new_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON new_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON new_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON new_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.vouchers_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "voucherid" of relation "voucher_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON new_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "voucher_lines_voucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON new_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON new_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "documents" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON new_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "documents_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON new_tenant_mod_invoice_storage.documents (invoiceId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_documents_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.documents_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_documents_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON new_tenant_mod_invoice_storage.documents CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchvoucherid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE new_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchvoucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON new_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON new_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON new_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE new_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "new_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON new_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS new_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO new_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO new_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM new_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM new_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_date_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_num_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_status_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_total_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON new_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM new_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM new_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'new_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'new_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM new_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'new_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'new_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA new_tenant_mod_invoice_storage TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA new_tenant_mod_invoice_storage TO new_tenant_mod_invoice_storage;
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE new_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE new_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:34 [] [new_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroupsById
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43342 GET /batch-group-storage/batch-groups/cd592659-77aa-4eb3-ac34-c9a4657bb20f null HTTP_1_1 404 9 11 tid=new_tenant Not Found 
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postBatchGroupStorageBatchGroups
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43342 POST /batch-group-storage/batch-groups null HTTP_1_1 201 242 14 tid=new_tenant Created 
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job 9f8b0be4-cb91-4d38-b9d2-ec1b39d79887 completed
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43340 GET /_/tenant/9f8b0be4-cb91-4d38-b9d2-ec1b39d79887 wait=60000& HTTP_1_1 200 469 177 tid=new_tenant OK 
13:42:34 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for INVOICE
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43352 GET /invoice-storage/invoices null HTTP_1_1 200 44 4 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "invoices": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for INVOICE_LINES
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43354 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 3 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "invoiceLines": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for VOUCHER
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43356 GET /voucher-storage/vouchers null HTTP_1_1 200 44 3 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "vouchers": [
        
    ],
    "totalRecords": 0
}
13:42:34 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for VOUCHER_LINES
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:34 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43358 GET /voucher-storage/voucher-lines null HTTP_1_1 200 48 2 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "voucherLines": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_GROUP
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43360 GET /batch-group-storage/batch-groups null HTTP_1_1 200 423 4 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 274

{
    "batchGroups": [
        {
            "id": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "name": "FOLIO",
            "description": "System default"
        },
        {
            "id": "cd592659-77aa-4eb3-ac34-c9a4657bb20f",
            "name": "Amherst (AC)",
            "description": "Amherst College",
            "metadata": {
                "createdDate": "2024-10-22T13:42:34.881+00:00",
                "updatedDate": "2024-10-22T13:42:34.881+00:00"
            }
        }
    ],
    "totalRecords": 2
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_VOUCHER_EXPORT_CONFIGS
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43362 GET /batch-voucher-storage/export-configurations null HTTP_1_1 200 49 3 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 70

{
    "exportConfigs": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected quantity for BATCH_VOUCHER_EXPORTS
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43364 GET /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 200 55 2 tid=new_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 76

{
    "batchVoucherExports": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest -- upgrade the tenant again with no sample data, so the previously inserted data stays in tact --
13:42:35 [] [] [] [] INFO  TenantSampleDataTest upgrading Module without sample data
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 518112389
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "mod_invoice_storage-5.9.0-SNAPSHOT"}'::jsonb WHERE NOT EXISTS (SELECT * FROM partial_tenant_mod_invoice_storage.rmb_internal);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_job" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43366 POST /_/tenant  HTTP_1_1 201 415 20 tid=partial_tenant Created 
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1703961700
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO partial_tenant_mod_invoice_storage;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_index" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS partial_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "rmb_internal_analyze" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='parse_utilcmd.c', line='207', routine='transformCreateStmt', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = partial_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE partial_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO partial_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(partial_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function partial_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO partial_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM partial_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_export_configs" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_export_configs_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "exportconfigid" of relation "export_config_credentials" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "export_config_credentials_exportconfigid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON partial_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON partial_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON partial_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON partial_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "invoices" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoices_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoices_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON partial_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON partial_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "invoice_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_lines_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON partial_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON partial_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON partial_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON partial_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "vouchers" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "vouchers_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_vouchers_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.vouchers_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "voucherid" of relation "voucher_lines" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "voucher_lines_voucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON partial_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON partial_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "invoiceid" of relation "documents" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "documents_invoiceid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON partial_tenant_mod_invoice_storage.documents (invoiceId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_documents_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.documents_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_documents_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON partial_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchgroupid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchgroupid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42701', message='column "batchvoucherid" of relation "batch_voucher_exports" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='7239', routine='check_for_column_name_collision', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE partial_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "batch_voucher_exports_batchvoucherid_idx" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON partial_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON partial_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON partial_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE partial_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "partial_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON partial_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS partial_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO partial_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM partial_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_date_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoice_num_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_status_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42P07', message='relation "invoices_invoice_total_sort" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='index.c', line='877', routine='index_create', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON partial_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM partial_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM partial_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'partial_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'partial_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA partial_tenant_mod_invoice_storage TO partial_tenant_mod_invoice_storage;
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE partial_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job cf3080de-4d6e-49fd-b9e4-80abec67951f completed
13:42:35 [] [partial_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43366 GET /_/tenant/cf3080de-4d6e-49fd-b9e4-80abec67951f wait=60000& HTTP_1_1 200 474 146 tid=partial_tenant OK 
13:42:35 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:35 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:35 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43368 GET /invoice-storage/invoices null HTTP_1_1 200 2634 4 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 856

{
    "invoices": [
        {
            "id": "6b8bc989-834d-4a14-945b-4c5442ae09af",
            "accountingCode": "3456",
            "adjustments": [
                {
                    "description": "Sales Tax",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        {
                            "code": "USHIST",
                            "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                            "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                            "distributionType": "percentage",
                            "value": 100.0
                        }
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Percentage",
                    "value": 5.0
                }
            ],
            "adjustmentsTotal": 6.0,
            "approvedBy": "b72a28f6-04fc-489f-be18-ad53a3a64f67",
            "approvalDate": "2019-05-20T00:00:00.000+00:00",
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exportToAccounting": false,
            "folioInvoiceNo": "12345",
            "invoiceDate": "2019-05-18T00:00:00.000+00:00",
            "note": "Some note",
            "paymentTerms": "Payment in Advance",
            "paymentMethod": "EFT",
            "status": "Paid",
            "source": "API",
            "subTotal": 20.0,
            "total": 26.0,
            "vendorInvoiceNo": "JU57851",
            "voucherNumber": "578",
            "poNumbers": [
                "36547"
            ],
            "vendorId": "13fb64dc-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.193+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.193+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        },
        {
            "id": "07bb89be-dd4a-42f8-bbd0-a648e14bac5d",
            "accountingCode": "3456",
            "adjustments": [
                
            ],
            "adjustmentsTotal": 0.0,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exportToAccounting": false,
            "folioInvoiceNo": "45723",
            "invoiceDate": "2018-07-20T00:00:00.000+00:00",
            "paymentMethod": "EFT",
            "status": "Cancelled",
            "source": "API",
            "subTotal": 3000.0,
            "total": 3000.0,
            "vendorInvoiceNo": "DU10938",
            "voucherNumber": "452",
            "poNumbers": [
                
            ],
            "vendorId": "13fb64dc-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.209+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.209+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 2
}
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteTenantByOperationId
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Trying to delete tenant by operation id: cf3080de-4d6e-49fd-b9e4-80abec67951f
13:42:35 [] [new_tenant] [] [mod_invoice_storage] ERROR TenantAPI            Job not found cf3080de-4d6e-49fd-b9e4-80abec67951f
io.vertx.core.impl.NoStackTraceThrowable: Job not found cf3080de-4d6e-49fd-b9e4-80abec67951f
13:42:35 [] [new_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43370 DELETE /_/tenant/cf3080de-4d6e-49fd-b9e4-80abec67951f  HTTP_1_1 404 50 7 tid=new_tenant Not Found 
13:42:35 [] [] [] [] INFO  TenantApiTestUtil    tenant has been deleted
13:42:35 [] [] [] [] INFO  TenantSampleDataTest upgrading Module for non existed tenant
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1163619922
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'no_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE no_tenant_mod_invoice_storage PASSWORD 'no_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE no_tenant_mod_invoice_storage SET search_path = "no_tenant_mod_invoice_storage";
  GRANT no_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA no_tenant_mod_invoice_storage AUTHORIZATION no_tenant_mod_invoice_storage;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  PERFORM FROM pg_catalog.pg_roles WHERE rolname = 'no_tenant_mod_invoice_storage';
  IF FOUND THEN
    RETURN;
  END IF;
  CREATE ROLE no_tenant_mod_invoice_storage PASSWORD 'no_tenant' NOSUPERUSER NOCREATEDB INHERIT LOGIN;
  ALTER ROLE no_tenant_mod_invoice_storage SET search_path = "no_tenant_mod_invoice_storage";
  GRANT no_tenant_mod_invoice_storage TO CURRENT_USER;
  CREATE SCHEMA no_tenant_mod_invoice_storage AUTHORIZATION no_tenant_mod_invoice_storage;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "unaccent" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public"
PL/pgSQL function inline_code_block line 23 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "pg_trgm" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public"
PL/pgSQL function inline_code_block line 24 at SQL statement', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock, otherwise concurrent installs running
  -- 'CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public'
  -- in parallel may fail with
  -- 'ERROR: duplicate key value violates unique constraint "pg_extension_name_index" (23505)'
  -- https://github.com/greenplum-db/gpdb/issues/4601
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);

  BEGIN
    -- This only succeeds if show_trgm, a pg_trgm function,
    -- has been loaded into public schema.
    PERFORM public.show_trgm('a');
  EXCEPTION
    WHEN undefined_function THEN
      BEGIN
        ALTER EXTENSION pg_trgm SET SCHEMA public;
      EXCEPTION
        WHEN undefined_object THEN NULL;
      END;
  END;

  CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;
  CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_internal (       id SERIAL PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO no_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM no_tenant_mod_invoice_storage.rmb_internal);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO no_tenant_mod_invoice_storage.rmb_internal (jsonb) SELECT '{"rmbVersion": "35.3.0", "moduleVersion": "0.0"}'::jsonb WHERE NOT EXISTS (SELECT * FROM no_tenant_mod_invoice_storage.rmb_internal);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_job (       id UUID PRIMARY KEY,       jsonb JSONB NOT NULL     );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43372 POST /_/tenant  HTTP_1_1 201 410 37 tid=no_tenant Created 
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id -368777786
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getTenantByOperationId
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  SET search_path TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  SET search_path TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.rmb_internal_index (   name text PRIMARY KEY,   def text NOT NULL,   remove boolean NOT NULL );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.rmb_internal_index SET remove = TRUE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TABLE IF NOT EXISTS rmb_internal_analyze (   tablename text );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.uuid_smaller(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 < $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.uuid_larger(uuid, uuid) RETURNS uuid AS $$
BEGIN
  IF $1 IS NULL THEN
    RETURN $2;
  END IF;
  IF $2 IS NULL THEN
    RETURN $1;
  END IF;
  IF $1 > $2 THEN
    RETURN $1;
  ELSE
    RETURN $2;
  END IF;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.next_uuid(uuid) RETURNS uuid AS $$
DECLARE
  uuid text;
  digit text;
BEGIN
  uuid = $1;
  FOR i IN REVERSE 36..1 LOOP
    digit := substring(uuid from i for 1);
    -- skip minus, version byte M and variant byte N
    CONTINUE WHEN digit = '-' OR i = 15 OR i = 20;
    CASE digit
      WHEN '0' THEN digit := '1';
      WHEN '1' THEN digit := '2';
      WHEN '2' THEN digit := '3';
      WHEN '3' THEN digit := '4';
      WHEN '4' THEN digit := '5';
      WHEN '5' THEN digit := '6';
      WHEN '6' THEN digit := '7';
      WHEN '7' THEN digit := '8';
      WHEN '8' THEN digit := '9';
      WHEN '9' THEN digit := 'a';
      WHEN 'a' THEN digit := 'b';
      WHEN 'b' THEN digit := 'c';
      WHEN 'c' THEN digit := 'd';
      WHEN 'd' THEN digit := 'e';
      WHEN 'e' THEN digit := 'f';
      WHEN 'f' THEN digit := '0';
      ELSE NULL;
    END CASE;
    uuid = overlay(uuid placing digit from i);
    EXIT WHEN digit <> '0';
  END LOOP;
  RETURN uuid;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE no_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = no_tenant_mod_invoice_storage.uuid_larger,   combinefunc = no_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE no_tenant_mod_invoice_storage.max(uuid) (   stype = uuid,   sfunc = no_tenant_mod_invoice_storage.uuid_larger,   combinefunc = no_tenant_mod_invoice_storage.uuid_larger,   parallel = safe,   sortop = operator (>) );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE AGGREGATE no_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = no_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = no_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE AGGREGATE no_tenant_mod_invoice_storage.min(uuid) (   stype = uuid,   sfunc = no_tenant_mod_invoice_storage.uuid_smaller,   combinefunc = no_tenant_mod_invoice_storage.uuid_smaller,   parallel = safe,   sortop = operator (<) );
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.count_estimate_smart2(pg_catalog.int8,pg_catalog.int8,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.count_estimate_smart2(bigint,bigint,text);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE FUNCTION no_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE FUNCTION no_tenant_mod_invoice_storage.count_estimate_smart2(rows bigint, lim bigint, query text) RETURNS bigint AS $$
DECLARE
  rec   record;
  cnt bigint;
BEGIN
  IF rows = lim THEN
      FOR rec IN EXECUTE 'EXPLAIN ' || query LOOP
        cnt := substring(rec."QUERY PLAN" FROM ' rows=([[:digit:]]+)');
        EXIT WHEN cnt IS NOT NULL;
      END LOOP;
      RETURN cnt;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql VOLATILE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = no_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.count_estimate_default(query text) RETURNS bigint AS $$
DECLARE
  rows bigint;
  q text;
BEGIN
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO rows;
  IF rows < 50000 THEN
    return rows;
  END IF;
  rows = no_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF rows < 50000 THEN
    return 50000;
  END IF;
  RETURN rows;
END;
$$ LANGUAGE plpgsql IMMUTABLE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = no_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.count_estimate(query text) RETURNS bigint AS $$
DECLARE
  count bigint;
  est_count bigint;
  q text;
BEGIN
  est_count = no_tenant_mod_invoice_storage.count_estimate_smart2(50000, 50000, query);
  IF est_count > 4*50000 THEN
    RETURN est_count;
  END IF;
  q = 'SELECT COUNT(*) FROM (' || query || ' LIMIT 50000) x';
  EXECUTE q INTO count;
  IF count < 50000 THEN
    RETURN count;
  END IF;
  IF est_count < 50000 THEN
    RETURN 50000;
  END IF;
  RETURN est_count;
END;
$$ LANGUAGE plpgsql STABLE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE no_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO no_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.upsert(text, uuid, anyelement) RETURNS uuid AS $$
DECLARE
  ret uuid;
BEGIN
  EXECUTE format('UPDATE no_tenant_mod_invoice_storage.%I SET jsonb=$3 WHERE id=$2 RETURNING id', $1)
          USING $1, $2, $3 INTO ret;
  IF ret IS NOT NULL THEN
    RETURN ret;
  END IF;
  EXECUTE format('INSERT INTO no_tenant_mod_invoice_storage.%I (id, jsonb) VALUES ($2, $3) RETURNING id', $1)
          USING $1, $2, $3 INTO STRICT ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.f_unaccent(text) RETURNS text AS $$
  SELECT public.unaccent('public.unaccent', $1)  -- schema-qualify function and dictionary
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.get_tsvector(text) RETURNS tsvector AS $$
  SELECT to_tsvector('simple', translate($1, '&', ','));
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_and(text) RETURNS tsquery AS $$
  SELECT to_tsquery('simple', string_agg(CASE WHEN length(v) = 0 OR v = '*' THEN ''
                                              WHEN right(v, 1) = '*' THEN '''' || left(v, -1) || ''':*'
                                              ELSE '''' || v || '''' END,
                                         '&'))
  FROM (SELECT regexp_split_to_table(translate($1, '&''', ',,'), ' +')) AS x(v);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(no_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_or(text) RETURNS tsquery AS $$
  SELECT replace(no_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '|')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(no_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.tsquery_phrase(text) RETURNS tsquery AS $$
  SELECT replace(no_tenant_mod_invoice_storage.tsquery_and($1)::text, '&', '<->')::tsquery;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.normalize_digits(text) RETURNS text AS $$
  SELECT    translate((regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1], E' \t-', '')
         || CASE WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[1] = '' THEN ''
                 WHEN (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2] = '' THEN ''
                 ELSE ' '
            END
         || (regexp_match($1, '^([0-9 \t-]*(?:\*[ \t]*)?)(.*)'))[2];
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_id_in_jsonb() RETURNS TRIGGER AS $$
BEGIN
  NEW.jsonb = jsonb_set(NEW.jsonb, '{id}', to_jsonb(NEW.id));
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function no_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function no_tenant_mod_invoice_storage.concat_space_sql(VARIADIC text[]) RETURNS text AS $$ select concat_ws(' ', VARIADIC $1);
$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function no_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function no_tenant_mod_invoice_storage.concat_array_object_values(jsonb_array jsonb, field text) RETURNS text AS $$
  SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function no_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function no_tenant_mod_invoice_storage.concat_array_object_values(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT string_agg(value->>$2, ' ') FROM jsonb_array_elements($1) WHERE value->>$3 = $4;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function no_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function no_tenant_mod_invoice_storage.first_array_object_value(   jsonb_array jsonb, field text, filterkey text, filtervalue text) RETURNS text AS $$
SELECT value->>$2 FROM jsonb_array_elements($1) WHERE value->>$3 = $4 LIMIT 1;
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  create or replace function no_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  create or replace function no_tenant_mod_invoice_storage.concat_array_object(jsonb_array jsonb) RETURNS text AS $$
  SELECT string_agg(value::text, ' ') FROM jsonb_array_elements_text($1);
$$ LANGUAGE sql IMMUTABLE PARALLEL SAFE STRICT;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function rmb_internal_index(text,text,text) does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS rmb_internal_index(aname text, tops text, newdef text);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO no_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION rmb_internal_index(   atable text, aname text, tops text, newdef text) RETURNS void AS $$
DECLARE
  olddef text;
  namep CONSTANT text = concat(aname, '_p');
  prepareddef text;
BEGIN
  IF tops = 'DELETE' THEN
    -- use case insensitive %s, not case sensitive %I
    -- no SQL injection because the names are hard-coded in schema.json
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE 'DELETE FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = $1' USING aname;
    RETURN;
  END IF;
  SELECT def INTO olddef      FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = aname;
  SELECT def INTO prepareddef FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE name = namep;
  prepareddef = replace(prepareddef, concat(' ', namep, ' ON '), concat(' ', aname, ' ON '));
  IF prepareddef = newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE format('ALTER INDEX IF EXISTS %s RENAME TO %s', namep, aname);
    EXECUTE 'DELETE FROM rmb_internal_index WHERE name = $1' USING namep;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  ELSIF olddef IS DISTINCT FROM newdef THEN
    EXECUTE format('DROP INDEX IF EXISTS %s', aname);
    EXECUTE newdef;
    EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING atable;
  END IF;
  EXECUTE 'INSERT INTO no_tenant_mod_invoice_storage.rmb_internal_index VALUES ($1, $2, FALSE) '
          'ON CONFLICT (name) DO UPDATE SET def = EXCLUDED.def, remove = EXCLUDED.remove' USING aname, newdef;
END
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM no_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
BEGIN
  -- use advisory lock to prevent "tuple concurrently updated"
  -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
  PERFORM pg_advisory_xact_lock(20201101, 1234567890);
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM no_tenant_mod_invoice_storage;
  REVOKE CREATE ON SCHEMA public FROM PUBLIC;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_groups" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON no_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_groups CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_groups (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_groups ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_groups
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.batch_groups       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_groups_references ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_groups_references" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_groups_references ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.update_batch_groups_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.update_batch_groups_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_groups_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_trigger" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_trigger ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_groups    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_groups_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_groups_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_md_json_trigger" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_groups_md_json_trigger ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_groups_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_groups   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_groups_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_groups_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.batch_groups" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_groups_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_groups CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.batch_groups_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_groups_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_export_configs" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_voucher_export_configs (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_export_configs ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_export_configs       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_export_configs           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_export_configs
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_export_configs_batchGroupId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_export_configs (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_export_configs');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_export_configs_references" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_export_configs_references ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_export_configs_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_batch_voucher_export_configs_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_export_configs DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_trigger ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_voucher_export_configs    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_md_json_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_md_json_trigger ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_export_configs_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_export_configs   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_voucher_export_configs_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_export_configs_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_export_configs" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_export_configs_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_voucher_export_configs CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_voucher_export_configs_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_export_config_credentials" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.export_config_credentials (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_export_config_credentials ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.export_config_credentials       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.export_config_credentials           ADD COLUMN IF NOT EXISTS exportConfigId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE export_config_credentials
              ADD CONSTRAINT exportConfigId_batch_voucher_export_configs_fkey
              FOREIGN KEY (exportConfigId) REFERENCES batch_voucher_export_configs;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON no_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS export_config_credentials_exportConfigId_idx           ON no_tenant_mod_invoice_storage.export_config_credentials (exportConfigId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('export_config_credentials');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_export_config_credentials_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.exportConfigId = (NEW.jsonb->>'exportConfigId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_export_config_credentials_references" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_export_config_credentials_references ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_export_config_credentials_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_export_config_credentials_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE export_config_credentials DROP CONSTRAINT IF EXISTS '
                || 'exportConfigId_batch_voucher_export_configs_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.export_config_credentials_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_trigger" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_trigger ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.export_config_credentials    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.export_config_credentials_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_export_config_credentials_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_md_json_trigger" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_export_config_credentials_md_json_trigger ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_export_config_credentials_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.export_config_credentials   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_export_config_credentials_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_export_config_credentials_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.export_config_credentials" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_export_config_credentials_ol_version_trigger     ON no_tenant_mod_invoice_storage.export_config_credentials CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.export_config_credentials_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON no_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoices" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoices ON no_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoices CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.invoices (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoices ON no_tenant_mod_invoice_storage.invoices CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoices CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoices
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.invoices       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON no_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_vendorid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_vendorId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON no_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_vendorId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_vendorId_idx ON no_tenant_mod_invoice_storage.invoices '
      || $rmb$(left(lower(f_unaccent(jsonb->>'vendorId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_gin ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'acqUnitIds'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_acqunitids_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoices_acqUnitIds_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoices', 'invoices_acqUnitIds_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoices_acqUnitIds_idx_ft ON no_tenant_mod_invoice_storage.invoices USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'acqUnitIds')) )$rmb$);
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.invoices           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoices
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON no_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoices_batchGroupId_idx           ON no_tenant_mod_invoice_storage.invoices (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoices');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoices_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoices_references ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoices_references" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoices_references ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_invoices_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoices_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoices       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_invoices_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoices DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.invoices_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_trigger" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_trigger ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.invoices_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.invoices    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.invoices_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_invoices_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_md_json_trigger" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoices_md_json_trigger ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoices_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.invoices   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_invoices_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoices_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.invoices" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoices_ol_version_trigger     ON no_tenant_mod_invoice_storage.invoices CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.invoices_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.invoices_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS no_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS no_tenant_mod_invoice_storage.invoice_number NO MAXVALUE START WITH 10000 CACHE 1 NO CYCLE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT USAGE ON SEQUENCE no_tenant_mod_invoice_storage.invoice_number TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT USAGE ON SEQUENCE no_tenant_mod_invoice_storage.invoice_number TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoices_invoice_number_unique_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP INDEX IF EXISTS invoices_invoice_number_unique_idx;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_invoice_lines" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON no_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoice_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.invoice_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_invoice_lines ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoice_lines
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.invoice_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_invoicelinestatus_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_invoiceLineStatus_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_invoiceLineStatus_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_invoiceLineStatus_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'invoiceLineStatus')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_taglist_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_tagList_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_tagList_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_tagList_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'tagList')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_fiscalyearid_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fiscalYearId_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fiscalYearId_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fiscalYearId_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'fiscalYearId')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_exporttoaccounting_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_exportToAccounting_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_exportToAccounting_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_exportToAccounting_idx ON no_tenant_mod_invoice_storage.invoice_lines '
      || $rmb$(left(lower(f_unaccent(jsonb->>'exportToAccounting')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_polineid_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_poLineId_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_poLineId_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_poLineId_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'poLineId'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_funddistributions_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_fundDistributions_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_fundDistributions_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_fundDistributions_idx_gin ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'fundDistributions'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "invoice_lines_description_idx_ft" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS invoice_lines_description_idx_ft"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$)"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'invoice_lines', 'invoice_lines_description_idx_ft', 'ADD',
      'CREATE INDEX IF NOT EXISTS invoice_lines_description_idx_ft ON no_tenant_mod_invoice_storage.invoice_lines USING GIN '
      || $rmb$( get_tsvector(f_unaccent(jsonb->>'description')) )$rmb$);
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.invoice_lines           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE invoice_lines
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON no_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS invoice_lines_invoiceId_idx           ON no_tenant_mod_invoice_storage.invoice_lines (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('invoice_lines');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoice_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_invoice_lines_references" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_invoice_lines_references ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_invoice_lines_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.invoice_lines       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_invoice_lines_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE invoice_lines DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.invoice_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_trigger" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_trigger ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.invoice_lines    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.invoice_lines_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_invoice_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_md_json_trigger" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_invoice_lines_md_json_trigger ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_invoice_lines_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.invoice_lines   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_invoice_lines_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_invoice_lines_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.invoice_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_invoice_lines_ol_version_trigger     ON no_tenant_mod_invoice_storage.invoice_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.invoice_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.invoice_lines_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON no_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_vouchers" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_vouchers ON no_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_vouchers ON no_tenant_mod_invoice_storage.vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.vouchers
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.vouchers       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_voucherdate_idx" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherDate_idx"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherDate_idx', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_voucherDate_idx ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(left(lower(f_unaccent(jsonb->>'voucherDate')),600))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_vouchernumber_idx_unique" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_voucherNumber_idx_unique"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 10 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_voucherNumber_idx_unique', 'DELETE',
      'CREATE UNIQUE INDEX IF NOT EXISTS vouchers_voucherNumber_idx_unique ON no_tenant_mod_invoice_storage.vouchers '
      || $rmb$(lower(f_unaccent(jsonb->>'voucherNumber')))$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON no_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='index "vouchers_exporttoaccounting_idx_gin" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP INDEX IF EXISTS vouchers_exportToAccounting_idx_gin"
PL/pgSQL function rmb_internal_index(text,text,text,text) line 23 at EXECUTE
SQL statement "SELECT rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON no_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      )"
PL/pgSQL function inline_code_block line 3 at PERFORM', file='tablecmds.c', line='1303', routine='DropErrorMsgNonExistent', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $do$
    BEGIN
      PERFORM rmb_internal_index(
      'vouchers', 'vouchers_exportToAccounting_idx_gin', 'ADD',
      'CREATE INDEX IF NOT EXISTS vouchers_exportToAccounting_idx_gin ON no_tenant_mod_invoice_storage.vouchers USING GIN '
      || $rmb$((lower(f_unaccent(jsonb->>'exportToAccounting'))) public.gin_trgm_ops)$rmb$
      );
    END $do$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON no_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_invoiceId_idx           ON no_tenant_mod_invoice_storage.vouchers (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.vouchers           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE vouchers
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON no_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS vouchers_batchGroupId_idx           ON no_tenant_mod_invoice_storage.vouchers (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('vouchers');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_vouchers_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_vouchers_references ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_vouchers_references" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_vouchers_references ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_vouchers_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_vouchers_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.vouchers       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_vouchers_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE vouchers DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.vouchers_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_trigger" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_trigger ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.vouchers_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.vouchers    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.vouchers_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_vouchers_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_md_json_trigger" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_vouchers_md_json_trigger ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_vouchers_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.vouchers   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_vouchers_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_vouchers_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_vouchers_ol_version_trigger     ON no_tenant_mod_invoice_storage.vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.vouchers_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE SEQUENCE IF NOT EXISTS no_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE SEQUENCE IF NOT EXISTS no_tenant_mod_invoice_storage.voucher_number MINVALUE 0 NO MAXVALUE CACHE 1 NO CYCLE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER SEQUENCE no_tenant_mod_invoice_storage.voucher_number OWNER TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER SEQUENCE no_tenant_mod_invoice_storage.voucher_number OWNER TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_voucher_lines" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON no_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.voucher_lines CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.voucher_lines (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_voucher_lines ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.voucher_lines
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.voucher_lines       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.voucher_lines           ADD COLUMN IF NOT EXISTS voucherId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE voucher_lines
              ADD CONSTRAINT voucherId_vouchers_fkey
              FOREIGN KEY (voucherId) REFERENCES vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON no_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS voucher_lines_voucherId_idx           ON no_tenant_mod_invoice_storage.voucher_lines (voucherId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('voucher_lines');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_voucher_lines_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.voucherId = (NEW.jsonb->>'voucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_voucher_lines_references" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_voucher_lines_references ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_voucher_lines_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.voucher_lines       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_voucher_lines_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE voucher_lines DROP CONSTRAINT IF EXISTS '
                || 'voucherId_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.voucher_lines_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_trigger" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_trigger ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.voucher_lines    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.voucher_lines_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_voucher_lines_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_md_json_trigger" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_voucher_lines_md_json_trigger ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_voucher_lines_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.voucher_lines   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_voucher_lines_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_voucher_lines_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.voucher_lines" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_voucher_lines_ol_version_trigger     ON no_tenant_mod_invoice_storage.voucher_lines CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.voucher_lines_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.voucher_lines_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.voucher_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON no_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_documents" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_documents ON no_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.documents CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.documents (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_documents ON no_tenant_mod_invoice_storage.documents CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.documents CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.documents
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.documents       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.documents           ADD COLUMN IF NOT EXISTS invoiceId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE documents
              ADD CONSTRAINT invoiceId_invoices_fkey
              FOREIGN KEY (invoiceId) REFERENCES invoices;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON no_tenant_mod_invoice_storage.documents (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS documents_invoiceId_idx           ON no_tenant_mod_invoice_storage.documents (invoiceId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('documents');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_documents_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.invoiceId = (NEW.jsonb->>'invoiceId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_documents_references ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_documents_references" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_documents_references ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_documents_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_documents_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.documents       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_documents_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE documents DROP CONSTRAINT IF EXISTS '
                || 'invoiceId_invoices_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.documents_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_trigger" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_trigger ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.documents_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.documents    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.documents_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_documents_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_md_json_trigger" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_documents_md_json_trigger ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_documents_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_documents_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.documents   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_documents_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_documents_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.documents" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_documents_ol_version_trigger     ON no_tenant_mod_invoice_storage.documents CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.documents_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.documents_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  ALTER TABLE no_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  ALTER TABLE no_tenant_mod_invoice_storage.DOCUMENTS ADD COLUMN IF NOT EXISTS document_data text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_vouchers" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_vouchers (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_vouchers ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_vouchers
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "creation_date" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='column "created_by" of relation "batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='tablecmds.c', line='8538', routine='ATExecDropColumn', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.batch_vouchers       DROP COLUMN IF EXISTS creation_date CASCADE,       DROP COLUMN IF EXISTS created_by CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_vouchers_references" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_vouchers_references ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.update_batch_vouchers_references() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.update_batch_vouchers_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.batch_vouchers_set_md() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_vouchers_set_md() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_trigger" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_trigger ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.set_batch_vouchers_md_json() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.set_batch_vouchers_md_json() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_md_json_trigger" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_vouchers_md_json_trigger ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_vouchers_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.batch_vouchers" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_vouchers_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_vouchers CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_vouchers_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_injson_batch_voucher_exports" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 16 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_id_in_jsonb" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE"
PL/pgSQL function inline_code_block line 18 at SQL statement', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DO $$
  BEGIN

    -- use advisory lock to prevent "tuple concurrently updated"
    -- https://issues.folio.org/browse/RMB-744 https://issues.folio.org/browse/RMB-944
    PERFORM pg_advisory_xact_lock(20201101, 1234567890);

    FOR i IN REVERSE 1000..1 LOOP
      BEGIN

        CREATE TABLE IF NOT EXISTS no_tenant_mod_invoice_storage.batch_voucher_exports (
          id UUID PRIMARY KEY,
          jsonb JSONB NOT NULL
        );
        -- old trigger name
        DROP TRIGGER IF EXISTS set_id_injson_batch_voucher_exports ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        -- current trigger name
        DROP TRIGGER IF EXISTS set_id_in_jsonb ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
        CREATE TRIGGER set_id_in_jsonb BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports
          FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_id_in_jsonb();

        EXIT;
      EXCEPTION WHEN OTHERS THEN
        IF i <= 1 THEN
          RAISE;  -- rethrow exception because max number of retries have been reached
        END IF;
        -- otherwise retry until no other parallel transaction that also executes "IF EXISTS" interferes with us
      END;
    END LOOP;
  END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports       ADD COLUMN IF NOT EXISTS creation_date timestamp,       ADD COLUMN IF NOT EXISTS created_by text;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchGroupId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchGroupId_batch_groups_fkey
              FOREIGN KEY (batchGroupId) REFERENCES batch_groups;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchGroupId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_exports (batchGroupId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          ALTER TABLE no_tenant_mod_invoice_storage.batch_voucher_exports           ADD COLUMN IF NOT EXISTS batchVoucherId UUID;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          DO $$
        BEGIN
          BEGIN
            ALTER TABLE batch_voucher_exports
              ADD CONSTRAINT batchVoucherId_batch_vouchers_fkey
              FOREIGN KEY (batchVoucherId) REFERENCES batch_vouchers;
          EXCEPTION
            WHEN duplicate_object OR duplicate_table THEN NULL;
          END;
        END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          CREATE INDEX IF NOT EXISTS batch_voucher_exports_batchVoucherId_idx           ON no_tenant_mod_invoice_storage.batch_voucher_exports (batchVoucherId);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:          INSERT INTO rmb_internal_analyze VALUES ('batch_voucher_exports');
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_batch_voucher_exports_references()     RETURNS TRIGGER AS $$
    BEGIN
      NEW.batchGroupId = (NEW.jsonb->>'batchGroupId');
      NEW.batchVoucherId = (NEW.jsonb->>'batchVoucherId');
      RETURN NEW;
    END;
    $$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "update_batch_voucher_exports_references" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DROP TRIGGER IF EXISTS update_batch_voucher_exports_references ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      CREATE TRIGGER update_batch_voucher_exports_references       BEFORE INSERT OR UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports       FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.update_batch_voucher_exports_references();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:      DO $$
    DECLARE
      version TEXT;
      i INT;
    BEGIN
      SELECT jsonb->>'rmbVersion' INTO version FROM rmb_internal;
      IF version !~ '^(\d\.|1\d\.|2\d\.|30\.0\.)' THEN
        RETURN;
      END IF;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchGroupId_batch_groups_fkey' || i;
      END LOOP;
      FOR i IN 1..50 LOOP
        EXECUTE 'ALTER TABLE batch_voucher_exports DROP CONSTRAINT IF EXISTS '
                || 'batchVoucherId_batch_vouchers_fkey' || i;
      END LOOP;
    END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.batch_voucher_exports_set_md() RETURNS TRIGGER AS $$
DECLARE
  input text;
  createdDate timestamp;
BEGIN
  input = NEW.jsonb->'metadata'->>'createdDate';
  IF input IS NULL THEN
    RETURN NEW;
  END IF;
  -- time stamp without time zone?
  IF (input::timestamp::timestamptz = input::timestamptz) THEN
    -- createdDate already has no time zone, normalize using ::timestamp
    createdDate = input::timestamp;
  ELSE
    -- createdDate has a time zone string
    -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
    createdDate = input::timestamptz AT TIME ZONE '+00';
  END IF;
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(createdDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  NEW.creation_date = createdDate;
  NEW.created_by = NEW.jsonb->'metadata'->>'createdByUserId';
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_trigger ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_trigger BEFORE INSERT ON no_tenant_mod_invoice_storage.batch_voucher_exports    FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.batch_voucher_exports_set_md();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json() RETURNS TRIGGER AS $$
DECLARE
  input text;
  updatedDate timestamp;
BEGIN
  if NEW.creation_date IS NULL then
    RETURN NEW;
  end if;

  NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdDate}', to_jsonb(to_char(NEW.creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  if NEW.created_by IS NULL then
    NEW.jsonb = NEW.jsonb #- '{metadata,createdByUserId}';
  else
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,createdByUserId}', to_jsonb(NEW.created_by));
  end if;

  input = NEW.jsonb->'metadata'->>'updatedDate';
  if input IS NOT NULL then
    -- time stamp without time zone?
    IF (input::timestamp::timestamptz = input::timestamptz) THEN
      -- updatedDate already has no time zone, normalize using ::timestamp
      updatedDate = input::timestamp;
    ELSE
      -- updatedDate has a time zone string
      -- normalize using ::timestamptz, convert to '+00' time zone and remove time zone string
      updatedDate = input::timestamptz AT TIME ZONE '+00';
    END IF;
    NEW.jsonb = jsonb_set(NEW.jsonb, '{metadata,updatedDate}', to_jsonb(to_char(updatedDate, 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"')));
  end if;
  RETURN NEW;
END;
$$ language 'plpgsql';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_md_json_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DROP TRIGGER IF EXISTS set_batch_voucher_exports_md_json_trigger ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE TRIGGER set_batch_voucher_exports_md_json_trigger BEFORE UPDATE ON no_tenant_mod_invoice_storage.batch_voucher_exports   FOR EACH ROW EXECUTE PROCEDURE no_tenant_mod_invoice_storage.set_batch_voucher_exports_md_json();
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='trigger "set_batch_voucher_exports_ol_version_trigger" for relation "no_tenant_mod_invoice_storage.batch_voucher_exports" does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP TRIGGER IF EXISTS set_batch_voucher_exports_ol_version_trigger     ON no_tenant_mod_invoice_storage.batch_voucher_exports CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='function no_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() does not exist, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='dropcmds.c', line='528', routine='does_not_exist_skipping', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:    DROP FUNCTION IF EXISTS no_tenant_mod_invoice_storage.batch_voucher_exports_set_ol_version() CASCADE;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb =     (       SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(distrib - 'percentage' || jsonb_build_object('value', coalesce(distrib -> 'percentage', distrib -> 'value'), 'distributionType', coalesce(distrib ->> 'distributionType', 'percentage'))))       FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib     ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem -> 'distributionType' IS NULL OR elem -> 'percentage' IS NOT NULL) > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoices SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb || jsonb_build_object('batchGroupId', '2a2cb998-1437-41d1-88ad-01930aaeadd5') WHERE   NOT jsonb ? 'batchGroupId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.vouchers SET   jsonb = jsonb - 'batchNumber' WHERE   jsonb ? 'batchNumber';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb || jsonb_build_object('enclosureNeeded', false) 	WHERE NOT jsonb ? 'enclosureNeeded';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM no_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE no_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM no_tenant_mod_invoice_storage.invoices AS invoice, 			jsonb_array_elements(invoice.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE no_tenant_mod_invoice_storage.invoices 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM no_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE no_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  WITH adjustment AS ( 	SELECT array_to_json(array_agg(CASE WHEN NOT adj ? 'exportToAccounting' 												THEN adj|| jsonb_build_object('exportToAccounting', false) 												ELSE adj 												END))AS adjustments 		FROM no_tenant_mod_invoice_storage.invoice_lines AS invoice_line, 			jsonb_array_elements(invoice_line.jsonb->'adjustments') AS adj 		GROUP BY jsonb ) UPDATE no_tenant_mod_invoice_storage.invoice_lines 	SET jsonb=jsonb_set(jsonb, '{adjustments}', adjustment.adjustments::jsonb) 	FROM adjustment;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  INSERT INTO no_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  INSERT INTO no_tenant_mod_invoice_storage.batch_groups (id, jsonb) VALUES ('2a2cb998-1437-41d1-88ad-01930aaeadd5', '{"id": "2a2cb998-1437-41d1-88ad-01930aaeadd5", "name": "FOLIO", "description": "System default"}') ON CONFLICT DO NOTHING;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoices AS invoices SET jsonb = jsonb_strip_nulls(invoices.jsonb - 'total' - 'subTotal' ||         CASE             WHEN invoices.jsonb ? 'total' AND (invoices.jsonb->'lockTotal')::text='true' THEN  jsonb_build_object('lockTotal', (invoices.jsonb->>'total')::decimal) 			WHEN (invoices.jsonb->'lockTotal')::text='false' THEN jsonb_build_object('lockTotal', null) 			ELSE '{}'         END);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb - 'vendorRefNo' || jsonb_build_object('referenceNumbers', json_build_array(jsonb_build_object(         'refNumber', jsonb ->> 'vendorRefNo',         'vendorDetailsSource', 'InvoiceLine'))) WHERE jsonb ? 'vendorRefNo';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb = jsonb || jsonb_build_object('invoiceLineNumber', coalesce(nullif(split_part(jsonb ->> 'invoiceLineNumber', '-', 2), ''),                                                                       jsonb ->> 'invoiceLineNumber'));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM no_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.vouchers v SET jsonb = v.jsonb ||   jsonb_strip_nulls(jsonb_build_object('enclosureNeeded', i.jsonb->'enclosureNeeded', 'accountNo', i.jsonb->'accountNo')) FROM no_tenant_mod_invoice_storage.invoices i WHERE v.invoiceID = i.id;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM no_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.vouchers as vouchers SET jsonb = vouchers.jsonb ||     (       SELECT jsonb_build_object('vendorId', invoices.jsonb->>'vendorId')       FROM no_tenant_mod_invoice_storage.invoices as invoices       WHERE vouchers.invoiceId = invoices.id     ) WHERE NOT vouchers.jsonb ? 'vendorId';
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoice_lines SET jsonb =       (         SELECT jsonb_set(jsonb, '{fundDistributions}', jsonb_agg(             distrib || jsonb_build_object('code', replace(distrib ->> 'code', ':', '-'))           ))         FROM jsonb_array_elements(jsonb -> 'fundDistributions') distrib       ) WHERE jsonb_array_length(jsonb -> 'fundDistributions') > 0   AND (SELECT count(*)        FROM jsonb_array_elements(jsonb -> 'fundDistributions') elem        WHERE elem ->> 'code' LIKE '%:%') > 0;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='42710', message='extension "uuid-ossp" already exists, skipping', detail='null', hint='null', position='null', internalPosition='null', internalQuery='null', where='null', file='extension.c', line='1795', routine='CreateExtension', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM no_tenant_mod_invoice_storage.invoices
    )
    UPDATE no_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE OR REPLACE FUNCTION no_tenant_mod_invoice_storage.update_invoices_with_po_numbers(_invoice_vs_po_numbers_list jsonb) RETURNS VOID as $$
BEGIN
    WITH _invoices_with_updated_po_numbers AS (
      SELECT jsonb_set(jsonb, '{poNumbers}',
          coalesce((SELECT _invoices_vs_po_numbers -> 'poNumbers' FROM jsonb_array_elements(_invoice_vs_po_numbers_list) _invoices_vs_po_numbers
            WHERE _invoices_vs_po_numbers ->> 'invoiceId' = jsonb ->> 'id'), jsonb -> 'poNumbers', '[]')
            ) as _updated_invoices
      FROM no_tenant_mod_invoice_storage.invoices
    )
    UPDATE no_tenant_mod_invoice_storage.invoices _origin_invoices
    SET jsonb = _updated_invoices
    FROM _invoices_with_updated_po_numbers _updated_invoices
    WHERE _origin_invoices.jsonb->>'id' = _updated_invoices ->>'id';
END;
$$ LANGUAGE plpgsql;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM no_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.invoices AS i SET jsonb = i.jsonb || jsonb_build_object('voucherNumber', v.jsonb ->> 'voucherNumber')   FROM no_tenant_mod_invoice_storage.vouchers AS v WHERE i.id = v.invoiceId;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_date_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceDate')),600), lower(f_unaccent(invoices.jsonb->>'invoiceDate')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoice_num_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')),600), lower(f_unaccent(invoices.jsonb->>'vendorInvoiceNo')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_status_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'status')),600), lower(f_unaccent(invoices.jsonb->>'status')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  CREATE INDEX IF NOT EXISTS invoices_invoice_total_sort ON no_tenant_mod_invoice_storage.invoices   (left(lower(f_unaccent(invoices.jsonb->>'invoiceTotal')),600), lower(f_unaccent(invoices.jsonb->>'invoiceTotal')));
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  aname TEXT;
BEGIN
  FOR aname IN SELECT name FROM no_tenant_mod_invoice_storage.rmb_internal_index WHERE remove = TRUE
  LOOP
    EXECUTE 'DROP INDEX IF EXISTS ' || aname;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM no_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'no_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'no_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  version TEXT;
  i RECORD;
  newindexdef TEXT;
BEGIN
  SELECT jsonb->>'rmbVersion' INTO version FROM no_tenant_mod_invoice_storage.rmb_internal;
  IF version !~ '^(\d\.|1\d\.|2[0-8]\.|29\.[0-3]\.)' THEN
    -- skip this upgrade if last install/upgrade was made by RMB >= 29.4.x
    RETURN;
  END IF;
  FOR i IN SELECT * FROM pg_catalog.pg_indexes WHERE schemaname = 'no_tenant_mod_invoice_storage'
  LOOP
    newindexdef := regexp_replace(i.indexdef,
      -- \m = beginning of a word, \M = end of a word
      '\mpublic\.(f_unaccent|concat_space_sql|concat_array_object_values|concat_array_object)\M',
      'no_tenant_mod_invoice_storage.\1',
      'g');
    IF newindexdef <> i.indexdef THEN
      EXECUTE 'DROP INDEX ' || i.indexname;
      EXECUTE newindexdef;
      EXECUTE 'INSERT INTO rmb_internal_analyze VALUES ($1)' USING i.tablename;
    END IF;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  t TEXT;
BEGIN
  FOR t IN SELECT DISTINCT tablename FROM rmb_internal_analyze
  LOOP
    EXECUTE 'ANALYZE ' || t;
  END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  TRUNCATE rmb_internal_analyze;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  TRUNCATE rmb_internal_analyze;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA no_tenant_mod_invoice_storage TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA no_tenant_mod_invoice_storage TO no_tenant_mod_invoice_storage;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  UPDATE no_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  UPDATE no_tenant_mod_invoice_storage.rmb_internal   SET jsonb = jsonb || jsonb_build_object(     'rmbVersion', '35.3.0',     'moduleVersion', 'mod_invoice_storage-5.9.0-SNAPSHOT',     'schemaJson', $mainftl${
  "exactCount" : 50000,
  "scripts": [
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/vouchers_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/exportToAccounting_enclosureNeeded_default_false.sql",
      "fromModuleVersion": "mod-invoice-storage-4.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/voucher_line_fund_code.ftl",
      "fromModuleVersion": "mod-invoice-storage-4.0.1"
    },
    {
      "run": "after",
      "snippetPath": "batch_groups.sql"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_lock_total_from_boolean_to_number.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/reference_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/invoice_line_number_migration.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/copy_enclosureNeeded_and_accountNo_from_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.0.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/populate_vendor_id_to_voucher.sql",
      "fromModuleVersion": "mod-invoice-storage-5.1.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/restriction_for_fund_codes.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.2.0/update_invoices_with_po_numbers.sql",
      "fromModuleVersion": "mod-invoice-storage-5.2.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.7.0/replace_invoice_sequences.ftl",
      "fromModuleVersion": "mod-invoice-storage-5.7.0"
    },
    {
       "run": "after",
       "snippetPath": "data-migration/5.8.0/update_invoices_fiscal_year_id.sql",
       "fromModuleVersion": "mod-invoice-storage-5.8.0"
    },
    {
      "run": "after",
      "snippetPath": "data-migration/5.9.0/update_voucherNumber_in_voucher_invoice.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    },
    {
      "run": "after",
      "snippetPath": "invoices_table.sql",
      "fromModuleVersion": "mod-invoice-storage-5.9.0"
    }
  ],
  "tables": [
    {
      "tableName": "batch_groups",
      "fromModuleVersion": "mod-invoice-storage-3.1.1",
      "withMetadata": true
    },
    {
      "tableName": "batch_voucher_export_configs",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExportConfigs"
        }
      ]
    },
    {
      "tableName": "export_config_credentials",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "exportConfigId",
          "targetTable": "batch_voucher_export_configs"
        }
      ]
    },
    {
      "tableName": "invoices",
      "fromModuleVersion": "mod-invoice-storage-4.2.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "invoices"
        }
      ],
      "index": [
        {
          "fieldName": "vendorId",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "acqUnitIds",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "customSnippetPath": "invoice_number_sequence.sql"
    },
    {
      "tableName": "invoice_lines",
      "fromModuleVersion": "mod-invoice-storage-4.0.1",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices",
          "tableAlias": "invoiceLines",
          "targetTableAlias": "invoices",
          "tOps": "ADD"
        }
      ],
      "index": [
        {
          "fieldName": "invoiceLineStatus",
          "caseSensitive": false
        },
        {
          "fieldName": "tagList",
          "caseSensitive": false
        },
        {
          "fieldName": "fiscalYearId",
          "caseSensitive": false
        },
        {
          "fieldName": "exportToAccounting",
          "caseSensitive": false
        }
      ],
      "fullTextIndex": [
        {
          "fieldName": "description",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "ginIndex": [
        {
          "fieldName": "poLineId",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        },
        {
          "fieldName": "fundDistributions",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ]
    },
    {
      "tableName": "vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "customSnippetPath": "voucher_number_sequence.sql",
      "uniqueIndex": [
        {
          "fieldName": "voucherNumber",
          "tOps": "DELETE"
        }
      ],
      "ginIndex": [
        {
          "fieldName": "exportToAccounting",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "index": [
        {
          "fieldName": "voucherDate",
          "tOps": "ADD",
          "caseSensitive": false,
          "removeAccents": true
        }
      ],
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        },
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "vouchers"
        }
      ]
    },
    {
      "tableName": "voucher_lines",
      "customSnippetPath": "data-migration/voucher_lines_table.sql",
      "fromModuleVersion": "mod-invoice-storage-3.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "voucherId",
          "targetTable": "vouchers",
          "tableAlias": "voucherLines",
          "targetTableAlias": "vouchers",
          "tOps": "ADD"
        }
      ]
    },
    {
      "tableName": "documents",
      "fromModuleVersion": "mod-invoice-storage-2.0.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "invoiceId",
          "targetTable": "invoices"
        }
      ],
      "customSnippetPath" : "document_table.sql"
    },
    {
      "tableName": "batch_vouchers",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": false
    },
    {
      "tableName": "batch_voucher_exports",
      "fromModuleVersion": "mod-invoice-storage-3.1.0",
      "withMetadata": true,
      "foreignKeys": [
        {
          "fieldName": "batchGroupId",
          "targetTable": "batch_groups",
          "targetTableAlias": "batchGroups",
          "tableAlias": "batchVoucherExports"
        },
        {
          "fieldName": "batchVoucherId",
          "targetTable": "batch_vouchers",
          "targetTableAlias": "batchVouchers",
          "tableAlias": "batchVoucherExports"
        }
      ]
    }
  ]
}
$mainftl$);
13:42:35 [] [no_tenant] [] [mod_invoice_storage] WARN  TenantLoading        TenantLoading.perform No X-Okapi-Url-to header
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Tenant data loaded successfully
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  TenantAPI            job d772f234-0f41-43fd-8578-7943c9c716e2 completed
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43372 GET /_/tenant/d772f234-0f41-43fd-8578-7943c9c716e2 wait=60000& HTTP_1_1 200 469 243 tid=no_tenant OK 
13:42:35 [] [] [] [] INFO  TenantApiTestUtil    tenant successfully deleted
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for INVOICE
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Shared pool for tenant no_tenant is set: false
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Using schema: no_tenant
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"no_tenant_mod_invoice_storage","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43374 GET /invoice-storage/invoices null HTTP_1_1 200 44 14 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "invoices": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for INVOICE_LINES
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLines
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43380 GET /invoice-storage/invoice-lines null HTTP_1_1 200 48 3 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "invoiceLines": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for VOUCHER
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43382 GET /voucher-storage/vouchers null HTTP_1_1 200 44 2 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 65

{
    "vouchers": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for VOUCHER_LINES
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherLines
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43384 GET /voucher-storage/voucher-lines null HTTP_1_1 200 48 2 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 69

{
    "voucherLines": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for BATCH_GROUP
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchGroupStorageBatchGroups
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43386 GET /batch-group-storage/batch-groups null HTTP_1_1 200 163 2 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 161

{
    "batchGroups": [
        {
            "id": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "name": "FOLIO",
            "description": "System default"
        }
    ],
    "totalRecords": 1
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for BATCH_VOUCHER_EXPORT_CONFIGS
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageExportConfigurations
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43388 GET /batch-voucher-storage/export-configurations null HTTP_1_1 200 49 2 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 70

{
    "exportConfigs": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [] [] [] INFO  TenantSampleDataTest Test expected zero quantity for BATCH_VOUCHER_EXPORTS
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking getBatchVoucherStorageBatchVoucherExports
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43390 GET /batch-voucher-storage/batch-voucher-exports null HTTP_1_1 200 55 2 tid=no_tenant OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 76

{
    "batchVoucherExports": [
        
    ],
    "totalRecords": 0
}
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  RestRouting          invoking postTenant
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Executing multiple statements with id 1936082085
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       trying to execute:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS no_tenant_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS no_tenant_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='no_tenant_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE no_tenant_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:35 [] [] [] [] WARN  ?                    Backend notice: severity='NOTICE', code='00000', message='drop cascades to 65 other objects', detail='drop cascades to table rmb_internal
drop cascades to table rmb_job
drop cascades to table rmb_internal_index
drop cascades to table rmb_internal_analyze
drop cascades to function uuid_smaller(uuid,uuid)
drop cascades to function uuid_larger(uuid,uuid)
drop cascades to function next_uuid(uuid)
drop cascades to function max(uuid)
drop cascades to function min(uuid)
drop cascades to function count_estimate_smart2(bigint,bigint,text)
drop cascades to function count_estimate_default(text)
drop cascades to function count_estimate(text)
drop cascades to function upsert(text,uuid,anyelement)
drop cascades to function f_unaccent(text)
drop cascades to function get_tsvector(text)
drop cascades to function tsquery_and(text)
drop cascades to function tsquery_or(text)
drop cascades to function tsquery_phrase(text)
drop cascades to function normalize_digits(text)
drop cascades to function set_id_in_jsonb()
drop cascades to function concat_space_sql(text[])
drop cascades to function concat_array_object_values(jsonb,text)
drop cascades to function concat_array_object_values(jsonb,text,text,text)
drop cascades to function first_array_object_value(jsonb,text,text,text)
drop cascades to function concat_array_object(jsonb)
drop cascades to function rmb_internal_index(text,text,text,text)
drop cascades to table batch_groups
drop cascades to function batch_groups_set_md()
drop cascades to function set_batch_groups_md_json()
drop cascades to table batch_voucher_export_configs
drop cascades to function update_batch_voucher_export_configs_references()
drop cascades to function batch_voucher_export_configs_set_md()
drop cascades to function set_batch_voucher_export_configs_md_json()
drop cascades to table export_config_credentials
drop cascades to function update_export_config_credentials_references()
drop cascades to function export_config_credentials_set_md()
drop cascades to function set_export_config_credentials_md_json()
drop cascades to table invoices
drop cascades to function update_invoices_references()
drop cascades to function invoices_set_md()
drop cascades to function set_invoices_md_json()
drop cascades to sequence invoice_number
drop cascades to table invoice_lines
drop cascades to function update_invoice_lines_references()
drop cascades to function invoice_lines_set_md()
drop cascades to function set_invoice_lines_md_json()
drop cascades to table vouchers
drop cascades to function update_vouchers_references()
drop cascades to function vouchers_set_md()
drop cascades to function set_vouchers_md_json()
drop cascades to sequence voucher_number
drop cascades to table voucher_lines
drop cascades to function update_voucher_lines_references()
drop cascades to function voucher_lines_set_md()
drop cascades to function set_voucher_lines_md_json()
drop cascades to table documents
drop cascades to function update_documents_references()
drop cascades to function documents_set_md()
drop cascades to function set_documents_md_json()
drop cascades to table batch_vouchers
drop cascades to table batch_voucher_exports
drop cascades to function update_batch_voucher_exports_references()
drop cascades to function batch_voucher_exports_set_md()
drop cascades to function set_batch_voucher_exports_md_json()
drop cascades to function update_invoices_with_po_numbers(jsonb)', hint='null', position='null', internalPosition='null', internalQuery='null', where='SQL statement "DROP SCHEMA IF EXISTS no_tenant_mod_invoice_storage CASCADE"
PL/pgSQL function inline_code_block line 5 at SQL statement', file='dependency.c', line='1214', routine='reportDependentObjects', schema='null', table='null', column='null', dataType='null', constraint='null'
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  PostgresClient       Successfully executed:  DO $$
DECLARE
  tablename text;
BEGIN
  DROP SCHEMA IF EXISTS no_tenant_mod_invoice_storage CASCADE;
  DROP ROLE IF EXISTS no_tenant_mod_invoice_storage;
EXCEPTION
  WHEN insufficient_privilege THEN
    LOOP
      SELECT table_name INTO tablename
        FROM information_schema.tables
        WHERE table_type='BASE TABLE' AND table_schema='no_tenant_mod_invoice_storage';
      EXIT WHEN NOT FOUND;
      EXECUTE format('DROP TABLE no_tenant_mod_invoice_storage.%I CASCADE', tablename);
    END LOOP;
END $$;
13:42:35 [] [no_tenant] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43392 POST /_/tenant  HTTP_1_1 204 0 52 tid=no_tenant No Content 
[ERROR] Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.606 s <<< FAILURE! -- in org.folio.rest.impl.StorageTestSuite$TenantSampleDataTestNested
[ERROR] org.folio.rest.impl.StorageTestSuite$TenantSampleDataTestNested.sampleDataTests -- Time elapsed: 1.090 s <<< FAILURE!
java.lang.AssertionError: 
1 expectation failed.
JSON path totalRecords doesn't match.
Expected: <0>
  Actual: <2>

	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
	at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:270)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:117)
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
	at org.folio.rest.impl.TestBase.verifyCollectionQuantity(TestBase.java:79)
	at org.folio.rest.impl.TestBase.verifyCollectionQuantity(TestBase.java:84)
	at org.folio.rest.impl.TenantSampleDataTest.upgradeTenantWithNoSampleDataLoad(TenantSampleDataTest.java:163)
	at org.folio.rest.impl.TenantSampleDataTest.sampleDataTests(TenantSampleDataTest.java:74)

[INFO] Running org.folio.rest.impl.StorageTestSuite$InvoiceLineNumberTestNested
13:42:35 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:35 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage INVOICE test: Creating an invoice with the next line number... 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: null
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=null
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 successfully created
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43394 POST /invoice-storage/invoices null HTTP_1_1 201 993 9 tid=diku Created 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage INVOICE test: Test retrieving invoice-line number for existing invoice and sequence ... 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceLineNumberService Successfully retrieved invoice line number 1 for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43396 GET /invoice-storage/invoice-line-number invoiceId=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 HTTP_1_1 200 28 14 tid=diku OK 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage test invoiceLineNumberInitial: 1
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceLineNumberService Successfully retrieved invoice line number 2 for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43398 GET /invoice-storage/invoice-line-number invoiceId=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 HTTP_1_1 200 28 6 tid=diku OK 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage test Generate new sequence number: 2
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceLineNumberService Successfully retrieved invoice line number 3 for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43400 GET /invoice-storage/invoice-line-number invoiceId=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 HTTP_1_1 200 28 6 tid=diku OK 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage test Generate new sequence number: 3
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceLineNumberService Successfully retrieved invoice line number 4 for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43402 GET /invoice-storage/invoice-line-number invoiceId=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 HTTP_1_1 200 28 5 tid=diku OK 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage INVOICE test: Testing invoice-line numbers retrieving for non-existed invoice ID: f6b47acf-361a-497e-9ddb-45e3802df902
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] ERROR InvoicePostgresDAO   getInvoiceByIdForUpdate failed for invoice with id f6b47acf-361a-497e-9ddb-45e3802df902
io.vertx.ext.web.handler.HttpException: Not Found
13:42:36 [] [diku] [] [mod_invoice_storage] ERROR InvoiceLineNumberService Error while attempting to retrieve invoice line number for invoice f6b47acf-361a-497e-9ddb-45e3802df902
io.vertx.ext.web.handler.HttpException: Not Found
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43404 GET /invoice-storage/invoice-line-number invoiceId=f6b47acf-361a-497e-9ddb-45e3802df902 HTTP_1_1 404 9 3 tid=diku Not Found 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage INVOICE test: Testing invoice-line numbers retrieving based on existing invoice lines
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoicesById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService putInvoiceStorageInvoicesById:: Invoice with id: 382a6c80-8a01-4a59-a02c-2e38a73ddaf0 was successfully updated
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43406 PUT /invoice-storage/invoices/382a6c80-8a01-4a59-a02c-2e38a73ddaf0 null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoiceLines
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43408 POST /invoice-storage/invoice-lines null HTTP_1_1 201 1953 6 tid=diku Created 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking putInvoiceStorageInvoicesById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService putInvoiceStorageInvoicesById:: Invoice with id: 382a6c80-8a01-4a59-a02c-2e38a73ddaf0 was successfully updated
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43410 PUT /invoice-storage/invoices/382a6c80-8a01-4a59-a02c-2e38a73ddaf0 null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  InvoiceLineNumberService nextInvoiceLineNumber missing for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0, calculating from lines
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CRITERION >>> SQL: WHERE (jsonb->>'invoiceId') = '382a6c80-8a01-4a59-a02c-2e38a73ddaf0'    >>>WHERE (jsonb->>'invoiceId') = '382a6c80-8a01-4a59-a02c-2e38a73ddaf0'
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceLineNumberService Successfully retrieved invoice line number 2 for invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43412 GET /invoice-storage/invoice-line-number invoiceId=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 HTTP_1_1 200 28 9 tid=diku OK 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage INVOICE test: Deleting INVOICE with ID: 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   1 invoice lines of invoice with id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Invoice with id=382a6c80-8a01-4a59-a02c-2e38a73ddaf0 successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Invoice 382a6c80-8a01-4a59-a02c-2e38a73ddaf0 and associated lines and documents if any were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43414 DELETE /invoice-storage/invoices/382a6c80-8a01-4a59-a02c-2e38a73ddaf0 null HTTP_1_1 204 0 5 tid=diku No Content 
13:42:36 [] [] [] [] INFO  InvoiceLineNumberTest --- mod-invoice-storage invoice-line-number test: Invalid CQL query
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceLineNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43416 GET /invoice-storage/invoice-line-number query=invalid-query HTTP_1_1 400 21 0 tid=diku Bad Request 
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.261 s -- in org.folio.rest.impl.StorageTestSuite$InvoiceLineNumberTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$VoucherNumberTestNested
13:42:36 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Finished getting voucher number by query: SELECT nextval('voucher_number')
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Retrieved voucher number: 0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43418 GET /voucher-storage/voucher-number null HTTP_1_1 200 28 5 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Finished getting voucher number by query: SELECT nextval('voucher_number')
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Retrieved voucher number: 1
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43420 GET /voucher-storage/voucher-number null HTTP_1_1 200 28 2 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Finished getting voucher number by query: SELECT nextval('voucher_number')
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Retrieved voucher number: 2
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43422 GET /voucher-storage/voucher-number null HTTP_1_1 200 28 1 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherNumberStart
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Finished getting voucher number by query: SELECT pg_sequences.start_value FROM pg_sequences WHERE sequencename = 'voucher_number'
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Retrieved voucher number: 0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43424 GET /voucher-storage/voucher-number/start/ null HTTP_1_1 200 28 4 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVoucherNumberStartByValue
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43426 POST /voucher-storage/voucher-number/start/11111111 null HTTP_1_1 204 0 3 tid=diku No Content 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVoucherNumberStart
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Finished getting voucher number by query: SELECT pg_sequences.start_value FROM pg_sequences WHERE sequencename = 'voucher_number'
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  VoucherNumberImpl    getVoucherNumber:: Retrieved voucher number: 0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43428 GET /voucher-storage/voucher-number/start/ null HTTP_1_1 200 28 2 tid=diku OK 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=b433fa43-c832-4bbe-8273-1345cec31415 successfully created
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43430 POST /invoice-storage/invoices null HTTP_1_1 201 993 10 tid=diku Created 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postInvoiceStorageInvoices
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Creating a new invoice by id: ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   Creating new invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoicePostgresDAO   New invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e successfully created
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  InvoiceStorageService postInvoiceStorageInvoices:: Preparing response to client
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43432 POST /invoice-storage/invoices null HTTP_1_1 201 993 5 tid=diku Created 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVouchers
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43434 POST /voucher-storage/vouchers null HTTP_1_1 201 901 4 tid=diku Created 
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  RestRouting          invoking postVoucherStorageVouchers
13:42:36 [] [diku] [28d0fb04-d137-11e8-a8d5-f2801f1b9fd1] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43436 POST /voucher-storage/vouchers null HTTP_1_1 201 901 5 tid=diku Created 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getVoucherStorageVouchers
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  CQL2PgJSON           Doing LIKE search without index for vouchers.jsonb->>'voucherNumber', CQL >>> SQL: voucherNumber == MODINVOSTO40 >>> lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           index vouchers.jsonb->>'voucherNumber' generated SQL lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  CQL2PgJSON           Doing LIKE search without index for vouchers.jsonb->>'voucherNumber', CQL >>> SQL: voucherNumber == MODINVOSTO40 >>> lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           index vouchers.jsonb->>'voucherNumber' generated SQL lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           CQL >>> SQL: voucherNumber==MODINVOSTO40 >>>WHERE lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40')) LIMIT 10 OFFSET 0
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  CQL2PgJSON           Doing LIKE search without index for vouchers.jsonb->>'voucherNumber', CQL >>> SQL: voucherNumber == MODINVOSTO40 >>> lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           index vouchers.jsonb->>'voucherNumber' generated SQL lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  CQL2PgJSON           Doing LIKE search without index for vouchers.jsonb->>'voucherNumber', CQL >>> SQL: voucherNumber == MODINVOSTO40 >>> lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           index vouchers.jsonb->>'voucherNumber' generated SQL lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] WARN  CQL2PgJSON           Doing LIKE search without index for vouchers.jsonb->>'voucherNumber', CQL >>> SQL: voucherNumber == MODINVOSTO40 >>> lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQL2PgJSON           index vouchers.jsonb->>'voucherNumber' generated SQL lower(f_unaccent(vouchers.jsonb->>'voucherNumber')) LIKE lower(f_unaccent('MODINVOSTO40'))
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43438 GET /voucher-storage/vouchers query=voucherNumber%3D%3DMODINVOSTO40 HTTP_1_1 200 1949 24 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 571

{
    "vouchers": [
        {
            "id": "071799ae-6dd5-468c-8d31-a495e4341c56",
            "accountingCode": "1234",
            "amount": 23.45,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "disbursementNumber": "EFT546789",
            "disbursementDate": "2019-05-05T00:00:00.000+00:00",
            "disbursementAmount": 5.0,
            "enclosureNeeded": false,
            "invoiceCurrency": "USD",
            "invoiceId": "b433fa43-c832-4bbe-8273-1345cec31415",
            "exchangeRate": 0.89,
            "exportToAccounting": false,
            "status": "Awaiting payment",
            "systemCurrency": "EUR",
            "type": "Payment",
            "voucherDate": "2019-05-06T00:00:00.000+00:00",
            "voucherNumber": "MODINVOSTO40",
            "acqUnitIds": [
                
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:36.427+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:36.427+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        },
        {
            "id": "1303f203-c970-4de9-a38e-e8c6dfc1f97f",
            "accountingCode": "1234",
            "amount": 23.45,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "disbursementNumber": "EFT546789",
            "disbursementDate": "2019-05-05T00:00:00.000+00:00",
            "disbursementAmount": 5.0,
            "enclosureNeeded": false,
            "invoiceCurrency": "USD",
            "invoiceId": "ce83bc04-9873-4767-94bb-f3f42538bf7e",
            "exchangeRate": 0.89,
            "exportToAccounting": false,
            "status": "Awaiting payment",
            "systemCurrency": "EUR",
            "type": "Payment",
            "voucherDate": "2019-05-06T00:00:00.000+00:00",
            "voucherNumber": "MODINVOSTO40",
            "acqUnitIds": [
                
            ],
            "metadata": {
                "createdDate": "2024-10-22T13:42:36.446+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:36.446+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 2
}
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVouchersById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43440 DELETE /voucher-storage/vouchers/071799ae-6dd5-468c-8d31-a495e4341c56 null HTTP_1_1 204 0 2 tid=diku No Content 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteVoucherStorageVouchersById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43442 DELETE /voucher-storage/vouchers/1303f203-c970-4de9-a38e-e8c6dfc1f97f null HTTP_1_1 204 0 1 tid=diku No Content 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 invoice lines of invoice with id=b433fa43-c832-4bbe-8273-1345cec31415 successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=b433fa43-c832-4bbe-8273-1345cec31415 were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=b433fa43-c832-4bbe-8273-1345cec31415
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Invoice with id=b433fa43-c832-4bbe-8273-1345cec31415 successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Invoice b433fa43-c832-4bbe-8273-1345cec31415 and associated lines and documents if any were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43444 DELETE /invoice-storage/invoices/b433fa43-c832-4bbe-8273-1345cec31415 null HTTP_1_1 204 0 4 tid=diku No Content 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteInvoiceStorageInvoicesById
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Delete invoice ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice lines by invoice id=ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 invoice lines of invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice documents by invoice id=ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   0 documents of invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Delete invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoicePostgresDAO   Invoice with id=ce83bc04-9873-4767-94bb-f3f42538bf7e successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceStorageService deleteInvoiceStorageInvoicesById:: Invoice ce83bc04-9873-4767-94bb-f3f42538bf7e and associated lines and documents if any were successfully deleted
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43446 DELETE /invoice-storage/invoices/ce83bc04-9873-4767-94bb-f3f42538bf7e null HTTP_1_1 204 0 4 tid=diku No Content 
[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.288 s <<< FAILURE! -- in org.folio.rest.impl.StorageTestSuite$VoucherNumberTestNested
[ERROR] org.folio.rest.impl.StorageTestSuite$VoucherNumberTestNested.testGetVoucherNumber -- Time elapsed: 0.114 s <<< FAILURE!
java.lang.AssertionError: 

Expected: <11111111L>
     but: was <0L>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
	at org.folio.rest.impl.VoucherNumberTest.testGetVoucherNumber(VoucherNumberTest.java:67)

[INFO] Running org.folio.rest.impl.StorageTestSuite$InvoiceNumberTestNested
13:42:36 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceNumberImpl    Retrieved invoice number: 10000
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43448 GET /invoice-storage/invoice-number null HTTP_1_1 200 32 2 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceNumberImpl    Retrieved invoice number: 10001
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43450 GET /invoice-storage/invoice-number null HTTP_1_1 200 32 1 tid=diku OK 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceNumber
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  InvoiceNumberImpl    Retrieved invoice number: 10002
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43452 GET /invoice-storage/invoice-number null HTTP_1_1 200 32 1 tid=diku OK 
13:42:36 [] [] [] [] INFO  LoadConfs            File does not exist: /postgres-conf.json
13:42:36 [] [] [] [] INFO  LoadConfs            Resource does not exist: /postgres-conf.json
13:42:36 [] [] [] [] INFO  PostgresClient       No DB configuration found, setting username, password and database for testing
13:42:36 [] [] [] [] INFO  PostgresClient       Shared pool for tenant public is set: false
13:42:36 [] [] [] [] INFO  PostgresClient       postgreSQLClientConfig = {"postgres_tester":true,"username":"username","password":"...","database":"postgres","port":49341,"host":"172.17.0.1","host_reader":"172.17.0.1","port_reader":49342}
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoiceNumber
13:42:36 [] [diku] [] [mod_invoice_storage] ERROR InvoiceNumberImpl    Error while handling response for invoice number request
java.lang.IllegalArgumentException: Unable to generate invoice number from sequence
	at org.folio.rest.impl.InvoiceNumberImpl.lambda$1(InvoiceNumberImpl.java:39) ~[classes/:?]
	at org.folio.rest.persist.PostgresClient.lambda$10(PostgresClient.java:749) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.selectReturn(PostgresClient.java:3242) ~[domain-models-runtime-35.3.0.jar:?]
	at org.folio.rest.persist.PostgresClient.lambda$113(PostgresClient.java:3277) ~[domain-models-runtime-35.3.0.jar:?]
	at io.vertx.core.impl.future.FutureImpl$4.onFailure(FutureImpl.java:188) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.emitFailure(FutureBase.java:81) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl.tryFail(FutureImpl.java:278) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.sqlclient.impl.QueryResultBuilder.tryFail(QueryResultBuilder.java:94) ~[vertx-sql-client-4.5.10.jar:4.5.10]
	at io.vertx.core.Promise.fail(Promise.java:89) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.Promise.handle(Promise.java:53) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.Promise.handle(Promise.java:29) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureImpl$4.onFailure(FutureImpl.java:188) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.future.FutureBase.lambda$emitFailure$1(FutureBase.java:75) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.WorkerExecutor.lambda$execute$0(WorkerExecutor.java:68) ~[vertx-core-4.5.10.jar:4.5.10]
	at io.vertx.core.impl.TaskQueue.run(TaskQueue.java:76) ~[vertx-core-4.5.10.jar:4.5.10]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.111.Final.jar:4.1.111.Final]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: io.vertx.pgclient.PgException: ERROR: relation "invoice_number" does not exist (42P01)
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43458 GET /invoice-storage/invoice-number null HTTP_1_1 500 47 1 tid=diku Internal Server Error 
[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.109 s -- in org.folio.rest.impl.StorageTestSuite$InvoiceNumberTestNested
[INFO] Running org.folio.rest.impl.StorageTestSuite$SystemDataLoadingTestNested
13:42:36 [] [] [] [] INFO  SpringContextUtil    init:: defaultConfiguration != null
13:42:36 [] [] [] [] INFO  SystemDataLoadingTest --- mod-invoice-storage INVOICE test: Verifying system data was loaded ... 
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking getInvoiceStorageInvoices
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  CQLWrapper           NONE >>> SQL: null >>>LIMIT 10 OFFSET 0
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43460 GET /invoice-storage/invoices null HTTP_1_1 200 2634 5 tid=diku OK 
HTTP/1.1 200 OK
Content-Type: application/json
content-encoding: gzip
content-length: 856

{
    "invoices": [
        {
            "id": "6b8bc989-834d-4a14-945b-4c5442ae09af",
            "accountingCode": "3456",
            "adjustments": [
                {
                    "description": "Sales Tax",
                    "exportToAccounting": false,
                    "fundDistributions": [
                        {
                            "code": "USHIST",
                            "encumbrance": "1c8fc9f4-d2cc-4bd1-aa9a-cb02291cbe65",
                            "fundId": "1d1574f1-9196-4a57-8d1f-3b2e4309eb81",
                            "distributionType": "percentage",
                            "value": 100.0
                        }
                    ],
                    "prorate": "Not prorated",
                    "relationToTotal": "In addition to",
                    "type": "Percentage",
                    "value": 5.0
                }
            ],
            "adjustmentsTotal": 6.0,
            "approvedBy": "b72a28f6-04fc-489f-be18-ad53a3a64f67",
            "approvalDate": "2019-05-20T00:00:00.000+00:00",
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exportToAccounting": false,
            "folioInvoiceNo": "12345",
            "invoiceDate": "2019-05-18T00:00:00.000+00:00",
            "note": "Some note",
            "paymentTerms": "Payment in Advance",
            "paymentMethod": "EFT",
            "status": "Paid",
            "source": "API",
            "subTotal": 20.0,
            "total": 26.0,
            "vendorInvoiceNo": "JU57851",
            "voucherNumber": "578",
            "poNumbers": [
                "36547"
            ],
            "vendorId": "13fb64dc-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.193+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.193+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        },
        {
            "id": "07bb89be-dd4a-42f8-bbd0-a648e14bac5d",
            "accountingCode": "3456",
            "adjustments": [
                
            ],
            "adjustmentsTotal": 0.0,
            "batchGroupId": "2a2cb998-1437-41d1-88ad-01930aaeadd5",
            "currency": "USD",
            "enclosureNeeded": false,
            "exportToAccounting": false,
            "folioInvoiceNo": "45723",
            "invoiceDate": "2018-07-20T00:00:00.000+00:00",
            "paymentMethod": "EFT",
            "status": "Cancelled",
            "source": "API",
            "subTotal": 3000.0,
            "total": 3000.0,
            "vendorInvoiceNo": "DU10938",
            "voucherNumber": "452",
            "poNumbers": [
                
            ],
            "vendorId": "13fb64dc-cdf1-11e8-a8d5-f2801f1b9fd1",
            "acqUnitIds": [
                
            ],
            "nextInvoiceLineNumber": 1,
            "metadata": {
                "createdDate": "2024-10-22T13:42:30.209+00:00",
                "createdByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1",
                "updatedDate": "2024-10-22T13:42:30.209+00:00",
                "updatedByUserId": "28d0fb04-d137-11e8-a8d5-f2801f1b9fd1"
            }
        }
    ],
    "totalRecords": 2
}
[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.037 s <<< FAILURE! -- in org.folio.rest.impl.StorageTestSuite$SystemDataLoadingTestNested
[ERROR] org.folio.rest.impl.StorageTestSuite$SystemDataLoadingTestNested.systemDataWasLoaded -- Time elapsed: 0.025 s <<< FAILURE!
java.lang.AssertionError: 
1 expectation failed.
JSON path totalRecords doesn't match.
Expected: <0>
  Actual: <2>

	at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
	at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
	at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:512)
	at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:696)
	at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
	at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:270)
	at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:117)
	at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
	at org.folio.rest.impl.TestBase.verifyCollectionQuantity(TestBase.java:79)
	at org.folio.rest.impl.TestBase.verifyCollectionQuantity(TestBase.java:84)
	at org.folio.rest.impl.SystemDataLoadingTest.systemDataWasLoaded(SystemDataLoadingTest.java:18)

13:42:36 [] [] [] [] INFO  StorageTestSuite     Delete tenant
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  RestRouting          invoking deleteTenantByOperationId
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  TenantReferenceAPI   Trying to delete tenant by operation id: 1dfb5094-7643-4b86-b1d3-dff5f31eed44
13:42:36 [] [diku] [] [mod_invoice_storage] INFO  LogUtil              127.0.0.1:43462 DELETE /_/tenant/1dfb5094-7643-4b86-b1d3-dff5f31eed44  HTTP_1_1 204 0 8 tid=diku No Content 
13:42:36 [] [] [] [] INFO  TenantApiTestUtil    tenant has been deleted
13:42:36 [] [] [] [] INFO  RestVerticle         No shutdown hook implementation found, continuing with shutdown
13:42:36 [] [] [] [] INFO  StorageTestSuite     Stop database
13:42:36 [] [] [] [] INFO  PostgresClient       Stopping postgres tester
[INFO] Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 25.00 s -- in org.folio.rest.impl.StorageTestSuite
[INFO] Running org.folio.rest.core.RestClientTest
13:42:37 [] [] [] [] ERROR RestClient           Exception calling GET /invoice-storage/invoices/{id} - org.folio.rest.core.models.RequestContext@7e1b80d3
java.lang.NullPointerException: Cannot invoke "java.util.concurrent.CompletableFuture.thenApply(java.util.function.Function)" because the return value of "org.folio.rest.tools.client.interfaces.HttpClientInterface.request(io.vertx.core.http.HttpMethod, String, java.util.Map)" is null
	at org.folio.rest.core.RestClient.get(RestClient.java:40) ~[classes/:?]
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor$Dispatcher$ByteBuddy$S3RPVOhd.invokeWithArguments(Unknown Source) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor.invoke(InstrumentationMemberAccessor.java:251) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.util.reflection.ModuleMemberAccessor.invoke(ModuleMemberAccessor.java:55) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.tryInvoke(MockMethodAdvice.java:314) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice$RealMethodCall.invoke(MockMethodAdvice.java:234) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.invocation.InterceptedInvocation.callRealMethod(InterceptedInvocation.java:142) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:45) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.Answers.answer(Answers.java:90) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:111) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.handle(MockMethodAdvice.java:134) ~[mockito-core-5.14.2.jar:?]
	at org.folio.rest.core.RestClient.get(RestClient.java:32) ~[classes/:?]
	at org.folio.rest.core.RestClient.getById(RestClient.java:28) ~[classes/:?]
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor$Dispatcher$ByteBuddy$S3RPVOhd.invokeWithArguments(Unknown Source) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor.invoke(InstrumentationMemberAccessor.java:251) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.util.reflection.ModuleMemberAccessor.invoke(ModuleMemberAccessor.java:55) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.tryInvoke(MockMethodAdvice.java:314) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice$RealMethodCall.invoke(MockMethodAdvice.java:234) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.invocation.InterceptedInvocation.callRealMethod(InterceptedInvocation.java:142) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:45) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.Answers.answer(Answers.java:90) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:111) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.handle(MockMethodAdvice.java:134) ~[mockito-core-5.14.2.jar:?]
	at org.folio.rest.core.RestClient.getById(RestClient.java:27) ~[classes/:?]
	at org.folio.rest.core.RestClientTest.testGetShouldThrowExceptionWhenSearchById(RestClientTest.java:83) ~[test-classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[?:?]
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:766) ~[junit-platform-commons-1.11.2.jar:1.11.2]
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) [surefire-booter-3.5.1.jar:3.5.1]
13:42:37 [] [] [] [] ERROR RestClient           Exception calling GET /invoice-storage/invoices/64e6ce4d-a6a6-47f2-9bca-00ca2e0a33d9 - org.folio.rest.core.models.RequestContext@6de41f86
java.util.concurrent.CompletionException: java.lang.NullPointerException: Cannot invoke "io.vertx.core.json.JsonObject.getString(String)" because the return value of "org.folio.rest.tools.client.Response.getError()" is null
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:315) ~[?:?]
	at java.base/java.util.concurrent.CompletableFuture.uniApplyNow(CompletableFuture.java:687) ~[?:?]
	at java.base/java.util.concurrent.CompletableFuture.uniApplyStage(CompletableFuture.java:662) ~[?:?]
	at java.base/java.util.concurrent.CompletableFuture.thenApply(CompletableFuture.java:2168) ~[?:?]
	at org.folio.rest.core.RestClient.get(RestClient.java:40) ~[classes/:?]
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor$Dispatcher$ByteBuddy$S3RPVOhd.invokeWithArguments(Unknown Source) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor.invoke(InstrumentationMemberAccessor.java:251) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.util.reflection.ModuleMemberAccessor.invoke(ModuleMemberAccessor.java:55) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.tryInvoke(MockMethodAdvice.java:314) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice$RealMethodCall.invoke(MockMethodAdvice.java:234) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.invocation.InterceptedInvocation.callRealMethod(InterceptedInvocation.java:142) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:45) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.Answers.answer(Answers.java:90) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:111) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.handle(MockMethodAdvice.java:134) ~[mockito-core-5.14.2.jar:?]
	at org.folio.rest.core.RestClient.get(RestClient.java:32) ~[classes/:?]
	at org.folio.rest.core.RestClient.getById(RestClient.java:28) ~[classes/:?]
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:732) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor$Dispatcher$ByteBuddy$S3RPVOhd.invokeWithArguments(Unknown Source) ~[?:?]
	at org.mockito.internal.util.reflection.InstrumentationMemberAccessor.invoke(InstrumentationMemberAccessor.java:251) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.util.reflection.ModuleMemberAccessor.invoke(ModuleMemberAccessor.java:55) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.tryInvoke(MockMethodAdvice.java:314) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice$RealMethodCall.invoke(MockMethodAdvice.java:234) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.invocation.InterceptedInvocation.callRealMethod(InterceptedInvocation.java:142) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:45) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.Answers.answer(Answers.java:90) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:111) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82) ~[mockito-core-5.14.2.jar:?]
	at org.mockito.internal.creation.bytebuddy.MockMethodAdvice.handle(MockMethodAdvice.java:134) ~[mockito-core-5.14.2.jar:?]
	at org.folio.rest.core.RestClient.getById(RestClient.java:27) ~[classes/:?]
	at org.folio.rest.core.RestClientTest.testGetShouldThrowExceptionWhenSearchByIdAndResponseCodeIsNot200(RestClientTest.java:98) ~[test-classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[?:?]
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:766) ~[junit-platform-commons-1.11.2.jar:1.11.2]
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68) ~[junit-jupiter-engine-5.11.2.jar:5.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511) ~[?:?]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) [junit-platform-launcher-1.11.2.jar:1.11.2]
	at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122) [surefire-junit-platform-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) [surefire-booter-3.5.1.jar:3.5.1]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) [surefire-booter-3.5.1.jar:3.5.1]
Caused by: java.lang.NullPointerException: Cannot invoke "io.vertx.core.json.JsonObject.getString(String)" because the return value of "org.folio.rest.tools.client.Response.getError()" is null
	at org.folio.rest.utils.HelperUtils.verifyResponse(HelperUtils.java:57) ~[classes/:?]
	at org.folio.rest.utils.HelperUtils.verifyAndExtractBody(HelperUtils.java:50) ~[classes/:?]
	at org.folio.rest.core.RestClient.lambda$0(RestClient.java:42) ~[classes/:?]
	at java.base/java.util.concurrent.CompletableFuture.uniApplyNow(CompletableFuture.java:684) ~[?:?]
	... 106 more
[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.347 s -- in org.folio.rest.core.RestClientTest
[INFO] Running org.folio.rest.utils.HelperUtilsTest
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s -- in org.folio.rest.utils.HelperUtilsTest
[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   StorageTestSuite$DocumentTestNested>DocumentTest.testDocumentsCrud:99->TestBase.deleteDataSuccess:184 1 expectation failed.
Expected status code <204> but was <404>.

[ERROR]   StorageTestSuite$SystemDataLoadingTestNested>SystemDataLoadingTest.systemDataWasLoaded:18->TestBase.verifyCollectionQuantity:84->TestBase.verifyCollectionQuantity:79 1 expectation failed.
JSON path totalRecords doesn't match.
Expected: <0>
  Actual: <2>

[ERROR]   StorageTestSuite$TenantSampleDataTestNested>TenantSampleDataTest.sampleDataTests:74->TenantSampleDataTest.upgradeTenantWithNoSampleDataLoad:163->TestBase.verifyCollectionQuantity:84->TestBase.verifyCollectionQuantity:79 1 expectation failed.
JSON path totalRecords doesn't match.
Expected: <0>
  Actual: <2>

[ERROR]   StorageTestSuite$VoucherNumberTestNested>VoucherNumberTest.testGetVoucherNumber:67 
Expected: <11111111L>
     but: was <0L>
[INFO] 
[ERROR] Tests run: 136, Failures: 4, Errors: 0, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  54.271 s
[INFO] Finished at: 2024-10-22T13:42:38Z
[INFO] ------------------------------------------------------------------------
[INFO] [jenkins-event-spy] Generated /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189@tmp/withMaven17a76c08/maven-spy-20241022-134143-97418093783145999185719.log
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.5.1:test (default-test) on project mod-invoice-storage: There are test failures.
[ERROR] 
[ERROR] Please refer to /home/jenkins/workspace/d-invoice-storage_MODINVOSTO-189/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
script returned exit code 1script returned exit code 1
Build Result: FAILURE
Sending email to: folio-jenkins@indexdata.com
Slack Send Pipeline step running, values are - baseUrl: <empty>, teamDomain: folio-project, channel: folio-ci, color: #FF0000, botUser: false, tokenCredentialId: FOLIO_Slack, notifyCommitters: false, iconEmoji: <empty>, username: <empty>, timestamp: <empty>
script returned exit code 1